{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"7419274253345cf2cba652e62ba4306cf967b081","modified":1598063883388},{"_id":"source/CNAME","hash":"a513d637a25e617e2ece36e8c6c01793af9a63f9","modified":1588838794607},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1598026997078},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1598026997083},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1598026997084},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1598026997092},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1598026997093},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1598026997094},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1598026997100},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1598026997103},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1598026997111},{"_id":"themes/next/README.cn.md","hash":"58ffe752bc4b7f0069fcd6304bbc2d5ff7b80f89","modified":1598026997112},{"_id":"themes/next/README.md","hash":"898213e66d34a46c3cf8446bf693bd50db0d3269","modified":1598026997114},{"_id":"themes/next/_config.yml","hash":"6526708dfdd0c44e792fa6fbe60b20bca6c9315b","modified":1599586718474},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1598026997118},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1598026997119},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1598026997262},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1598026997105},{"_id":"source/_posts/JS的执行机制.md","hash":"9041e609d819e07aca240bca816fee994f7f6145","modified":1599487775670},{"_id":"source/_posts/JS连等运算.md","hash":"94afa4f5fd0cc521763692eb2c777917e27da431","modified":1599382073128},{"_id":"source/_posts/hello-world.md","hash":"b81ef2acfc6e45735a35e3e997c194842fe6c628","modified":1598064631872},{"_id":"source/_posts/display-visibility和opacity.md","hash":"7fa597a20520415e66c50c50e267ba8fb963fbdc","modified":1599641611339},{"_id":"source/_posts/leetcode-二叉树的层次遍历.md","hash":"3413a0770d36b6dd459e56e3056038e10f325b50","modified":1599583363040},{"_id":"source/_posts/leetcode-前k个高频元素.md","hash":"c678c9923e13df31a82135dbd23376e3def46296","modified":1599583332515},{"_id":"source/_posts/leetcode-单词搜索.md","hash":"5e1863fffe937060d6f31d63d40070be7533c031","modified":1600259938486},{"_id":"source/_posts/leetcode-组合.md","hash":"92159f3dc19a3517823842c38aceae032d56dd9e","modified":1599584388756},{"_id":"source/_posts/leetcode-组合总和.md","hash":"fbbdbb8121f546e0df470f62c3fde9c207c92719","modified":1599635901762},{"_id":"source/_posts/leetcode-组合总和2.md","hash":"55f3040ed2cdf3f225f646a406ff2da59f59f3ee","modified":1599835653989},{"_id":"source/_posts/leetcode-组合总和3.md","hash":"bce214ee7ab39178ef5db313a2c51b01fbafa81d","modified":1599842161240},{"_id":"source/_posts/this的考查.md","hash":"b6719fea22929fd05575ee7d47617654f4b1f73c","modified":1599319095456},{"_id":"source/_posts/undefined和null.md","hash":"d6d66ac0ca95d7760aad884a159685764c65fb31","modified":1599319080076},{"_id":"source/_posts/为什么需要node作为中间层.md","hash":"be94ad6b022b6c53515b3411b9710e19241029e7","modified":1599318300285},{"_id":"source/_posts/二叉树解题总结.md","hash":"c89e97743935e51a822290d63b2129885b4d809d","modified":1599406800029},{"_id":"source/_posts/剑指offer-二叉树的镜像.md","hash":"ce134db3fce37893478e70390f23524033b9330d","modified":1600683652764},{"_id":"source/_posts/剑指offer-对称的二叉树.md","hash":"aec5d47e0f8c8480e87e2ab1b95d63c8d15aa3bd","modified":1600683914007},{"_id":"source/_posts/剑指offer-重建二叉树.md","hash":"76e7521fbf2d6b5a6fdd41b2714699aafe5d2bcb","modified":1600682985988},{"_id":"source/_posts/回流和重绘.md","hash":"b04f434b1a74af56c0d829600504582a8676d88d","modified":1599318990112},{"_id":"source/_posts/多个按钮单击事件.md","hash":"727e04c6bd3ab6b9b3a9e972a716c1554a6d235b","modified":1599319048450},{"_id":"source/_posts/回溯算法.md","hash":"baefeb2373ff96d58574c4d225257bfeb0bcfad3","modified":1599836104219},{"_id":"source/_posts/如何实现数组去重.md","hash":"2610249a51246255bd9518c956339144be982bec","modified":1599319063232},{"_id":"source/_posts/常见面试题.md","hash":"402b810129f733321ca50e022bf34db15cdb8db5","modified":1599642266916},{"_id":"source/_posts/跨域常用解决方案.md","hash":"43accaa0b9a3da99380aa5a9b5ec65280036d91f","modified":1599379487233},{"_id":"source/_posts/排序算法.md","hash":"7858bf2ba1d7b67941abe9e0929a3be2db6fb6df","modified":1599544223273},{"_id":"source/_posts/闭包的考查.md","hash":"ea7d72ce6ec26b5813d5fb586c80d1ecac92e849","modified":1599319030105},{"_id":"source/_posts/面经-虾皮.md","hash":"2aaf59f1f74be8fa948fe2d2fb78dc879ad411cc","modified":1599216474244},{"_id":"source/_posts/面经-yz.md","hash":"8ceb3981fa91ba50f56d2074d59623d22fff9fda","modified":1599386808436},{"_id":"source/_posts/原型和原型链.md","hash":"a952e14d06e8c471f06487d1e5a6c87c401ae7e1","modified":1599319108993},{"_id":"source/_posts/防抖和节流.md","hash":"5075d19ef5fac819f8be4ee11645a38a55e56971","modified":1599495194264},{"_id":"source/categories/index.md","hash":"e7971e1815a873c64df5b18cb8394e2adf6bfc69","modified":1598064766060},{"_id":"source/tags/index.md","hash":"04205b89cb8f043375423d0d7b413d0221ff9ba6","modified":1598064649800},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1598026997086},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1598026997087},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1598026997089},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1598026997090},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1598026997126},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1598026997130},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1598026997130},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1598026997131},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1598026997132},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1598026997133},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1598026997133},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1598026997134},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1598026997135},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1598026997139},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1598026997141},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1598026997142},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1598026997134},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1598026997144},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1598026997146},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1598026997145},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1598026997149},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1598026997258},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1598026997259},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1598026997260},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1598026997260},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1598026997262},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1598026997261},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1598026997261},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1598026997263},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1598026997264},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1598026997483},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1598026997483},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1598026997484},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1598026997366},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1598026997147},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1598026997148},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1598026997151},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1598026997151},{"_id":"themes/next/layout/_macro/post.swig","hash":"8914070fcd7497cb50b933a92e1cd601c9061701","modified":1754273405472},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1598026997153},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1598026997158},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1598026997162},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1598026997160},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1598026997163},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1598026997167},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1598026997168},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1598026997168},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"26d95dfc5220d041841fa4ac66adb53d768b23d5","modified":1599321495866},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1598026997177},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1598026997185},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1598026997184},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1598026997210},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1598026997246},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1598026997246},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1598026997247},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1598026997248},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1598026997249},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1598026997249},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1598026997248},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1598026997265},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1598026997265},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1598026997266},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1598026997266},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1598026997267},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1598026997267},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1598026997268},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1598026997269},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1598026997271},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1598026997365},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1598026997366},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1598026997367},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1598026997368},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1598026997368},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1598026997369},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1598026997372},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1598026997373},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1598026997374},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1598026997374},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1598026997375},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1598026997375},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1598026997376},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1598026997377},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1598026997376},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1598026997378},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1598026997378},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1598026997379},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1598026997377},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1598026997202},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1598026997208},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1598026997343},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1598026997343},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1598026997346},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1598026997363},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1598026997364},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1598026997165},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1598026997166},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1598026997173},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1598026997174},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1598026997176},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1598026997179},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1598026997181},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1598026997182},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1598026997183},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1598026997199},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1598026997201},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1598026997209},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1598026997213},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1598026997214},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1598026997215},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1598026997216},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1598026997217},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1598026997216},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1598026997218},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1598026997219},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1598026997227},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1598026997230},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1598026997232},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1598026997233},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1598026997234},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1598026997241},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1598026997240},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1598026997243},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1598026997242},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1598026997243},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1598026997244},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1598026997245},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1598026997240},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1598026997235},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1598026997252},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1598026997255},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1598026997256},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1598026997257},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1598026997341},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1598026997342},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1598026997345},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1598026997346},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1598026997362},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1598026997363},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1598026997363},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1598026997364},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1598026997409},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1598026997405},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1598026997422},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1598026997422},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1598026997423},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1598026997423},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1598026997410},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1598026997410},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1598026997427},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1598026997427},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1598026997426},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1598026997428},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1598026997426},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1598026997440},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1598026997408},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1598026997447},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1598026997448},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1598026997449},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1598026997449},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1598026997450},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1598026997456},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1598026997446},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1598026997457},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1598026997458},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1598026997459},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1598026997461},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1598026997466},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1598026997462},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1598026997465},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1598026997467},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1598026997468},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1598026997463},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1598026997466},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1598026997472},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1598026997469},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1598026997444},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1598026997444},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1598026997442},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1598026997443},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1598026997445},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1598026997445},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1598026997478},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1598026997478},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1598026997481},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1598026997481},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1598026997482},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1598026997380},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1598026997381},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1598026997381},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1598026997382},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1598026997383},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1598026997383},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1598026997384},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1598026997389},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1598026997385},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1598026997390},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1598026997391},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1598026997442},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1598026997250},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1598026997274},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1598026997274},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1598026997275},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1598026997275},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1598026997315},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1598026997334},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1598026997285},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1598026997335},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1598026997335},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1598026997338},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1598026997339},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1598026997340},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1598026997273},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1598026997251},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1598026997356},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1598026997337},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1598026997355},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1598026997356},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1598026997357},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1598026997359},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1598026997359},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1598026997360},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1598026997357},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1598026997360},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1598026997361},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1598026997361},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1598026997348},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1598026997349},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1598026997350},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1598026997350},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1598026997351},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1598026997352},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1598026997351},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1598026997348},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1598026997402},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1598026997401},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1598026997399},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1598026997425},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1598026997424},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1598026997411},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1598026997412},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1598026997413},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1598026997414},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1598026997414},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1598026997413},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1598026997418},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1598026997420},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1598026997419},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1598026997430},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1598026997429},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1598026997429},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1598026997476},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1598026997477},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1598026997387},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1598026997400},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1598026997439},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1598026997440},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1598026997480},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1598026997276},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1598026997277},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1598026997278},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1598026997278},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1598026997279},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1598026997279},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1598026997280},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1598026997281},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1598026997281},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1598026997283},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1598026997282},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1598026997283},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1598026997284},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1598026997291},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1598026997284},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1598026997292},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1598026997294},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1598026997295},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1598026997294},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1598026997296},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1598026997296},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1598026997298},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1598026997299},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1598026997299},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1598026997293},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1598026997300},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1598026997297},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1598026997301},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1598026997302},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1598026997301},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1598026997306},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1598026997308},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1598026997311},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1598026997309},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1598026997308},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1598026997312},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1598026997312},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1598026997313},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1598026997314},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1598026997316},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1598026997317},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1598026997317},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1598026997316},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1598026997318},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1598026997324},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1598026997325},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1598026997319},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1598026997326},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1598026997328},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1598026997327},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1598026997330},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1598026997329},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1598026997331},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1598026997330},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1598026997331},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1598026997332},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1598026997332},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1598026997333},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1598026997358},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1598026997353},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1598026997394},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1598026997354},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1598026997395},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1598026997394},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1598026997396},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1598026997398},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1598026997416},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1598026997416},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1598026997415},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1598026997417},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1598026997417},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1598026997418},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1598026997433},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1598026997431},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1598026997437},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1598026997407},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1598026997475},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1598026997435},{"_id":"public/search.xml","hash":"fb580c46f4cceeabd5d6b809c2e3a74c8158e052","modified":1754273561781},{"_id":"public/content.json","hash":"cf046def4bae09c79d9164c264ef7415688686a1","modified":1754273561781},{"_id":"public/404.html","hash":"f6e99e9418e6e1e56cb92a325ba8be7fdf6508d9","modified":1754273561781},{"_id":"public/categories/index.html","hash":"909fade1a428bea10a5de33d45adfd23c52a56cc","modified":1754273561781},{"_id":"public/tags/index.html","hash":"9ab559eac8f0463e57235fd85a8e0cd0b2d60265","modified":1754273561781},{"_id":"public/2020/09/21/剑指offer-对称的二叉树/index.html","hash":"5fac6162e041de43e9fe53f35ac848c5335cfa0f","modified":1754273561781},{"_id":"public/2020/09/21/剑指offer-二叉树的镜像/index.html","hash":"4c2a833b5809a6b1f56ec48633bf62877618b880","modified":1754273561781},{"_id":"public/2020/09/21/剑指offer-重建二叉树/index.html","hash":"98cbb3cc619786becf6988f1433dbb27144fe3fb","modified":1754273561781},{"_id":"public/2020/09/16/leetcode-单词搜索/index.html","hash":"6cf538519e40ba73a5efb64ed818cfa73dc867d9","modified":1754273561781},{"_id":"public/2020/09/12/leetcode-组合总和3/index.html","hash":"e877d11027cb56a46f1dea1bb392b72b4cd109bb","modified":1754273561781},{"_id":"public/2020/09/11/回溯算法/index.html","hash":"5fab1a7125df3a3ceab645c8dab291258085fc71","modified":1754273561781},{"_id":"public/2020/09/11/leetcode-组合总和2/index.html","hash":"9683966b0b21dc68737400fc71a179f14a826e74","modified":1754273561781},{"_id":"public/2020/09/09/display-visibility和opacity/index.html","hash":"865c1fc9083d8221a6f7de8b3dd60fac5fca78ad","modified":1754273561781},{"_id":"public/2020/09/09/leetcode-组合总和/index.html","hash":"9e75a35fcefebcf0f01f8bc9cc6e560f6a3af8a2","modified":1754273561781},{"_id":"public/2020/09/09/leetcode-组合/index.html","hash":"a1e6d6265a356c749b634ad524a7eba62358b9d7","modified":1754273561781},{"_id":"public/2020/09/08/leetcode-前k个高频元素/index.html","hash":"2e1dfb3fe984bedb347a23de1b88a8443c439514","modified":1754273561781},{"_id":"public/2020/09/07/防抖和节流/index.html","hash":"9da0085c62729415bb11f9e8b91bee5df8b92b6f","modified":1754273561781},{"_id":"public/2020/09/07/JS的执行机制/index.html","hash":"a3ad41c1062becf59d877a81e790c995c9182c96","modified":1754273561781},{"_id":"public/2020/09/07/排序算法/index.html","hash":"434d56ada9597bfcece4edb0bcc2f311abda4991","modified":1754273561781},{"_id":"public/2020/09/06/二叉树解题总结/index.html","hash":"d12627c729573b476da9fd1c68bc617a59c3c013","modified":1754273561781},{"_id":"public/2020/09/06/leetcode-二叉树的层次遍历/index.html","hash":"3e6d5b7ac4503ff6954876948055cf4d28d006b3","modified":1754273561781},{"_id":"public/2020/09/06/常见面试题/index.html","hash":"5ff20ea0b9c8795d0515c1eaffe13f185e4f1ac6","modified":1754273561781},{"_id":"public/2020/09/06/JS连等运算/index.html","hash":"9560c89b636698cb8f6d1fdb53b016c630b48bc3","modified":1754273561781},{"_id":"public/2020/09/06/跨域常用解决方案/index.html","hash":"721ab5fa5d5b5389de2fa59366fe43eab88ed5f9","modified":1754273561781},{"_id":"public/2020/09/05/回流和重绘/index.html","hash":"60306f500234e2fe786713f884e60779e18ac7b5","modified":1754273561781},{"_id":"public/2020/09/05/undefined和null/index.html","hash":"15d269748240c3a883963a7137e02fde0499bee4","modified":1754273561781},{"_id":"public/2020/09/05/如何实现数组去重/index.html","hash":"3e55f9462ab711bccc8573836cc1b9ac9b1294f0","modified":1754273561781},{"_id":"public/2020/09/05/多个按钮单击事件/index.html","hash":"42eb437f2f4ee1f2be294a30c6946e693c30fcea","modified":1754273561781},{"_id":"public/2020/09/04/原型和原型链/index.html","hash":"52dabc1e858bbe06b3ff18919f0682e3f7f70a1d","modified":1754273561781},{"_id":"public/2020/09/04/闭包的考查/index.html","hash":"8ebd1e0dde5324c374d7f9d92ee87a90b65f486c","modified":1754273561781},{"_id":"public/2020/09/04/this的考查/index.html","hash":"58095a42fd82f2b9013300accd86a4809146123d","modified":1754273561781},{"_id":"public/2020/09/04/面经-虾皮/index.html","hash":"ac1bcecb73881ad2eebf8ab931b357aae2211121","modified":1754273561781},{"_id":"public/2020/09/01/面经-yz/index.html","hash":"014dc26f1f8ad72a48a254d8812de6ea49d2a3c5","modified":1754273561781},{"_id":"public/2020/09/01/为什么需要node作为中间层/index.html","hash":"d092fa84d6fd029879f64a23df7826b394067440","modified":1754273561781},{"_id":"public/2020/05/07/hello-world/index.html","hash":"05cf8a4d4e6b14fad91c63dc51ef64b6f352da1f","modified":1754273561781},{"_id":"public/archives/index.html","hash":"4be3dd7309744ca628de68174f038f8e7cbdd48a","modified":1754273561781},{"_id":"public/archives/page/2/index.html","hash":"1f9d8934c36067b4ff4ab0b84266d0c360e38860","modified":1754273561781},{"_id":"public/archives/page/3/index.html","hash":"a0d5639c9653ec2aa3e1a834a80388b37b82c8b0","modified":1754273561781},{"_id":"public/archives/2020/index.html","hash":"14ea2796d42e552bccd41e54eefe3e85f211b0b2","modified":1754273561781},{"_id":"public/archives/2020/page/2/index.html","hash":"eaa015236bb42ced265767f6f18cb3e67241e636","modified":1754273561781},{"_id":"public/archives/2020/page/3/index.html","hash":"4b5765da80fb4f80699bc85bcac3816fe54f6690","modified":1754273561781},{"_id":"public/archives/2020/05/index.html","hash":"a609c60288c3bdd083145d14694c61b5476e6f0a","modified":1754273561781},{"_id":"public/archives/2020/09/index.html","hash":"67242c23511bdaf5dc7d47d79065f0b6d61d01a2","modified":1754273561781},{"_id":"public/archives/2020/09/page/2/index.html","hash":"ece5de5ad18aa6a95c7bac697c1a1da27b6a4b3a","modified":1754273561781},{"_id":"public/archives/2020/09/page/3/index.html","hash":"9314c887879ce60b3889bb8cb5fa7e596c43e6b0","modified":1754273561781},{"_id":"public/tags/Hexo/index.html","hash":"7947146f57d07eb1e1b33972c40caaaa0c90f3e5","modified":1754273561781},{"_id":"public/tags/面试题/index.html","hash":"f06e490307f3903b2ac94a3249b7009b17b4d95d","modified":1754273561781},{"_id":"public/tags/面试题/page/2/index.html","hash":"5138ee0009d09d90ffab98e7af61251baf44d32c","modified":1754273561781},{"_id":"public/tags/二叉树/index.html","hash":"7e4b9df7baf3e5d92c7b8da459d1e08523feb54f","modified":1754273561781},{"_id":"public/tags/递归/index.html","hash":"6b07767f976a6814ae4842bfcfa02defa37399d0","modified":1754273561781},{"_id":"public/tags/递归/page/2/index.html","hash":"33788677514983d428ac46c17b850a98db91cbec","modified":1754273561781},{"_id":"public/tags/队列/index.html","hash":"24ba154d7102a76e5a4ab932b7b6cdaeda38e4dd","modified":1754273561781},{"_id":"public/tags/leetcode/index.html","hash":"9bd2a747b11f88bcc87dcc2dd0165563d331ad06","modified":1754273561781},{"_id":"public/tags/小顶堆/index.html","hash":"983608e2ec4fc19124020884d7cb51ef651163f7","modified":1754273561781},{"_id":"public/tags/桶排序/index.html","hash":"ae973968136dc3557e8eddb5a62ef687310a0220","modified":1754273561781},{"_id":"public/tags/回溯/index.html","hash":"315bf1a22f9dcb82ff345da6d67543c727d4740d","modified":1754273561781},{"_id":"public/tags/Map/index.html","hash":"75ce1be76d388d5913caebd69d4bef76aeae1599","modified":1754273561781},{"_id":"public/tags/dfs/index.html","hash":"acae7ccdbe6bcc63c0a790d78b920b266bdfe984","modified":1754273561781},{"_id":"public/tags/bfs/index.html","hash":"cd3e8467b87b9d71d446d6939bb8f5f8d0995748","modified":1754273561781},{"_id":"public/tags/剑指offer/index.html","hash":"55b77b48701bb521531dc2bb7d115693e3508758","modified":1754273561781},{"_id":"public/categories/CSS/index.html","hash":"bc7c69eee72d9b232f0efd8981eae5e7bd249322","modified":1754273561781},{"_id":"public/tags/排序/index.html","hash":"2f382b4c672c556deb66dadfb7418db96bf19c0e","modified":1754273561781},{"_id":"public/categories/算法与数据结构/index.html","hash":"192eb43aabe349cbb61dd0e5d86caa0aff22dbae","modified":1754273561781},{"_id":"public/categories/算法与数据结构/page/2/index.html","hash":"a07bbb5ff4d32396b58a466fc8eb88236bd46242","modified":1754273561781},{"_id":"public/categories/JavaScript/page/2/index.html","hash":"63dca8060250a9190ef4a1f8dab378e39b070e3b","modified":1754273561781},{"_id":"public/index.html","hash":"81bf6dd84b66a2d0e96874ca536c1d1ab5c915df","modified":1754273561781},{"_id":"public/page/2/index.html","hash":"dc6dabe9d6fedd74a12aa95384e2c10333fdb704","modified":1754273561781},{"_id":"public/page/3/index.html","hash":"320a6c667b6810fc4735c785a06072554c6b2336","modified":1754273561781},{"_id":"public/categories/JavaScript/index.html","hash":"dd68f601b4c1b758c3232548e6d975007050fb37","modified":1754273561781},{"_id":"public/CNAME","hash":"a513d637a25e617e2ece36e8c6c01793af9a63f9","modified":1754273561781},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1754273561781},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1754273561781},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1754273561781},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1754273561781},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1754273561781},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1754273561781},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1754273561781},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1754273561781},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1754273561781},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1754273561781},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1754273561781},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1754273561781},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1754273561781},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1754273561781},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1754273561781},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1754273561781},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1754273561781},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1754273561781},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1754273561781},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1754273561781},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1754273561781},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1754273561781},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1754273561781},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1754273561781},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1754273561781},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1754273561781},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1754273561781},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1754273561781},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1754273561781},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1754273561781},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1754273561781},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1754273561781},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1754273561781},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1754273561781},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1754273561781},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1754273561781},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1754273561781},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1754273561781},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1754273561781},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1754273561781},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1754273561781},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1754273561781},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1754273561781},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1754273561781},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1754273561781},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1754273561781},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1754273561781},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1754273561781},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1754273561781},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1754273561781},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1754273561781},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1754273561781},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1754273561781},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1754273561781},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1754273561781},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1754273561781},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1754273561781},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1754273561781},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1754273561781},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1754273561781},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1754273561781},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1754273561781},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1754273561781},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1754273561781},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1754273561781},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1754273561781},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1754273561781},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1754273561781},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1754273561781},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1754273561781},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1754273561781},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1754273561781},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1754273561781},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1754273561781},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1754273561781},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1754273561781},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1754273561781},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1754273561781},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1754273561781},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1754273561781},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1754273561781},{"_id":"public/lib/fastclick/README.html","hash":"b9e008af0866799103e596e2eda466a33d7dde18","modified":1754273561781},{"_id":"public/lib/jquery_lazyload/README.html","hash":"9c91bba4263a20004f2c10772d438cfa8312c308","modified":1754273561781},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"7eecc5e472416b9870580c53b7ed0c44474ed23a","modified":1754273561781},{"_id":"public/css/main.css","hash":"ee3e06b20595b5e28befc46af8b8bbb3240bcfa4","modified":1754273561781},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1754273561781},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1754273561781},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1754273561781},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1754273561781},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1754273561781},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1754273561781},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1754273561781},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1754273561781},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1754273561781},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1754273561781},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1754273561781},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1754273561781},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1754273561781},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1754273561781},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1754273561781},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1754273561781},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1754273561781},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1754273561781},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1754273561781},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1754273561781},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1754273561781},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1754273561781},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1754273561781},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1754273561781}],"Category":[{"name":"CSS","_id":"cmdwh6nws00078ubp2ip774w4"},{"name":"算法与数据结构","_id":"cmdwh6nwx000d8ubp8x37h5ng"},{"name":"JavaScript","_id":"cmdwh6nxh00138ubp817th5gb"}],"Data":[],"Page":[{"_content":"<!DOCTYPE html>\n<html>\n\n<head>\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n    <meta name=\"robots\" content=\"all\" />\n    <meta name=\"robots\" content=\"index,follow\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\" />\n</head>\n\n<body>\n    <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"/\"\n        homePageName=\"回到我的主页\"></script>\n    <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n    <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n\n</html>","source":"404.html","raw":"<!DOCTYPE html>\n<html>\n\n<head>\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n    <meta name=\"robots\" content=\"all\" />\n    <meta name=\"robots\" content=\"index,follow\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\" />\n</head>\n\n<body>\n    <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"/\"\n        homePageName=\"回到我的主页\"></script>\n    <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n    <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n\n</html>","date":"2022-05-30T12:31:18.392Z","updated":"2020-08-22T02:38:03.388Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cmdwh6nqi00008ubp2kw15cf7","content":"<!DOCTYPE html>\n<html>\n\n<head>\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n    <meta name=\"robots\" content=\"all\" />\n    <meta name=\"robots\" content=\"index,follow\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\" />\n<meta name=\"generator\" content=\"Hexo 4.2.0\"></head>\n\n<body>\n    <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"/\"\n        homePageName=\"回到我的主页\"></script>\n    <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n    <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html>\n\n<head>\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n    <meta name=\"robots\" content=\"all\" />\n    <meta name=\"robots\" content=\"index,follow\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\" />\n<meta name=\"generator\" content=\"Hexo 4.2.0\"></head>\n\n<body>\n    <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"/\"\n        homePageName=\"回到我的主页\"></script>\n    <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n    <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n\n</html>"},{"title":"categories","date":"2020-08-22T02:52:09.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-08-22 10:52:09\ntype: \"categories\"\n---\n","updated":"2020-08-22T02:52:46.060Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cmdwh6nw700028ubp6t8if2qm","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2020-08-22T02:48:30.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-08-22 10:48:30\ntype: \"tags\"\n---\n","updated":"2020-08-22T02:50:49.800Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cmdwh6nwf00048ubp8pzschyo","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!--more-->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ntag:\n  - Hexo\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!--more-->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2020-05-07T07:24:10.236Z","updated":"2020-08-22T02:50:31.872Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmdwh6nw000018ubpd02zd6w9","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<a id=\"more\"></a>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>","more":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>"},{"title":"display,visibility和opacity","date":"2020-09-09T08:43:48.000Z","_content":"以下为三者设置样式的区别\n\n<!--more-->\n**display: none**\n1. DOM结构：浏览器不会渲染display属性为none的元素，不占用空间\n2. 事件监听：无法进行DOM事件监听\n3. 性能：动态改变此属性会引起重排，性能较差\n4. 继承：不会被子元素继承，毕竟子类也不会被渲染\n5. transition：transition不支持display\n\n**visibility: hidden**\n1. DOM结构：元素被隐藏，但是会被渲染，不会消失，占用空间\n2. 事件监听：无法进行DOM事件监听\n3. 性能：动态改变此属性会引起重绘，性能较高\n4. 继承：会被子元素继承，自元素可以通过设置visibility: visible来取消隐藏\n5. transition：visibility会立即显示，隐藏时会延时\n\n**opacity: 0**\n1. DOM结构：透明度为100%，元素隐藏，占用空间\n2. 事件监听：可以进行DOM事件监听\n3. 性能：提升为合成层，不会触发重绘，性能较高\n4. 继承：会被子元素继承且子元素不能通过opacity: 1来取消隐藏\n5. transition：opacity可以延时显示和隐藏","source":"_posts/display-visibility和opacity.md","raw":"---\ntitle: 'display,visibility和opacity'\ndate: 2020-09-09 16:43:48\ncategories:\n    - CSS\ntags:\n    - 面试题\n---\n以下为三者设置样式的区别\n\n<!--more-->\n**display: none**\n1. DOM结构：浏览器不会渲染display属性为none的元素，不占用空间\n2. 事件监听：无法进行DOM事件监听\n3. 性能：动态改变此属性会引起重排，性能较差\n4. 继承：不会被子元素继承，毕竟子类也不会被渲染\n5. transition：transition不支持display\n\n**visibility: hidden**\n1. DOM结构：元素被隐藏，但是会被渲染，不会消失，占用空间\n2. 事件监听：无法进行DOM事件监听\n3. 性能：动态改变此属性会引起重绘，性能较高\n4. 继承：会被子元素继承，自元素可以通过设置visibility: visible来取消隐藏\n5. transition：visibility会立即显示，隐藏时会延时\n\n**opacity: 0**\n1. DOM结构：透明度为100%，元素隐藏，占用空间\n2. 事件监听：可以进行DOM事件监听\n3. 性能：提升为合成层，不会触发重绘，性能较高\n4. 继承：会被子元素继承且子元素不能通过opacity: 1来取消隐藏\n5. transition：opacity可以延时显示和隐藏","slug":"display-visibility和opacity","published":1,"updated":"2020-09-09T08:53:31.339Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmdwh6nwa00038ubp2t3i3ymj","content":"<p>以下为三者设置样式的区别</p>\n<a id=\"more\"></a>\n<p><strong>display: none</strong></p>\n<ol>\n<li>DOM结构：浏览器不会渲染display属性为none的元素，不占用空间</li>\n<li>事件监听：无法进行DOM事件监听</li>\n<li>性能：动态改变此属性会引起重排，性能较差</li>\n<li>继承：不会被子元素继承，毕竟子类也不会被渲染</li>\n<li>transition：transition不支持display</li>\n</ol>\n<p><strong>visibility: hidden</strong></p>\n<ol>\n<li>DOM结构：元素被隐藏，但是会被渲染，不会消失，占用空间</li>\n<li>事件监听：无法进行DOM事件监听</li>\n<li>性能：动态改变此属性会引起重绘，性能较高</li>\n<li>继承：会被子元素继承，自元素可以通过设置visibility: visible来取消隐藏</li>\n<li>transition：visibility会立即显示，隐藏时会延时</li>\n</ol>\n<p><strong>opacity: 0</strong></p>\n<ol>\n<li>DOM结构：透明度为100%，元素隐藏，占用空间</li>\n<li>事件监听：可以进行DOM事件监听</li>\n<li>性能：提升为合成层，不会触发重绘，性能较高</li>\n<li>继承：会被子元素继承且子元素不能通过opacity: 1来取消隐藏</li>\n<li>transition：opacity可以延时显示和隐藏</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>以下为三者设置样式的区别</p>","more":"<p><strong>display: none</strong></p>\n<ol>\n<li>DOM结构：浏览器不会渲染display属性为none的元素，不占用空间</li>\n<li>事件监听：无法进行DOM事件监听</li>\n<li>性能：动态改变此属性会引起重排，性能较差</li>\n<li>继承：不会被子元素继承，毕竟子类也不会被渲染</li>\n<li>transition：transition不支持display</li>\n</ol>\n<p><strong>visibility: hidden</strong></p>\n<ol>\n<li>DOM结构：元素被隐藏，但是会被渲染，不会消失，占用空间</li>\n<li>事件监听：无法进行DOM事件监听</li>\n<li>性能：动态改变此属性会引起重绘，性能较高</li>\n<li>继承：会被子元素继承，自元素可以通过设置visibility: visible来取消隐藏</li>\n<li>transition：visibility会立即显示，隐藏时会延时</li>\n</ol>\n<p><strong>opacity: 0</strong></p>\n<ol>\n<li>DOM结构：透明度为100%，元素隐藏，占用空间</li>\n<li>事件监听：可以进行DOM事件监听</li>\n<li>性能：提升为合成层，不会触发重绘，性能较高</li>\n<li>继承：会被子元素继承且子元素不能通过opacity: 1来取消隐藏</li>\n<li>transition：opacity可以延时显示和隐藏</li>\n</ol>"},{"title":"leetcode-二叉树的层次遍历","date":"2020-09-06T14:42:33.000Z","_content":"给你一个二叉树，请你返回其按 层序遍历 得到的节点值。 （即逐层地，从左到右访问所有节点）。\n<!--more-->\n> 原题描述访问：https://leetcode-cn.com/problems/binary-tree-level-order-traversal/\n\n### bfs\n首先定义一个存储结果的数组，将二叉树的每一层分级lv，遍历每个跟节点，将节点的值存入数组，遍历一层lv+1，递归左右子节点将值存入同级数组中，代码如下：\n```javascript\nvar levelOrder = function(root) {\n    if(!root || root.length === 0) return []\n    let res = []\n    let bfs = (curr, lv) => {\n        !res[lv] && (res[lv] = [])\n        if(curr){\n            res[lv].push(curr.val)\n            if(curr.left) bfs(curr.left, lv+1)\n            if(curr.right) bfs(curr.right, lv+1)\n        }\n    }\n    bfs(root, 0)\n    return res\n};\n```\n### 队列\n将初始二叉树存入quene中，通过双层while循环存入每层级的值\n- 外层while循环的是二叉树每层的数量\n- 内层while目的是将每层的每项存入各层数组中\n\n代码如下：\n```javascript\nvar levelOrder = function(root) {\n    if(!root || root.length === 0) return []\n    var result = []\n    var quene = [root]\n    while(quene.length){\n        var len = quene.length\n        var layer = []\n        while(len){\n            var node = quene.shift()\n            layer.push(node.val)\n            if(node.left){\n                quene.push(node.left)\n            }\n            if(node.right){\n                quene.push(node.right)\n            }\n            len--\n        }\n        result.push(layer)\n    }\n    return result\n};\n```\n","source":"_posts/leetcode-二叉树的层次遍历.md","raw":"---\ntitle: leetcode-二叉树的层次遍历\ndate: 2020-09-06 22:42:33\ncategories:\n    - 算法与数据结构\ntags:\n    - 二叉树\n    - 队列\n    - 递归\n    - leetcode\n---\n给你一个二叉树，请你返回其按 层序遍历 得到的节点值。 （即逐层地，从左到右访问所有节点）。\n<!--more-->\n> 原题描述访问：https://leetcode-cn.com/problems/binary-tree-level-order-traversal/\n\n### bfs\n首先定义一个存储结果的数组，将二叉树的每一层分级lv，遍历每个跟节点，将节点的值存入数组，遍历一层lv+1，递归左右子节点将值存入同级数组中，代码如下：\n```javascript\nvar levelOrder = function(root) {\n    if(!root || root.length === 0) return []\n    let res = []\n    let bfs = (curr, lv) => {\n        !res[lv] && (res[lv] = [])\n        if(curr){\n            res[lv].push(curr.val)\n            if(curr.left) bfs(curr.left, lv+1)\n            if(curr.right) bfs(curr.right, lv+1)\n        }\n    }\n    bfs(root, 0)\n    return res\n};\n```\n### 队列\n将初始二叉树存入quene中，通过双层while循环存入每层级的值\n- 外层while循环的是二叉树每层的数量\n- 内层while目的是将每层的每项存入各层数组中\n\n代码如下：\n```javascript\nvar levelOrder = function(root) {\n    if(!root || root.length === 0) return []\n    var result = []\n    var quene = [root]\n    while(quene.length){\n        var len = quene.length\n        var layer = []\n        while(len){\n            var node = quene.shift()\n            layer.push(node.val)\n            if(node.left){\n                quene.push(node.left)\n            }\n            if(node.right){\n                quene.push(node.right)\n            }\n            len--\n        }\n        result.push(layer)\n    }\n    return result\n};\n```\n","slug":"leetcode-二叉树的层次遍历","published":1,"updated":"2020-09-08T16:42:43.040Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmdwh6nwn00068ubp8d6u9z7u","content":"<p>给你一个二叉树，请你返回其按 层序遍历 得到的节点值。 （即逐层地，从左到右访问所有节点）。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>原题描述访问：<a href=\"https://leetcode-cn.com/problems/binary-tree-level-order-traversal/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/binary-tree-level-order-traversal/</a></p>\n</blockquote>\n<h3 id=\"bfs\"><a href=\"#bfs\" class=\"headerlink\" title=\"bfs\"></a>bfs</h3><p>首先定义一个存储结果的数组，将二叉树的每一层分级lv，遍历每个跟节点，将节点的值存入数组，遍历一层lv+1，递归左右子节点将值存入同级数组中，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> levelOrder = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!root || root.length === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> []</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = []</span><br><span class=\"line\">    <span class=\"keyword\">let</span> bfs = <span class=\"function\">(<span class=\"params\">curr, lv</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        !res[lv] &amp;&amp; (res[lv] = [])</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(curr)&#123;</span><br><span class=\"line\">            res[lv].push(curr.val)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(curr.left) bfs(curr.left, lv+<span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(curr.right) bfs(curr.right, lv+<span class=\"number\">1</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bfs(root, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h3><p>将初始二叉树存入quene中，通过双层while循环存入每层级的值</p>\n<ul>\n<li>外层while循环的是二叉树每层的数量</li>\n<li>内层while目的是将每层的每项存入各层数组中</li>\n</ul>\n<p>代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> levelOrder = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!root || root.length === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> []</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = []</span><br><span class=\"line\">    <span class=\"keyword\">var</span> quene = [root]</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(quene.length)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> len = quene.length</span><br><span class=\"line\">        <span class=\"keyword\">var</span> layer = []</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(len)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> node = quene.shift()</span><br><span class=\"line\">            layer.push(node.val)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node.left)&#123;</span><br><span class=\"line\">                quene.push(node.left)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node.right)&#123;</span><br><span class=\"line\">                quene.push(node.right)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            len--</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        result.push(layer)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>给你一个二叉树，请你返回其按 层序遍历 得到的节点值。 （即逐层地，从左到右访问所有节点）。</p>","more":"<blockquote>\n<p>原题描述访问：<a href=\"https://leetcode-cn.com/problems/binary-tree-level-order-traversal/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/binary-tree-level-order-traversal/</a></p>\n</blockquote>\n<h3 id=\"bfs\"><a href=\"#bfs\" class=\"headerlink\" title=\"bfs\"></a>bfs</h3><p>首先定义一个存储结果的数组，将二叉树的每一层分级lv，遍历每个跟节点，将节点的值存入数组，遍历一层lv+1，递归左右子节点将值存入同级数组中，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> levelOrder = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!root || root.length === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> []</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = []</span><br><span class=\"line\">    <span class=\"keyword\">let</span> bfs = <span class=\"function\">(<span class=\"params\">curr, lv</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        !res[lv] &amp;&amp; (res[lv] = [])</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(curr)&#123;</span><br><span class=\"line\">            res[lv].push(curr.val)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(curr.left) bfs(curr.left, lv+<span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(curr.right) bfs(curr.right, lv+<span class=\"number\">1</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bfs(root, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h3><p>将初始二叉树存入quene中，通过双层while循环存入每层级的值</p>\n<ul>\n<li>外层while循环的是二叉树每层的数量</li>\n<li>内层while目的是将每层的每项存入各层数组中</li>\n</ul>\n<p>代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> levelOrder = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!root || root.length === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> []</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = []</span><br><span class=\"line\">    <span class=\"keyword\">var</span> quene = [root]</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(quene.length)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> len = quene.length</span><br><span class=\"line\">        <span class=\"keyword\">var</span> layer = []</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(len)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> node = quene.shift()</span><br><span class=\"line\">            layer.push(node.val)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node.left)&#123;</span><br><span class=\"line\">                quene.push(node.left)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node.right)&#123;</span><br><span class=\"line\">                quene.push(node.right)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            len--</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        result.push(layer)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"leetcode-前k个高频元素","date":"2020-09-08T14:10:18.000Z","_content":"给定一个非空的整数数组，返回其中出现频率前 k 高的元素。\n<!--more-->\n> 原题描述访问：https://leetcode-cn.com/problems/top-k-frequent-elements/\n\n### map+数组\n利用 map 记录每个元素出现的频率，利用数组来比较排序元素\n**代码实现**\n```javascript\nlet topKFrequent = function(nums, k) {\n    let map = new Map(), arr = [...new Set(nums)]\n    nums.map((num) => {\n        if(map.has(num)) map.set(num, map.get(num)+1)\n        else map.set(num, 1)\n    })\n    \n    return arr.sort((a, b) => map.get(b) - map.get(a)).slice(0, k);\n};\n```\n**复杂度分析**\n- 时间复杂度：O(nlogn)\n- 空间复杂度：O(n)\n题目要求算法的时间复杂度必须优于 O(n log n) ，所以这种实现不合题目要求\n\n### map+小顶堆\n遍历一遍数组统计每个元素的频率，并将元素值（ key ）与出现的频率（ value ）保存到 map 中\n通过 map 数据构建一个前 k 个高频元素小顶堆，小顶堆上的任意节点值都必须小于等于其左右子节点值，即堆顶是最小值。\n具体步骤如下：\n    - 遍历数据，统计每个元素的频率，并将元素值（ key ）与出现的频率（ value ）保存到 map 中\n    - 遍历 map ，将前 k 个数，构造一个小顶堆\n    - 从 k 位开始，继续遍历 map ，每一个数据出现频率都和小顶堆的堆顶元素出现频率进行比较，如果小于堆顶元素，则不做任何处理，继续遍历下一元素；如果大于堆顶元素，则将这个元素替换掉堆顶元素，然后再堆化成一个小顶堆。\n    - 遍历完成后，堆中的数据就是前 k 大的数据\n**代码实现**\n```javascript\nlet topKFrequent = function(nums, k) {\n    let map = new Map(), heap = [,]\n    nums.map((num) => {\n        if(map.has(num)) map.set(num, map.get(num)+1)\n        else map.set(num, 1)\n    })\n    \n    // 如果元素数量小于等于 k\n    if(map.size <= k) {\n        return [...map.keys()]\n    }\n    \n    // 如果元素数量大于 k，遍历map，构建小顶堆\n    let i = 0\n    map.forEach((value, key) => {\n        if(i < k) {\n            // 取前k个建堆, 插入堆\n            heap.push(key)\n            // 原地建立前 k 堆\n            if(i === k-1) buildHeap(heap, map, k)\n        } else if(map.get(heap[1]) < value) {\n            // 替换并堆化\n            heap[1] = key\n            // 自上而下式堆化第一个元素\n            heapify(heap, map, k, 1)\n        }\n        i++\n    })\n    // 删除heap中第一个元素\n    heap.shift()\n    return heap\n};\n\n// 原地建堆，从后往前，自上而下式建小顶堆\nlet buildHeap = (heap, map, k) => {\n    if(k === 1) return\n    // 从最后一个非叶子节点开始，自上而下式堆化\n    for(let i = Math.floor(k/2); i>=1 ; i--) {\n        heapify(heap, map, k, i)\n    }\n}\n\n// 堆化\nlet heapify = (heap, map, k, i) => {\n    // 自上而下式堆化\n    while(true) {\n        let minIndex = i\n        if(2*i <= k && map.get(heap[2*i]) < map.get(heap[i])) {\n            minIndex = 2*i\n        }\n        if(2*i+1 <= k && map.get(heap[2*i+1]) < map.get(heap[minIndex])) {\n            minIndex = 2*i+1\n        }\n        if(minIndex !== i) {\n            swap(heap, i, minIndex)\n            i = minIndex\n        } else {\n            break\n        }\n    }\n}\n\n// 交换\nlet swap = (arr, i , j) => {\n    let temp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = temp\n}\n```\n**复杂度分析：**\n- 时间复杂度：遍历数组需要 O(n) 的时间复杂度，一次堆化需要 O(logk) 时间复杂度，所以利用堆求 Top k 问题的时间复杂度为 O(nlogk)\n- 空间复杂度：O(n)\n\n### 桶排序\n这里取前k个高频元素，使用计数排序不再适合，在上题目中使用计数排序，将 i 元素出现的次数存储在 bucket[i] ，但这种存储不能保证 bucket 数组上值是有序的，例如 bucket=[0,3,1,2] ，即元素 0 未出现，元素 1 出现 3 次，元素 2 出现 1 次，元素 3 出现 2 次，所以计数排序不适用于取前k个高频元素，不过，不用怕，计数排序不行，还有桶排序。\n\n桶排序是计数排序的升级版。它也是利用函数的映射关系。\n\n桶排序 (Bucket sort)的工作的原理：假设输入数据服从均匀分布，将数据分到有限数量的桶里，每个桶再分别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排）。\n- 首先使用 map 来存储频率\n- 然后创建一个数组（有数量的桶），将频率作为数组下标，对于出现频率不同的数字集合，存入对应的数组下标（桶内）即可。\n\n**代码实现**\n```javascript\nlet topKFrequent = function(nums, k) {\n    let map = new Map(), arr = [...new Set(nums)]\n    nums.map((num) => {\n        if(map.has(num)) map.set(num, map.get(num)+1)\n        else map.set(num, 1)\n    })\n    \n    // 如果元素数量小于等于 k\n    if(map.size <= k) {\n        return [...map.keys()]\n    }\n    \n    return bucketSort(map, k)\n};\n\n// 桶排序\nlet bucketSort = (map, k) => {\n    let arr = [], res = []\n    map.forEach((value, key) => {\n        // 利用映射关系（出现频率作为下标）将数据分配到各个桶中\n        if(!arr[value]) {\n            arr[value] = [key]\n        } else {\n            arr[value].push(key)\n        }\n    })\n    // 倒序遍历获取出现频率最大的前k个数\n    for(let i = arr.length - 1;i >= 0 && res.length < k;i--){\n        if(arr[i]) {\n            res.push(...arr[i])\n        }\n\t}\n\treturn res\n}\n```\n**复杂度分析：**\n- 时间复杂度：O(n)\n- 空间复杂度：O(n)","source":"_posts/leetcode-前k个高频元素.md","raw":"---\ntitle: leetcode-前k个高频元素\ndate: 2020-09-08 22:10:18\ncategories:\n    - 算法与数据结构\ntags:\n    - Map\n    - 小顶堆\n    - 桶排序\n    - leetcode\n---\n给定一个非空的整数数组，返回其中出现频率前 k 高的元素。\n<!--more-->\n> 原题描述访问：https://leetcode-cn.com/problems/top-k-frequent-elements/\n\n### map+数组\n利用 map 记录每个元素出现的频率，利用数组来比较排序元素\n**代码实现**\n```javascript\nlet topKFrequent = function(nums, k) {\n    let map = new Map(), arr = [...new Set(nums)]\n    nums.map((num) => {\n        if(map.has(num)) map.set(num, map.get(num)+1)\n        else map.set(num, 1)\n    })\n    \n    return arr.sort((a, b) => map.get(b) - map.get(a)).slice(0, k);\n};\n```\n**复杂度分析**\n- 时间复杂度：O(nlogn)\n- 空间复杂度：O(n)\n题目要求算法的时间复杂度必须优于 O(n log n) ，所以这种实现不合题目要求\n\n### map+小顶堆\n遍历一遍数组统计每个元素的频率，并将元素值（ key ）与出现的频率（ value ）保存到 map 中\n通过 map 数据构建一个前 k 个高频元素小顶堆，小顶堆上的任意节点值都必须小于等于其左右子节点值，即堆顶是最小值。\n具体步骤如下：\n    - 遍历数据，统计每个元素的频率，并将元素值（ key ）与出现的频率（ value ）保存到 map 中\n    - 遍历 map ，将前 k 个数，构造一个小顶堆\n    - 从 k 位开始，继续遍历 map ，每一个数据出现频率都和小顶堆的堆顶元素出现频率进行比较，如果小于堆顶元素，则不做任何处理，继续遍历下一元素；如果大于堆顶元素，则将这个元素替换掉堆顶元素，然后再堆化成一个小顶堆。\n    - 遍历完成后，堆中的数据就是前 k 大的数据\n**代码实现**\n```javascript\nlet topKFrequent = function(nums, k) {\n    let map = new Map(), heap = [,]\n    nums.map((num) => {\n        if(map.has(num)) map.set(num, map.get(num)+1)\n        else map.set(num, 1)\n    })\n    \n    // 如果元素数量小于等于 k\n    if(map.size <= k) {\n        return [...map.keys()]\n    }\n    \n    // 如果元素数量大于 k，遍历map，构建小顶堆\n    let i = 0\n    map.forEach((value, key) => {\n        if(i < k) {\n            // 取前k个建堆, 插入堆\n            heap.push(key)\n            // 原地建立前 k 堆\n            if(i === k-1) buildHeap(heap, map, k)\n        } else if(map.get(heap[1]) < value) {\n            // 替换并堆化\n            heap[1] = key\n            // 自上而下式堆化第一个元素\n            heapify(heap, map, k, 1)\n        }\n        i++\n    })\n    // 删除heap中第一个元素\n    heap.shift()\n    return heap\n};\n\n// 原地建堆，从后往前，自上而下式建小顶堆\nlet buildHeap = (heap, map, k) => {\n    if(k === 1) return\n    // 从最后一个非叶子节点开始，自上而下式堆化\n    for(let i = Math.floor(k/2); i>=1 ; i--) {\n        heapify(heap, map, k, i)\n    }\n}\n\n// 堆化\nlet heapify = (heap, map, k, i) => {\n    // 自上而下式堆化\n    while(true) {\n        let minIndex = i\n        if(2*i <= k && map.get(heap[2*i]) < map.get(heap[i])) {\n            minIndex = 2*i\n        }\n        if(2*i+1 <= k && map.get(heap[2*i+1]) < map.get(heap[minIndex])) {\n            minIndex = 2*i+1\n        }\n        if(minIndex !== i) {\n            swap(heap, i, minIndex)\n            i = minIndex\n        } else {\n            break\n        }\n    }\n}\n\n// 交换\nlet swap = (arr, i , j) => {\n    let temp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = temp\n}\n```\n**复杂度分析：**\n- 时间复杂度：遍历数组需要 O(n) 的时间复杂度，一次堆化需要 O(logk) 时间复杂度，所以利用堆求 Top k 问题的时间复杂度为 O(nlogk)\n- 空间复杂度：O(n)\n\n### 桶排序\n这里取前k个高频元素，使用计数排序不再适合，在上题目中使用计数排序，将 i 元素出现的次数存储在 bucket[i] ，但这种存储不能保证 bucket 数组上值是有序的，例如 bucket=[0,3,1,2] ，即元素 0 未出现，元素 1 出现 3 次，元素 2 出现 1 次，元素 3 出现 2 次，所以计数排序不适用于取前k个高频元素，不过，不用怕，计数排序不行，还有桶排序。\n\n桶排序是计数排序的升级版。它也是利用函数的映射关系。\n\n桶排序 (Bucket sort)的工作的原理：假设输入数据服从均匀分布，将数据分到有限数量的桶里，每个桶再分别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排）。\n- 首先使用 map 来存储频率\n- 然后创建一个数组（有数量的桶），将频率作为数组下标，对于出现频率不同的数字集合，存入对应的数组下标（桶内）即可。\n\n**代码实现**\n```javascript\nlet topKFrequent = function(nums, k) {\n    let map = new Map(), arr = [...new Set(nums)]\n    nums.map((num) => {\n        if(map.has(num)) map.set(num, map.get(num)+1)\n        else map.set(num, 1)\n    })\n    \n    // 如果元素数量小于等于 k\n    if(map.size <= k) {\n        return [...map.keys()]\n    }\n    \n    return bucketSort(map, k)\n};\n\n// 桶排序\nlet bucketSort = (map, k) => {\n    let arr = [], res = []\n    map.forEach((value, key) => {\n        // 利用映射关系（出现频率作为下标）将数据分配到各个桶中\n        if(!arr[value]) {\n            arr[value] = [key]\n        } else {\n            arr[value].push(key)\n        }\n    })\n    // 倒序遍历获取出现频率最大的前k个数\n    for(let i = arr.length - 1;i >= 0 && res.length < k;i--){\n        if(arr[i]) {\n            res.push(...arr[i])\n        }\n\t}\n\treturn res\n}\n```\n**复杂度分析：**\n- 时间复杂度：O(n)\n- 空间复杂度：O(n)","slug":"leetcode-前k个高频元素","published":1,"updated":"2020-09-08T16:42:12.515Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmdwh6nwt00088ubp0bb2gdos","content":"<p>给定一个非空的整数数组，返回其中出现频率前 k 高的元素。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>原题描述访问：<a href=\"https://leetcode-cn.com/problems/top-k-frequent-elements/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/top-k-frequent-elements/</a></p>\n</blockquote>\n<h3 id=\"map-数组\"><a href=\"#map-数组\" class=\"headerlink\" title=\"map+数组\"></a>map+数组</h3><p>利用 map 记录每个元素出现的频率，利用数组来比较排序元素<br><strong>代码实现</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> topKFrequent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, k</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(), arr = [...new <span class=\"built_in\">Set</span>(nums)]</span><br><span class=\"line\">    nums.map(<span class=\"function\">(<span class=\"params\">num</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(map.has(num)) map.set(num, map.get(num)+<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span> map.set(num, <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> map.get(b) - map.get(a)).slice(<span class=\"number\">0</span>, k);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>复杂度分析</strong></p>\n<ul>\n<li>时间复杂度：O(nlogn)</li>\n<li>空间复杂度：O(n)<br>题目要求算法的时间复杂度必须优于 O(n log n) ，所以这种实现不合题目要求</li>\n</ul>\n<h3 id=\"map-小顶堆\"><a href=\"#map-小顶堆\" class=\"headerlink\" title=\"map+小顶堆\"></a>map+小顶堆</h3><p>遍历一遍数组统计每个元素的频率，并将元素值（ key ）与出现的频率（ value ）保存到 map 中<br>通过 map 数据构建一个前 k 个高频元素小顶堆，小顶堆上的任意节点值都必须小于等于其左右子节点值，即堆顶是最小值。<br>具体步骤如下：<br>    - 遍历数据，统计每个元素的频率，并将元素值（ key ）与出现的频率（ value ）保存到 map 中<br>    - 遍历 map ，将前 k 个数，构造一个小顶堆<br>    - 从 k 位开始，继续遍历 map ，每一个数据出现频率都和小顶堆的堆顶元素出现频率进行比较，如果小于堆顶元素，则不做任何处理，继续遍历下一元素；如果大于堆顶元素，则将这个元素替换掉堆顶元素，然后再堆化成一个小顶堆。<br>    - 遍历完成后，堆中的数据就是前 k 大的数据<br><strong>代码实现</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> topKFrequent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, k</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(), heap = [,]</span><br><span class=\"line\">    nums.map(<span class=\"function\">(<span class=\"params\">num</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(map.has(num)) map.set(num, map.get(num)+<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span> map.set(num, <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 如果元素数量小于等于 k</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(map.size &lt;= k) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [...map.keys()]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 如果元素数量大于 k，遍历map，构建小顶堆</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span></span><br><span class=\"line\">    map.forEach(<span class=\"function\">(<span class=\"params\">value, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &lt; k) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 取前k个建堆, 插入堆</span></span><br><span class=\"line\">            heap.push(key)</span><br><span class=\"line\">            <span class=\"comment\">// 原地建立前 k 堆</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i === k<span class=\"number\">-1</span>) buildHeap(heap, map, k)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(map.get(heap[<span class=\"number\">1</span>]) &lt; value) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 替换并堆化</span></span><br><span class=\"line\">            heap[<span class=\"number\">1</span>] = key</span><br><span class=\"line\">            <span class=\"comment\">// 自上而下式堆化第一个元素</span></span><br><span class=\"line\">            heapify(heap, map, k, <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 删除heap中第一个元素</span></span><br><span class=\"line\">    heap.shift()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> heap</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 原地建堆，从后往前，自上而下式建小顶堆</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> buildHeap = <span class=\"function\">(<span class=\"params\">heap, map, k</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k === <span class=\"number\">1</span>) <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"comment\">// 从最后一个非叶子节点开始，自上而下式堆化</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"built_in\">Math</span>.floor(k/<span class=\"number\">2</span>); i&gt;=<span class=\"number\">1</span> ; i--) &#123;</span><br><span class=\"line\">        heapify(heap, map, k, i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 堆化</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> heapify = <span class=\"function\">(<span class=\"params\">heap, map, k, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 自上而下式堆化</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> minIndex = i</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"number\">2</span>*i &lt;= k &amp;&amp; map.get(heap[<span class=\"number\">2</span>*i]) &lt; map.get(heap[i])) &#123;</span><br><span class=\"line\">            minIndex = <span class=\"number\">2</span>*i</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"number\">2</span>*i+<span class=\"number\">1</span> &lt;= k &amp;&amp; map.get(heap[<span class=\"number\">2</span>*i+<span class=\"number\">1</span>]) &lt; map.get(heap[minIndex])) &#123;</span><br><span class=\"line\">            minIndex = <span class=\"number\">2</span>*i+<span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(minIndex !== i) &#123;</span><br><span class=\"line\">            swap(heap, i, minIndex)</span><br><span class=\"line\">            i = minIndex</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 交换</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> swap = <span class=\"function\">(<span class=\"params\">arr, i , j</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> temp = arr[i]</span><br><span class=\"line\">    arr[i] = arr[j]</span><br><span class=\"line\">    arr[j] = temp</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>复杂度分析：</strong></p>\n<ul>\n<li>时间复杂度：遍历数组需要 O(n) 的时间复杂度，一次堆化需要 O(logk) 时间复杂度，所以利用堆求 Top k 问题的时间复杂度为 O(nlogk)</li>\n<li>空间复杂度：O(n)</li>\n</ul>\n<h3 id=\"桶排序\"><a href=\"#桶排序\" class=\"headerlink\" title=\"桶排序\"></a>桶排序</h3><p>这里取前k个高频元素，使用计数排序不再适合，在上题目中使用计数排序，将 i 元素出现的次数存储在 bucket[i] ，但这种存储不能保证 bucket 数组上值是有序的，例如 bucket=[0,3,1,2] ，即元素 0 未出现，元素 1 出现 3 次，元素 2 出现 1 次，元素 3 出现 2 次，所以计数排序不适用于取前k个高频元素，不过，不用怕，计数排序不行，还有桶排序。</p>\n<p>桶排序是计数排序的升级版。它也是利用函数的映射关系。</p>\n<p>桶排序 (Bucket sort)的工作的原理：假设输入数据服从均匀分布，将数据分到有限数量的桶里，每个桶再分别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排）。</p>\n<ul>\n<li>首先使用 map 来存储频率</li>\n<li>然后创建一个数组（有数量的桶），将频率作为数组下标，对于出现频率不同的数字集合，存入对应的数组下标（桶内）即可。</li>\n</ul>\n<p><strong>代码实现</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> topKFrequent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, k</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(), arr = [...new <span class=\"built_in\">Set</span>(nums)]</span><br><span class=\"line\">    nums.map(<span class=\"function\">(<span class=\"params\">num</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(map.has(num)) map.set(num, map.get(num)+<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span> map.set(num, <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 如果元素数量小于等于 k</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(map.size &lt;= k) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [...map.keys()]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> bucketSort(map, k)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 桶排序</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> bucketSort = <span class=\"function\">(<span class=\"params\">map, k</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = [], res = []</span><br><span class=\"line\">    map.forEach(<span class=\"function\">(<span class=\"params\">value, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 利用映射关系（出现频率作为下标）将数据分配到各个桶中</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!arr[value]) &#123;</span><br><span class=\"line\">            arr[value] = [key]</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            arr[value].push(key)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 倒序遍历获取出现频率最大的前k个数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = arr.length - <span class=\"number\">1</span>;i &gt;= <span class=\"number\">0</span> &amp;&amp; res.length &lt; k;i--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[i]) &#123;</span><br><span class=\"line\">            res.push(...arr[i])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>复杂度分析：</strong></p>\n<ul>\n<li>时间复杂度：O(n)</li>\n<li>空间复杂度：O(n)</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>给定一个非空的整数数组，返回其中出现频率前 k 高的元素。</p>","more":"<blockquote>\n<p>原题描述访问：<a href=\"https://leetcode-cn.com/problems/top-k-frequent-elements/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/top-k-frequent-elements/</a></p>\n</blockquote>\n<h3 id=\"map-数组\"><a href=\"#map-数组\" class=\"headerlink\" title=\"map+数组\"></a>map+数组</h3><p>利用 map 记录每个元素出现的频率，利用数组来比较排序元素<br><strong>代码实现</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> topKFrequent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, k</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(), arr = [...new <span class=\"built_in\">Set</span>(nums)]</span><br><span class=\"line\">    nums.map(<span class=\"function\">(<span class=\"params\">num</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(map.has(num)) map.set(num, map.get(num)+<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span> map.set(num, <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> map.get(b) - map.get(a)).slice(<span class=\"number\">0</span>, k);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>复杂度分析</strong></p>\n<ul>\n<li>时间复杂度：O(nlogn)</li>\n<li>空间复杂度：O(n)<br>题目要求算法的时间复杂度必须优于 O(n log n) ，所以这种实现不合题目要求</li>\n</ul>\n<h3 id=\"map-小顶堆\"><a href=\"#map-小顶堆\" class=\"headerlink\" title=\"map+小顶堆\"></a>map+小顶堆</h3><p>遍历一遍数组统计每个元素的频率，并将元素值（ key ）与出现的频率（ value ）保存到 map 中<br>通过 map 数据构建一个前 k 个高频元素小顶堆，小顶堆上的任意节点值都必须小于等于其左右子节点值，即堆顶是最小值。<br>具体步骤如下：<br>    - 遍历数据，统计每个元素的频率，并将元素值（ key ）与出现的频率（ value ）保存到 map 中<br>    - 遍历 map ，将前 k 个数，构造一个小顶堆<br>    - 从 k 位开始，继续遍历 map ，每一个数据出现频率都和小顶堆的堆顶元素出现频率进行比较，如果小于堆顶元素，则不做任何处理，继续遍历下一元素；如果大于堆顶元素，则将这个元素替换掉堆顶元素，然后再堆化成一个小顶堆。<br>    - 遍历完成后，堆中的数据就是前 k 大的数据<br><strong>代码实现</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> topKFrequent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, k</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(), heap = [,]</span><br><span class=\"line\">    nums.map(<span class=\"function\">(<span class=\"params\">num</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(map.has(num)) map.set(num, map.get(num)+<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span> map.set(num, <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 如果元素数量小于等于 k</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(map.size &lt;= k) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [...map.keys()]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 如果元素数量大于 k，遍历map，构建小顶堆</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span></span><br><span class=\"line\">    map.forEach(<span class=\"function\">(<span class=\"params\">value, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &lt; k) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 取前k个建堆, 插入堆</span></span><br><span class=\"line\">            heap.push(key)</span><br><span class=\"line\">            <span class=\"comment\">// 原地建立前 k 堆</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i === k<span class=\"number\">-1</span>) buildHeap(heap, map, k)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(map.get(heap[<span class=\"number\">1</span>]) &lt; value) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 替换并堆化</span></span><br><span class=\"line\">            heap[<span class=\"number\">1</span>] = key</span><br><span class=\"line\">            <span class=\"comment\">// 自上而下式堆化第一个元素</span></span><br><span class=\"line\">            heapify(heap, map, k, <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 删除heap中第一个元素</span></span><br><span class=\"line\">    heap.shift()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> heap</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 原地建堆，从后往前，自上而下式建小顶堆</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> buildHeap = <span class=\"function\">(<span class=\"params\">heap, map, k</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k === <span class=\"number\">1</span>) <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"comment\">// 从最后一个非叶子节点开始，自上而下式堆化</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"built_in\">Math</span>.floor(k/<span class=\"number\">2</span>); i&gt;=<span class=\"number\">1</span> ; i--) &#123;</span><br><span class=\"line\">        heapify(heap, map, k, i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 堆化</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> heapify = <span class=\"function\">(<span class=\"params\">heap, map, k, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 自上而下式堆化</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> minIndex = i</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"number\">2</span>*i &lt;= k &amp;&amp; map.get(heap[<span class=\"number\">2</span>*i]) &lt; map.get(heap[i])) &#123;</span><br><span class=\"line\">            minIndex = <span class=\"number\">2</span>*i</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"number\">2</span>*i+<span class=\"number\">1</span> &lt;= k &amp;&amp; map.get(heap[<span class=\"number\">2</span>*i+<span class=\"number\">1</span>]) &lt; map.get(heap[minIndex])) &#123;</span><br><span class=\"line\">            minIndex = <span class=\"number\">2</span>*i+<span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(minIndex !== i) &#123;</span><br><span class=\"line\">            swap(heap, i, minIndex)</span><br><span class=\"line\">            i = minIndex</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 交换</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> swap = <span class=\"function\">(<span class=\"params\">arr, i , j</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> temp = arr[i]</span><br><span class=\"line\">    arr[i] = arr[j]</span><br><span class=\"line\">    arr[j] = temp</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>复杂度分析：</strong></p>\n<ul>\n<li>时间复杂度：遍历数组需要 O(n) 的时间复杂度，一次堆化需要 O(logk) 时间复杂度，所以利用堆求 Top k 问题的时间复杂度为 O(nlogk)</li>\n<li>空间复杂度：O(n)</li>\n</ul>\n<h3 id=\"桶排序\"><a href=\"#桶排序\" class=\"headerlink\" title=\"桶排序\"></a>桶排序</h3><p>这里取前k个高频元素，使用计数排序不再适合，在上题目中使用计数排序，将 i 元素出现的次数存储在 bucket[i] ，但这种存储不能保证 bucket 数组上值是有序的，例如 bucket=[0,3,1,2] ，即元素 0 未出现，元素 1 出现 3 次，元素 2 出现 1 次，元素 3 出现 2 次，所以计数排序不适用于取前k个高频元素，不过，不用怕，计数排序不行，还有桶排序。</p>\n<p>桶排序是计数排序的升级版。它也是利用函数的映射关系。</p>\n<p>桶排序 (Bucket sort)的工作的原理：假设输入数据服从均匀分布，将数据分到有限数量的桶里，每个桶再分别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排）。</p>\n<ul>\n<li>首先使用 map 来存储频率</li>\n<li>然后创建一个数组（有数量的桶），将频率作为数组下标，对于出现频率不同的数字集合，存入对应的数组下标（桶内）即可。</li>\n</ul>\n<p><strong>代码实现</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> topKFrequent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, k</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(), arr = [...new <span class=\"built_in\">Set</span>(nums)]</span><br><span class=\"line\">    nums.map(<span class=\"function\">(<span class=\"params\">num</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(map.has(num)) map.set(num, map.get(num)+<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span> map.set(num, <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 如果元素数量小于等于 k</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(map.size &lt;= k) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [...map.keys()]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> bucketSort(map, k)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 桶排序</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> bucketSort = <span class=\"function\">(<span class=\"params\">map, k</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = [], res = []</span><br><span class=\"line\">    map.forEach(<span class=\"function\">(<span class=\"params\">value, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 利用映射关系（出现频率作为下标）将数据分配到各个桶中</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!arr[value]) &#123;</span><br><span class=\"line\">            arr[value] = [key]</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            arr[value].push(key)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 倒序遍历获取出现频率最大的前k个数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = arr.length - <span class=\"number\">1</span>;i &gt;= <span class=\"number\">0</span> &amp;&amp; res.length &lt; k;i--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[i]) &#123;</span><br><span class=\"line\">            res.push(...arr[i])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>复杂度分析：</strong></p>\n<ul>\n<li>时间复杂度：O(n)</li>\n<li>空间复杂度：O(n)</li>\n</ul>"},{"title":"leetcode-单词搜索","date":"2020-09-16T12:30:03.000Z","_content":"给定一个二维网格和一个单词，找出该单词是否存在于网格中。\n\n单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。\n<!--more-->\n> 原题描述访问：https://leetcode-cn.com/problems/word-search/\n> 题解转自：https://leetcode-cn.com/problems/word-search/solution/shou-hua-tu-jie-79-dan-ci-sou-suo-dfs-si-lu-de-cha/\n\n**题意**\n给你一个由字母组成的二维矩阵，和一个单词，能否在矩阵中“勾勒”出一条路径，路径上的字母组成了这个单词。\n\n**思路**\n比如单词 \"SEE\"，首先起点要对，遍历一遍矩阵，看看哪里有起点 S。\n起点可能不止一个，基于其中一个 S，能否找出剩下的 \"EE\" 路径。其实已经有了深搜的思路了。\n下一个字符 E，有四个可选点：当前 S 点的上、下、左、右。\n逐个尝试每一种选择，去探索。基于其中一种选择，又要为下一个字符选点，又有四种选择，继续尝试，探索。回溯的思路就有了。\n每到一个点，做的事情是一样的，是递归DFS。路径类问题经常是 DFS——往下选点，构建路径。\n当发现某个选择不对，不要继续选下去了，结束当前递归，考察别的选择。\n\n**递归总是关注当前**\n我们在写递归函数时，关注当前，当前考察的点，哪些是当前递归该处理的，哪些是丢给递归子调用去做的。\n当前递归本身做的事：判断当前选择的点，本身有没有问题，是不是错的。\n至于剩下的字符，能否找到路径，这件事，交给递归子调用去深搜。\n如果当前点是错的，也不用往下递归了，直接返回false。否则继续递归搜四个方向，为剩下的字符选点。\n\n**哪些情况说明这是一个错的选择呢？（递归的结束条件）**\n1. 当前的点，超出矩阵，不存在。\n2. 当前的点，之前来过了，不符合「同一个单元格内的字母不允许被重复使用」\n3. 当前的点，不是目标点，比如你想找 E，却来了 D。\n\n**当前的点，不是目标点，比如你想找 E，却来了 D。**\n用一个二维矩阵 used，记录已经访问过的点，下次再选择访问这个点，就直接返回 false。\n\n**代码**\n```javascript\nconst exist = (board, word) => {\n  const m = board.length;\n  const n = board[0].length;\n  const used = new Array(m);    // 二维矩阵used\n  for (let i = 0; i < m; i++) {\n    used[i] = new Array(n);\n  }\n  // 判断当前点是否是目标路径上的点\n  const dfs = (row, col, i) => { // row col是当前点的坐标，i是当前考察的字符索引\n    if (i > word.length - 1) {       // 递归的出口\n      return true;\n    }\n    if (row < 0 || row >= m || col < 0 || col >= n) { // 当前点要存在\n      return false;\n    }\n    if (used[row][col] || board[row][col] != word[i]) { // 当前的点已经走过，或当前点就不是目标点\n      return false;\n    }\n    // 排除掉这些false情况，当前点是没问题的，可以继续递归考察\n    used[row][col] = true;  // used记录一下当前点被访问了\n    const canFindRest =\n      dfs(row + 1, col, i + 1) ||\n      dfs(row - 1, col, i + 1) ||\n      dfs(row, col + 1, i + 1) ||\n      dfs(row, col - 1, i + 1); \n\n    if (canFindRest) { // 基于当前点，可以为剩下的字符找到路径\n      return true;    \n    }\n    used[row][col] = false; // 找不出，返回false，继续考察别的分支，并撤销当前点的访问状态。\n    return false;\n  };\n\n  for (let i = 0; i < m; i++) {\n    for (let j = 0; j < n; j++) {\n      if (board[i][j] == word[0] && dfs(i, j, 0)) { // 找到dfs的起点\n        return true; // 找到起点，且dfs的结果也true，则找到了目标路径\n      }\n    }\n  }\n  return false; // 怎么样都没有返回true，则返回false\n};\n```","source":"_posts/leetcode-单词搜索.md","raw":"---\ntitle: leetcode-单词搜索\ndate: 2020-09-16 20:30:03\ncategories:\n    - 算法与数据结构\ntags:\n    - 回溯\n    - dfs\n    - 递归\n    - leetcode\n---\n给定一个二维网格和一个单词，找出该单词是否存在于网格中。\n\n单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。\n<!--more-->\n> 原题描述访问：https://leetcode-cn.com/problems/word-search/\n> 题解转自：https://leetcode-cn.com/problems/word-search/solution/shou-hua-tu-jie-79-dan-ci-sou-suo-dfs-si-lu-de-cha/\n\n**题意**\n给你一个由字母组成的二维矩阵，和一个单词，能否在矩阵中“勾勒”出一条路径，路径上的字母组成了这个单词。\n\n**思路**\n比如单词 \"SEE\"，首先起点要对，遍历一遍矩阵，看看哪里有起点 S。\n起点可能不止一个，基于其中一个 S，能否找出剩下的 \"EE\" 路径。其实已经有了深搜的思路了。\n下一个字符 E，有四个可选点：当前 S 点的上、下、左、右。\n逐个尝试每一种选择，去探索。基于其中一种选择，又要为下一个字符选点，又有四种选择，继续尝试，探索。回溯的思路就有了。\n每到一个点，做的事情是一样的，是递归DFS。路径类问题经常是 DFS——往下选点，构建路径。\n当发现某个选择不对，不要继续选下去了，结束当前递归，考察别的选择。\n\n**递归总是关注当前**\n我们在写递归函数时，关注当前，当前考察的点，哪些是当前递归该处理的，哪些是丢给递归子调用去做的。\n当前递归本身做的事：判断当前选择的点，本身有没有问题，是不是错的。\n至于剩下的字符，能否找到路径，这件事，交给递归子调用去深搜。\n如果当前点是错的，也不用往下递归了，直接返回false。否则继续递归搜四个方向，为剩下的字符选点。\n\n**哪些情况说明这是一个错的选择呢？（递归的结束条件）**\n1. 当前的点，超出矩阵，不存在。\n2. 当前的点，之前来过了，不符合「同一个单元格内的字母不允许被重复使用」\n3. 当前的点，不是目标点，比如你想找 E，却来了 D。\n\n**当前的点，不是目标点，比如你想找 E，却来了 D。**\n用一个二维矩阵 used，记录已经访问过的点，下次再选择访问这个点，就直接返回 false。\n\n**代码**\n```javascript\nconst exist = (board, word) => {\n  const m = board.length;\n  const n = board[0].length;\n  const used = new Array(m);    // 二维矩阵used\n  for (let i = 0; i < m; i++) {\n    used[i] = new Array(n);\n  }\n  // 判断当前点是否是目标路径上的点\n  const dfs = (row, col, i) => { // row col是当前点的坐标，i是当前考察的字符索引\n    if (i > word.length - 1) {       // 递归的出口\n      return true;\n    }\n    if (row < 0 || row >= m || col < 0 || col >= n) { // 当前点要存在\n      return false;\n    }\n    if (used[row][col] || board[row][col] != word[i]) { // 当前的点已经走过，或当前点就不是目标点\n      return false;\n    }\n    // 排除掉这些false情况，当前点是没问题的，可以继续递归考察\n    used[row][col] = true;  // used记录一下当前点被访问了\n    const canFindRest =\n      dfs(row + 1, col, i + 1) ||\n      dfs(row - 1, col, i + 1) ||\n      dfs(row, col + 1, i + 1) ||\n      dfs(row, col - 1, i + 1); \n\n    if (canFindRest) { // 基于当前点，可以为剩下的字符找到路径\n      return true;    \n    }\n    used[row][col] = false; // 找不出，返回false，继续考察别的分支，并撤销当前点的访问状态。\n    return false;\n  };\n\n  for (let i = 0; i < m; i++) {\n    for (let j = 0; j < n; j++) {\n      if (board[i][j] == word[0] && dfs(i, j, 0)) { // 找到dfs的起点\n        return true; // 找到起点，且dfs的结果也true，则找到了目标路径\n      }\n    }\n  }\n  return false; // 怎么样都没有返回true，则返回false\n};\n```","slug":"leetcode-单词搜索","published":1,"updated":"2020-09-16T12:38:58.486Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmdwh6nwu00098ubp0v24fl37","content":"<p>给定一个二维网格和一个单词，找出该单词是否存在于网格中。</p>\n<p>单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>原题描述访问：<a href=\"https://leetcode-cn.com/problems/word-search/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/word-search/</a><br>题解转自：<a href=\"https://leetcode-cn.com/problems/word-search/solution/shou-hua-tu-jie-79-dan-ci-sou-suo-dfs-si-lu-de-cha/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/word-search/solution/shou-hua-tu-jie-79-dan-ci-sou-suo-dfs-si-lu-de-cha/</a></p>\n</blockquote>\n<p><strong>题意</strong><br>给你一个由字母组成的二维矩阵，和一个单词，能否在矩阵中“勾勒”出一条路径，路径上的字母组成了这个单词。</p>\n<p><strong>思路</strong><br>比如单词 “SEE”，首先起点要对，遍历一遍矩阵，看看哪里有起点 S。<br>起点可能不止一个，基于其中一个 S，能否找出剩下的 “EE” 路径。其实已经有了深搜的思路了。<br>下一个字符 E，有四个可选点：当前 S 点的上、下、左、右。<br>逐个尝试每一种选择，去探索。基于其中一种选择，又要为下一个字符选点，又有四种选择，继续尝试，探索。回溯的思路就有了。<br>每到一个点，做的事情是一样的，是递归DFS。路径类问题经常是 DFS——往下选点，构建路径。<br>当发现某个选择不对，不要继续选下去了，结束当前递归，考察别的选择。</p>\n<p><strong>递归总是关注当前</strong><br>我们在写递归函数时，关注当前，当前考察的点，哪些是当前递归该处理的，哪些是丢给递归子调用去做的。<br>当前递归本身做的事：判断当前选择的点，本身有没有问题，是不是错的。<br>至于剩下的字符，能否找到路径，这件事，交给递归子调用去深搜。<br>如果当前点是错的，也不用往下递归了，直接返回false。否则继续递归搜四个方向，为剩下的字符选点。</p>\n<p><strong>哪些情况说明这是一个错的选择呢？（递归的结束条件）</strong></p>\n<ol>\n<li>当前的点，超出矩阵，不存在。</li>\n<li>当前的点，之前来过了，不符合「同一个单元格内的字母不允许被重复使用」</li>\n<li>当前的点，不是目标点，比如你想找 E，却来了 D。</li>\n</ol>\n<p><strong>当前的点，不是目标点，比如你想找 E，却来了 D。</strong><br>用一个二维矩阵 used，记录已经访问过的点，下次再选择访问这个点，就直接返回 false。</p>\n<p><strong>代码</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> exist = <span class=\"function\">(<span class=\"params\">board, word</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> m = board.length;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> n = board[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> used = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(m);    <span class=\"comment\">// 二维矩阵used</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">    used[i] = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(n);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 判断当前点是否是目标路径上的点</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> dfs = <span class=\"function\">(<span class=\"params\">row, col, i</span>) =&gt;</span> &#123; <span class=\"comment\">// row col是当前点的坐标，i是当前考察的字符索引</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &gt; word.length - <span class=\"number\">1</span>) &#123;       <span class=\"comment\">// 递归的出口</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (row &lt; <span class=\"number\">0</span> || row &gt;= m || col &lt; <span class=\"number\">0</span> || col &gt;= n) &#123; <span class=\"comment\">// 当前点要存在</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (used[row][col] || board[row][col] != word[i]) &#123; <span class=\"comment\">// 当前的点已经走过，或当前点就不是目标点</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 排除掉这些false情况，当前点是没问题的，可以继续递归考察</span></span><br><span class=\"line\">    used[row][col] = <span class=\"literal\">true</span>;  <span class=\"comment\">// used记录一下当前点被访问了</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> canFindRest =</span><br><span class=\"line\">      dfs(row + <span class=\"number\">1</span>, col, i + <span class=\"number\">1</span>) ||</span><br><span class=\"line\">      dfs(row - <span class=\"number\">1</span>, col, i + <span class=\"number\">1</span>) ||</span><br><span class=\"line\">      dfs(row, col + <span class=\"number\">1</span>, i + <span class=\"number\">1</span>) ||</span><br><span class=\"line\">      dfs(row, col - <span class=\"number\">1</span>, i + <span class=\"number\">1</span>); </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (canFindRest) &#123; <span class=\"comment\">// 基于当前点，可以为剩下的字符找到路径</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    used[row][col] = <span class=\"literal\">false</span>; <span class=\"comment\">// 找不出，返回false，继续考察别的分支，并撤销当前点的访问状态。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (board[i][j] == word[<span class=\"number\">0</span>] &amp;&amp; dfs(i, j, <span class=\"number\">0</span>)) &#123; <span class=\"comment\">// 找到dfs的起点</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">// 找到起点，且dfs的结果也true，则找到了目标路径</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">// 怎么样都没有返回true，则返回false</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>给定一个二维网格和一个单词，找出该单词是否存在于网格中。</p>\n<p>单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。</p>","more":"<blockquote>\n<p>原题描述访问：<a href=\"https://leetcode-cn.com/problems/word-search/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/word-search/</a><br>题解转自：<a href=\"https://leetcode-cn.com/problems/word-search/solution/shou-hua-tu-jie-79-dan-ci-sou-suo-dfs-si-lu-de-cha/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/word-search/solution/shou-hua-tu-jie-79-dan-ci-sou-suo-dfs-si-lu-de-cha/</a></p>\n</blockquote>\n<p><strong>题意</strong><br>给你一个由字母组成的二维矩阵，和一个单词，能否在矩阵中“勾勒”出一条路径，路径上的字母组成了这个单词。</p>\n<p><strong>思路</strong><br>比如单词 “SEE”，首先起点要对，遍历一遍矩阵，看看哪里有起点 S。<br>起点可能不止一个，基于其中一个 S，能否找出剩下的 “EE” 路径。其实已经有了深搜的思路了。<br>下一个字符 E，有四个可选点：当前 S 点的上、下、左、右。<br>逐个尝试每一种选择，去探索。基于其中一种选择，又要为下一个字符选点，又有四种选择，继续尝试，探索。回溯的思路就有了。<br>每到一个点，做的事情是一样的，是递归DFS。路径类问题经常是 DFS——往下选点，构建路径。<br>当发现某个选择不对，不要继续选下去了，结束当前递归，考察别的选择。</p>\n<p><strong>递归总是关注当前</strong><br>我们在写递归函数时，关注当前，当前考察的点，哪些是当前递归该处理的，哪些是丢给递归子调用去做的。<br>当前递归本身做的事：判断当前选择的点，本身有没有问题，是不是错的。<br>至于剩下的字符，能否找到路径，这件事，交给递归子调用去深搜。<br>如果当前点是错的，也不用往下递归了，直接返回false。否则继续递归搜四个方向，为剩下的字符选点。</p>\n<p><strong>哪些情况说明这是一个错的选择呢？（递归的结束条件）</strong></p>\n<ol>\n<li>当前的点，超出矩阵，不存在。</li>\n<li>当前的点，之前来过了，不符合「同一个单元格内的字母不允许被重复使用」</li>\n<li>当前的点，不是目标点，比如你想找 E，却来了 D。</li>\n</ol>\n<p><strong>当前的点，不是目标点，比如你想找 E，却来了 D。</strong><br>用一个二维矩阵 used，记录已经访问过的点，下次再选择访问这个点，就直接返回 false。</p>\n<p><strong>代码</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> exist = <span class=\"function\">(<span class=\"params\">board, word</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> m = board.length;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> n = board[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> used = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(m);    <span class=\"comment\">// 二维矩阵used</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">    used[i] = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(n);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 判断当前点是否是目标路径上的点</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> dfs = <span class=\"function\">(<span class=\"params\">row, col, i</span>) =&gt;</span> &#123; <span class=\"comment\">// row col是当前点的坐标，i是当前考察的字符索引</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &gt; word.length - <span class=\"number\">1</span>) &#123;       <span class=\"comment\">// 递归的出口</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (row &lt; <span class=\"number\">0</span> || row &gt;= m || col &lt; <span class=\"number\">0</span> || col &gt;= n) &#123; <span class=\"comment\">// 当前点要存在</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (used[row][col] || board[row][col] != word[i]) &#123; <span class=\"comment\">// 当前的点已经走过，或当前点就不是目标点</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 排除掉这些false情况，当前点是没问题的，可以继续递归考察</span></span><br><span class=\"line\">    used[row][col] = <span class=\"literal\">true</span>;  <span class=\"comment\">// used记录一下当前点被访问了</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> canFindRest =</span><br><span class=\"line\">      dfs(row + <span class=\"number\">1</span>, col, i + <span class=\"number\">1</span>) ||</span><br><span class=\"line\">      dfs(row - <span class=\"number\">1</span>, col, i + <span class=\"number\">1</span>) ||</span><br><span class=\"line\">      dfs(row, col + <span class=\"number\">1</span>, i + <span class=\"number\">1</span>) ||</span><br><span class=\"line\">      dfs(row, col - <span class=\"number\">1</span>, i + <span class=\"number\">1</span>); </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (canFindRest) &#123; <span class=\"comment\">// 基于当前点，可以为剩下的字符找到路径</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    used[row][col] = <span class=\"literal\">false</span>; <span class=\"comment\">// 找不出，返回false，继续考察别的分支，并撤销当前点的访问状态。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (board[i][j] == word[<span class=\"number\">0</span>] &amp;&amp; dfs(i, j, <span class=\"number\">0</span>)) &#123; <span class=\"comment\">// 找到dfs的起点</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">// 找到起点，且dfs的结果也true，则找到了目标路径</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">// 怎么样都没有返回true，则返回false</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"leetcode-组合","date":"2020-09-08T16:43:11.000Z","_content":"给定两个整数 n 和 k，返回 1 ... n 中所有可能的 k 个数的组合。\n<!--more-->\n> 原题描述访问：https://leetcode-cn.com/problems/combinations/\n\n### 回溯剪枝\n直接看代码\n```javascript\nconst combine = (n, k) => {\n  const res = [];\n\n  const dfs = (start, path) => { // start是枚举选择的起点 path是当前构建的路径（组合）\n    if (path.length == k) {\n      res.push(path.slice());       // 拷贝一份path，推入res\n      return;                       // 结束当前递归\n    }\n    for (let i = start; i <= n; i++) { // 枚举出所有选择\n      path.push(i);                    // 选择\n      dfs(i + 1, path);             // 向下继续选择\n      path.pop();                      // 撤销选择\n    }\n  };\n\n  dfs(1, []); // 递归的入口，从数字1开始选\n  return res;\n}\n```\n","source":"_posts/leetcode-组合.md","raw":"---\ntitle: leetcode-组合\ndate: 2020-09-09 00:43:11\ncategories:\n    - 算法与数据结构\ntags:\n    - dfs\n    - 回溯\n    - 递归\n    - leetcode\n---\n给定两个整数 n 和 k，返回 1 ... n 中所有可能的 k 个数的组合。\n<!--more-->\n> 原题描述访问：https://leetcode-cn.com/problems/combinations/\n\n### 回溯剪枝\n直接看代码\n```javascript\nconst combine = (n, k) => {\n  const res = [];\n\n  const dfs = (start, path) => { // start是枚举选择的起点 path是当前构建的路径（组合）\n    if (path.length == k) {\n      res.push(path.slice());       // 拷贝一份path，推入res\n      return;                       // 结束当前递归\n    }\n    for (let i = start; i <= n; i++) { // 枚举出所有选择\n      path.push(i);                    // 选择\n      dfs(i + 1, path);             // 向下继续选择\n      path.pop();                      // 撤销选择\n    }\n  };\n\n  dfs(1, []); // 递归的入口，从数字1开始选\n  return res;\n}\n```\n","slug":"leetcode-组合","published":1,"updated":"2020-09-08T16:59:48.756Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmdwh6nww000c8ubp39lgbume","content":"<p>给定两个整数 n 和 k，返回 1 … n 中所有可能的 k 个数的组合。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>原题描述访问：<a href=\"https://leetcode-cn.com/problems/combinations/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/combinations/</a></p>\n</blockquote>\n<h3 id=\"回溯剪枝\"><a href=\"#回溯剪枝\" class=\"headerlink\" title=\"回溯剪枝\"></a>回溯剪枝</h3><p>直接看代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> combine = <span class=\"function\">(<span class=\"params\">n, k</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> dfs = <span class=\"function\">(<span class=\"params\">start, path</span>) =&gt;</span> &#123; <span class=\"comment\">// start是枚举选择的起点 path是当前构建的路径（组合）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (path.length == k) &#123;</span><br><span class=\"line\">      res.push(path.slice());       <span class=\"comment\">// 拷贝一份path，推入res</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span>;                       <span class=\"comment\">// 结束当前递归</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = start; i &lt;= n; i++) &#123; <span class=\"comment\">// 枚举出所有选择</span></span><br><span class=\"line\">      path.push(i);                    <span class=\"comment\">// 选择</span></span><br><span class=\"line\">      dfs(i + <span class=\"number\">1</span>, path);             <span class=\"comment\">// 向下继续选择</span></span><br><span class=\"line\">      path.pop();                      <span class=\"comment\">// 撤销选择</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  dfs(<span class=\"number\">1</span>, []); <span class=\"comment\">// 递归的入口，从数字1开始选</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>给定两个整数 n 和 k，返回 1 … n 中所有可能的 k 个数的组合。</p>","more":"<blockquote>\n<p>原题描述访问：<a href=\"https://leetcode-cn.com/problems/combinations/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/combinations/</a></p>\n</blockquote>\n<h3 id=\"回溯剪枝\"><a href=\"#回溯剪枝\" class=\"headerlink\" title=\"回溯剪枝\"></a>回溯剪枝</h3><p>直接看代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> combine = <span class=\"function\">(<span class=\"params\">n, k</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> dfs = <span class=\"function\">(<span class=\"params\">start, path</span>) =&gt;</span> &#123; <span class=\"comment\">// start是枚举选择的起点 path是当前构建的路径（组合）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (path.length == k) &#123;</span><br><span class=\"line\">      res.push(path.slice());       <span class=\"comment\">// 拷贝一份path，推入res</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span>;                       <span class=\"comment\">// 结束当前递归</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = start; i &lt;= n; i++) &#123; <span class=\"comment\">// 枚举出所有选择</span></span><br><span class=\"line\">      path.push(i);                    <span class=\"comment\">// 选择</span></span><br><span class=\"line\">      dfs(i + <span class=\"number\">1</span>, path);             <span class=\"comment\">// 向下继续选择</span></span><br><span class=\"line\">      path.pop();                      <span class=\"comment\">// 撤销选择</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  dfs(<span class=\"number\">1</span>, []); <span class=\"comment\">// 递归的入口，从数字1开始选</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"JS的执行机制","date":"2020-09-07T13:58:46.000Z","_content":"网上很多js机制相关的讲解，本篇只列出相关题目以便以后复习巩固\n<!--more-->\n{% note %}\njs执行机制相关讲解可参考以下博客\nhttps://juejin.im/post/6855129007558492174\nhttps://juejin.im/post/6844903568814800904\n{% endnote %}\n### 任务队列\n\n任务队列就是一个事件队列,我们前面提到的有些耗时的任务或一些异步任务,我们将它放到任务队列中.当满足某些条件时就可以从任务队列中取出去放到主线程中执行. 我们先来看下面的代码,类似的问题是有可能出现在一些面试题中的.问的就是打印出来的顺序是多少?\n```javascript\nsetTimeout(() => {\n  console.log(1)\n})\nconsole.log(2)\nnew Promise((resolve, reject) => {\n  console.log(3)\n  resolve()\n}).then(() => {\n  console.log(4)\n})\n// 2 3 4 1\n```\n为什么是 2341 的顺序呢?我们来分析下,JS中代码的执行是从上到下一行一行执行的.首先执行的是 setTimeout 这段代码,发现这是定时器任务,于是便把内部的具体执行内容 console.log(1) 先拿出来放到其他地方,准备待会儿再执行.继续执行到 console.log(2) 这句,于是先输出一个2.继续执行,遇到了一个 Promise .注意在这个 Promise中 , console.log(3) 以及之后的 resolve() 这两句都是同步执行的,但是 then 里面的代码却是异步执行的.于是在输出了一个3之后,又把 console.log(4) 拿出来放到其他地方,准备晚点再去执行它.好了,现在我们已经把 console.log(1) 和 console.log(4) 扔进了一个地方,那么为什么是先输出4然后再是1呢?这是因为虽然1和4都被我们扔进了一个地方,我们可以把这个地方理解为一个大房子.1和4被扔进了不同的房间.其中1被扔进了一个叫做 宏任务队列 的房间.4被扔进了另一个叫做 微任务队列 的房间.\n\n**总结起来就是:**不同类型的任务会进入到对应的事件队列(Event Queue)中.每次执行下一个宏任务之前先去微任务队列里面查看,直到把微任务队列清空后再去执行宏任务队列中的任务.\n\n### 微任务和宏任务\n- **微任务(micro-task)**: Promise ,process.nextTick 等\n- **宏任务(macro-task)**: script, setTimeout, setInterval 等\n\n```javascript\nsetTimeout(() => {\n  console.log(3)\n})\nprocess.nextTick(() => {\n  console.log(1)\n})\nconsole.log(2)\n// 2 1 3\n```\n可以看到输出的结果为 2 1 3 ,这就是因为 setTimeout 是个宏任务, 而 nextTick 则是个微任务.所以先清空微任务队列,即先执行 process.nextTick 的回调.\n\n### 运用微任务和宏任务来解题\n\n到这里我们已经介绍了同步异步以及微任务队列和宏任务队列的相关内容了,我们再来看一看一道复杂一点的题目.\n```javascript\nsetTimeout(() => {\n  console.log(1)\n})\n\nsetTimeout(() => {\n  new Promise((resolve, reject) => {\n    console.log(2)\n    resolve()\n  }).then(() => {\n    console.log(3)\n  })\n})\n\nconsole.log(4)\n\nnew Promise((resolve, reject) => {\n  console.log(5)\n  resolve()\n}).then(() => {\n  console.log(6)\n})\n\nnew Promise((resolve, reject) => {\n  console.log(7)\n  setTimeout(() => {\n     console.log(8)\n  })\n  resolve()\n}).then(() => {\n  console.log(9)\n})\n// 4 5 7 6 9 1 2 3 8\n```\n首先执行前面两个 setTimeout ,于是把123放到了宏任务队列中.执行到4的时候,先打印出一个4.然后是两个Promise,先打印出5,然后把6放到了微任务队列中.再之后打印出7,把8放到宏任务中,然后就是9放到微任务中.此时已经打印出457,并且微任务中有[6,9],宏任务中有[1,2,3,8].代码第一遍已经执行完毕,前面提到了整个script 脚本相当于一个宏任务.于是便去执行微任务,接着打印出69.此时微任务已经清空,去执行宏任务.选取宏任务队列中的第一个任务,打印出1之后.回过头去看看微任务队列是否还有未执行的任务,现在已经没有了.于是便继续执行宏任务队列中的下一个任务即2.打印出2之后,因为这是一个 Promise ,所以将then里面的3放到微任务队列,此次宏任务执行完毕.此时的微任务队列有[3],宏任务队列有[8].再去执行微任务队列,打印出3.最后再次执行宏任务队列,打印出8.","source":"_posts/JS的执行机制.md","raw":"---\ntitle: JS的执行机制\ndate: 2020-09-07 21:58:46\ncategories:\n    - JavaScript\ntags:\n    - 面试题\n---\n网上很多js机制相关的讲解，本篇只列出相关题目以便以后复习巩固\n<!--more-->\n{% note %}\njs执行机制相关讲解可参考以下博客\nhttps://juejin.im/post/6855129007558492174\nhttps://juejin.im/post/6844903568814800904\n{% endnote %}\n### 任务队列\n\n任务队列就是一个事件队列,我们前面提到的有些耗时的任务或一些异步任务,我们将它放到任务队列中.当满足某些条件时就可以从任务队列中取出去放到主线程中执行. 我们先来看下面的代码,类似的问题是有可能出现在一些面试题中的.问的就是打印出来的顺序是多少?\n```javascript\nsetTimeout(() => {\n  console.log(1)\n})\nconsole.log(2)\nnew Promise((resolve, reject) => {\n  console.log(3)\n  resolve()\n}).then(() => {\n  console.log(4)\n})\n// 2 3 4 1\n```\n为什么是 2341 的顺序呢?我们来分析下,JS中代码的执行是从上到下一行一行执行的.首先执行的是 setTimeout 这段代码,发现这是定时器任务,于是便把内部的具体执行内容 console.log(1) 先拿出来放到其他地方,准备待会儿再执行.继续执行到 console.log(2) 这句,于是先输出一个2.继续执行,遇到了一个 Promise .注意在这个 Promise中 , console.log(3) 以及之后的 resolve() 这两句都是同步执行的,但是 then 里面的代码却是异步执行的.于是在输出了一个3之后,又把 console.log(4) 拿出来放到其他地方,准备晚点再去执行它.好了,现在我们已经把 console.log(1) 和 console.log(4) 扔进了一个地方,那么为什么是先输出4然后再是1呢?这是因为虽然1和4都被我们扔进了一个地方,我们可以把这个地方理解为一个大房子.1和4被扔进了不同的房间.其中1被扔进了一个叫做 宏任务队列 的房间.4被扔进了另一个叫做 微任务队列 的房间.\n\n**总结起来就是:**不同类型的任务会进入到对应的事件队列(Event Queue)中.每次执行下一个宏任务之前先去微任务队列里面查看,直到把微任务队列清空后再去执行宏任务队列中的任务.\n\n### 微任务和宏任务\n- **微任务(micro-task)**: Promise ,process.nextTick 等\n- **宏任务(macro-task)**: script, setTimeout, setInterval 等\n\n```javascript\nsetTimeout(() => {\n  console.log(3)\n})\nprocess.nextTick(() => {\n  console.log(1)\n})\nconsole.log(2)\n// 2 1 3\n```\n可以看到输出的结果为 2 1 3 ,这就是因为 setTimeout 是个宏任务, 而 nextTick 则是个微任务.所以先清空微任务队列,即先执行 process.nextTick 的回调.\n\n### 运用微任务和宏任务来解题\n\n到这里我们已经介绍了同步异步以及微任务队列和宏任务队列的相关内容了,我们再来看一看一道复杂一点的题目.\n```javascript\nsetTimeout(() => {\n  console.log(1)\n})\n\nsetTimeout(() => {\n  new Promise((resolve, reject) => {\n    console.log(2)\n    resolve()\n  }).then(() => {\n    console.log(3)\n  })\n})\n\nconsole.log(4)\n\nnew Promise((resolve, reject) => {\n  console.log(5)\n  resolve()\n}).then(() => {\n  console.log(6)\n})\n\nnew Promise((resolve, reject) => {\n  console.log(7)\n  setTimeout(() => {\n     console.log(8)\n  })\n  resolve()\n}).then(() => {\n  console.log(9)\n})\n// 4 5 7 6 9 1 2 3 8\n```\n首先执行前面两个 setTimeout ,于是把123放到了宏任务队列中.执行到4的时候,先打印出一个4.然后是两个Promise,先打印出5,然后把6放到了微任务队列中.再之后打印出7,把8放到宏任务中,然后就是9放到微任务中.此时已经打印出457,并且微任务中有[6,9],宏任务中有[1,2,3,8].代码第一遍已经执行完毕,前面提到了整个script 脚本相当于一个宏任务.于是便去执行微任务,接着打印出69.此时微任务已经清空,去执行宏任务.选取宏任务队列中的第一个任务,打印出1之后.回过头去看看微任务队列是否还有未执行的任务,现在已经没有了.于是便继续执行宏任务队列中的下一个任务即2.打印出2之后,因为这是一个 Promise ,所以将then里面的3放到微任务队列,此次宏任务执行完毕.此时的微任务队列有[3],宏任务队列有[8].再去执行微任务队列,打印出3.最后再次执行宏任务队列,打印出8.","slug":"JS的执行机制","published":1,"updated":"2020-09-07T14:09:35.670Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmdwh6nwx000e8ubp4ks5gugb","content":"<p>网上很多js机制相关的讲解，本篇只列出相关题目以便以后复习巩固</p>\n<a id=\"more\"></a>\n<div class=\"note \"><p>js执行机制相关讲解可参考以下博客<br><a href=\"https://juejin.im/post/6855129007558492174\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/6855129007558492174</a><br><a href=\"https://juejin.im/post/6844903568814800904\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/6844903568814800904</a></p></div>\n<h3 id=\"任务队列\"><a href=\"#任务队列\" class=\"headerlink\" title=\"任务队列\"></a>任务队列</h3><p>任务队列就是一个事件队列,我们前面提到的有些耗时的任务或一些异步任务,我们将它放到任务队列中.当满足某些条件时就可以从任务队列中取出去放到主线程中执行. 我们先来看下面的代码,类似的问题是有可能出现在一些面试题中的.问的就是打印出来的顺序是多少?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">  resolve()</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 2 3 4 1</span></span><br></pre></td></tr></table></figure>\n<p>为什么是 2341 的顺序呢?我们来分析下,JS中代码的执行是从上到下一行一行执行的.首先执行的是 setTimeout 这段代码,发现这是定时器任务,于是便把内部的具体执行内容 console.log(1) 先拿出来放到其他地方,准备待会儿再执行.继续执行到 console.log(2) 这句,于是先输出一个2.继续执行,遇到了一个 Promise .注意在这个 Promise中 , console.log(3) 以及之后的 resolve() 这两句都是同步执行的,但是 then 里面的代码却是异步执行的.于是在输出了一个3之后,又把 console.log(4) 拿出来放到其他地方,准备晚点再去执行它.好了,现在我们已经把 console.log(1) 和 console.log(4) 扔进了一个地方,那么为什么是先输出4然后再是1呢?这是因为虽然1和4都被我们扔进了一个地方,我们可以把这个地方理解为一个大房子.1和4被扔进了不同的房间.其中1被扔进了一个叫做 宏任务队列 的房间.4被扔进了另一个叫做 微任务队列 的房间.</p>\n<p><strong>总结起来就是:</strong>不同类型的任务会进入到对应的事件队列(Event Queue)中.每次执行下一个宏任务之前先去微任务队列里面查看,直到把微任务队列清空后再去执行宏任务队列中的任务.</p>\n<h3 id=\"微任务和宏任务\"><a href=\"#微任务和宏任务\" class=\"headerlink\" title=\"微任务和宏任务\"></a>微任务和宏任务</h3><ul>\n<li><strong>微任务(micro-task)</strong>: Promise ,process.nextTick 等</li>\n<li><strong>宏任务(macro-task)</strong>: script, setTimeout, setInterval 等</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">process.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">// 2 1 3</span></span><br></pre></td></tr></table></figure>\n<p>可以看到输出的结果为 2 1 3 ,这就是因为 setTimeout 是个宏任务, 而 nextTick 则是个微任务.所以先清空微任务队列,即先执行 process.nextTick 的回调.</p>\n<h3 id=\"运用微任务和宏任务来解题\"><a href=\"#运用微任务和宏任务来解题\" class=\"headerlink\" title=\"运用微任务和宏任务来解题\"></a>运用微任务和宏任务来解题</h3><p>到这里我们已经介绍了同步异步以及微任务队列和宏任务队列的相关内容了,我们再来看一看一道复杂一点的题目.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">    resolve()</span><br><span class=\"line\">  &#125;).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">5</span>)</span><br><span class=\"line\">  resolve()</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">6</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">7</span>)</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(<span class=\"number\">8</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  resolve()</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">9</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 4 5 7 6 9 1 2 3 8</span></span><br></pre></td></tr></table></figure>\n<p>首先执行前面两个 setTimeout ,于是把123放到了宏任务队列中.执行到4的时候,先打印出一个4.然后是两个Promise,先打印出5,然后把6放到了微任务队列中.再之后打印出7,把8放到宏任务中,然后就是9放到微任务中.此时已经打印出457,并且微任务中有[6,9],宏任务中有[1,2,3,8].代码第一遍已经执行完毕,前面提到了整个script 脚本相当于一个宏任务.于是便去执行微任务,接着打印出69.此时微任务已经清空,去执行宏任务.选取宏任务队列中的第一个任务,打印出1之后.回过头去看看微任务队列是否还有未执行的任务,现在已经没有了.于是便继续执行宏任务队列中的下一个任务即2.打印出2之后,因为这是一个 Promise ,所以将then里面的3放到微任务队列,此次宏任务执行完毕.此时的微任务队列有[3],宏任务队列有[8].再去执行微任务队列,打印出3.最后再次执行宏任务队列,打印出8.</p>\n","site":{"data":{}},"excerpt":"<p>网上很多js机制相关的讲解，本篇只列出相关题目以便以后复习巩固</p>","more":"<div class=\"note \"><p>js执行机制相关讲解可参考以下博客<br><a href=\"https://juejin.im/post/6855129007558492174\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/6855129007558492174</a><br><a href=\"https://juejin.im/post/6844903568814800904\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/6844903568814800904</a></p></div>\n<h3 id=\"任务队列\"><a href=\"#任务队列\" class=\"headerlink\" title=\"任务队列\"></a>任务队列</h3><p>任务队列就是一个事件队列,我们前面提到的有些耗时的任务或一些异步任务,我们将它放到任务队列中.当满足某些条件时就可以从任务队列中取出去放到主线程中执行. 我们先来看下面的代码,类似的问题是有可能出现在一些面试题中的.问的就是打印出来的顺序是多少?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">  resolve()</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 2 3 4 1</span></span><br></pre></td></tr></table></figure>\n<p>为什么是 2341 的顺序呢?我们来分析下,JS中代码的执行是从上到下一行一行执行的.首先执行的是 setTimeout 这段代码,发现这是定时器任务,于是便把内部的具体执行内容 console.log(1) 先拿出来放到其他地方,准备待会儿再执行.继续执行到 console.log(2) 这句,于是先输出一个2.继续执行,遇到了一个 Promise .注意在这个 Promise中 , console.log(3) 以及之后的 resolve() 这两句都是同步执行的,但是 then 里面的代码却是异步执行的.于是在输出了一个3之后,又把 console.log(4) 拿出来放到其他地方,准备晚点再去执行它.好了,现在我们已经把 console.log(1) 和 console.log(4) 扔进了一个地方,那么为什么是先输出4然后再是1呢?这是因为虽然1和4都被我们扔进了一个地方,我们可以把这个地方理解为一个大房子.1和4被扔进了不同的房间.其中1被扔进了一个叫做 宏任务队列 的房间.4被扔进了另一个叫做 微任务队列 的房间.</p>\n<p><strong>总结起来就是:</strong>不同类型的任务会进入到对应的事件队列(Event Queue)中.每次执行下一个宏任务之前先去微任务队列里面查看,直到把微任务队列清空后再去执行宏任务队列中的任务.</p>\n<h3 id=\"微任务和宏任务\"><a href=\"#微任务和宏任务\" class=\"headerlink\" title=\"微任务和宏任务\"></a>微任务和宏任务</h3><ul>\n<li><strong>微任务(micro-task)</strong>: Promise ,process.nextTick 等</li>\n<li><strong>宏任务(macro-task)</strong>: script, setTimeout, setInterval 等</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">process.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">// 2 1 3</span></span><br></pre></td></tr></table></figure>\n<p>可以看到输出的结果为 2 1 3 ,这就是因为 setTimeout 是个宏任务, 而 nextTick 则是个微任务.所以先清空微任务队列,即先执行 process.nextTick 的回调.</p>\n<h3 id=\"运用微任务和宏任务来解题\"><a href=\"#运用微任务和宏任务来解题\" class=\"headerlink\" title=\"运用微任务和宏任务来解题\"></a>运用微任务和宏任务来解题</h3><p>到这里我们已经介绍了同步异步以及微任务队列和宏任务队列的相关内容了,我们再来看一看一道复杂一点的题目.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">    resolve()</span><br><span class=\"line\">  &#125;).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">5</span>)</span><br><span class=\"line\">  resolve()</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">6</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">7</span>)</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(<span class=\"number\">8</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  resolve()</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">9</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 4 5 7 6 9 1 2 3 8</span></span><br></pre></td></tr></table></figure>\n<p>首先执行前面两个 setTimeout ,于是把123放到了宏任务队列中.执行到4的时候,先打印出一个4.然后是两个Promise,先打印出5,然后把6放到了微任务队列中.再之后打印出7,把8放到宏任务中,然后就是9放到微任务中.此时已经打印出457,并且微任务中有[6,9],宏任务中有[1,2,3,8].代码第一遍已经执行完毕,前面提到了整个script 脚本相当于一个宏任务.于是便去执行微任务,接着打印出69.此时微任务已经清空,去执行宏任务.选取宏任务队列中的第一个任务,打印出1之后.回过头去看看微任务队列是否还有未执行的任务,现在已经没有了.于是便继续执行宏任务队列中的下一个任务即2.打印出2之后,因为这是一个 Promise ,所以将then里面的3放到微任务队列,此次宏任务执行完毕.此时的微任务队列有[3],宏任务队列有[8].再去执行微任务队列,打印出3.最后再次执行宏任务队列,打印出8.</p>"},{"title":"this的考查","date":"2020-09-04T12:00:27.000Z","_content":"关于this的考查部分题目如下：\n<!--more-->\n1. 输出代码结果\n```javascript\nvar fullName = 'language'\nvar obj = {\n    fullName = 'javascript',\n    prop = {\n        getFullName = function(){\n            return this.fullName\n        }\n    }\n}\nconsole.log(obj.prop.getFullName()) // this为obj.prop，故输出undefined\nvar test = obj.prop.getFullName\nconsole.log(test()) // this为window，故输出'language'\n```\n2. 输出代码结果\n```javascript\nvar name = 'window'\nvar Tom = {\n    name: 'Tom',\n    show: function(){\n        console.log(this.name)\n    },\n    wait: function(){\n        var fun = this.show\n        fun()\n    }\n}\nTom.wait() // this: Tom => fun = Tom.show =>fun() => this: window => 输出window.name => 'window'\n```\n3. 输出代码结果\n```javascript\nfunction fun(){\n    this.a = 0\n    this.b = function(){\n        alert(this.a)\n    }\n}\nfun.prototype = { // 此时fun的constructor改变，指向了Object\n    b: function(){\n        this.a = 20\n        alert(this.a)\n    },\n    c: function(){\n        this.a = 30\n        alert(this.a)\n    }\n}\nvar my_fun = new fun()\nmy_fun.b() // 私有的方法b  this: my_fun => my_fun.a => '0'\nmy_fun.c() // 公有的方法c  this: my_fun => my_fun.c => '30'(把当前示例私有属性由0改为了30)\n```\n","source":"_posts/this的考查.md","raw":"---\ntitle: this的考查\ndate: 2020-09-04 20:00:27\ncategories:\n    - JavaScript\ntags:\n    - 面试题\n---\n关于this的考查部分题目如下：\n<!--more-->\n1. 输出代码结果\n```javascript\nvar fullName = 'language'\nvar obj = {\n    fullName = 'javascript',\n    prop = {\n        getFullName = function(){\n            return this.fullName\n        }\n    }\n}\nconsole.log(obj.prop.getFullName()) // this为obj.prop，故输出undefined\nvar test = obj.prop.getFullName\nconsole.log(test()) // this为window，故输出'language'\n```\n2. 输出代码结果\n```javascript\nvar name = 'window'\nvar Tom = {\n    name: 'Tom',\n    show: function(){\n        console.log(this.name)\n    },\n    wait: function(){\n        var fun = this.show\n        fun()\n    }\n}\nTom.wait() // this: Tom => fun = Tom.show =>fun() => this: window => 输出window.name => 'window'\n```\n3. 输出代码结果\n```javascript\nfunction fun(){\n    this.a = 0\n    this.b = function(){\n        alert(this.a)\n    }\n}\nfun.prototype = { // 此时fun的constructor改变，指向了Object\n    b: function(){\n        this.a = 20\n        alert(this.a)\n    },\n    c: function(){\n        this.a = 30\n        alert(this.a)\n    }\n}\nvar my_fun = new fun()\nmy_fun.b() // 私有的方法b  this: my_fun => my_fun.a => '0'\nmy_fun.c() // 公有的方法c  this: my_fun => my_fun.c => '30'(把当前示例私有属性由0改为了30)\n```\n","slug":"this的考查","published":1,"updated":"2020-09-05T15:18:15.456Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmdwh6nwz000g8ubpasw9168u","content":"<p>关于this的考查部分题目如下：</p>\n<a id=\"more\"></a>\n<ol>\n<li>输出代码结果<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fullName = <span class=\"string\">'language'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    fullName = <span class=\"string\">'javascript'</span>,</span><br><span class=\"line\">    prop = &#123;</span><br><span class=\"line\">        getFullName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.fullName</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.prop.getFullName()) <span class=\"comment\">// this为obj.prop，故输出undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> test = obj.prop.getFullName</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(test()) <span class=\"comment\">// this为window，故输出'language'</span></span><br></pre></td></tr></table></figure></li>\n<li>输出代码结果<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'window'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Tom = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Tom'</span>,</span><br><span class=\"line\">    show: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    wait: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> fun = <span class=\"keyword\">this</span>.show</span><br><span class=\"line\">        fun()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Tom.wait() <span class=\"comment\">// this: Tom =&gt; fun = Tom.show =&gt;fun() =&gt; this: window =&gt; 输出window.name =&gt; 'window'</span></span><br></pre></td></tr></table></figure></li>\n<li>输出代码结果<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.a = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.b = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.a)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun.prototype = &#123; <span class=\"comment\">// 此时fun的constructor改变，指向了Object</span></span><br><span class=\"line\">    b: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.a = <span class=\"number\">20</span></span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.a)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    c: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.a = <span class=\"number\">30</span></span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.a)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> my_fun = <span class=\"keyword\">new</span> fun()</span><br><span class=\"line\">my_fun.b() <span class=\"comment\">// 私有的方法b  this: my_fun =&gt; my_fun.a =&gt; '0'</span></span><br><span class=\"line\">my_fun.c() <span class=\"comment\">// 公有的方法c  this: my_fun =&gt; my_fun.c =&gt; '30'(把当前示例私有属性由0改为了30)</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>关于this的考查部分题目如下：</p>","more":"<ol>\n<li>输出代码结果<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fullName = <span class=\"string\">'language'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    fullName = <span class=\"string\">'javascript'</span>,</span><br><span class=\"line\">    prop = &#123;</span><br><span class=\"line\">        getFullName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.fullName</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.prop.getFullName()) <span class=\"comment\">// this为obj.prop，故输出undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> test = obj.prop.getFullName</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(test()) <span class=\"comment\">// this为window，故输出'language'</span></span><br></pre></td></tr></table></figure></li>\n<li>输出代码结果<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'window'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Tom = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Tom'</span>,</span><br><span class=\"line\">    show: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    wait: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> fun = <span class=\"keyword\">this</span>.show</span><br><span class=\"line\">        fun()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Tom.wait() <span class=\"comment\">// this: Tom =&gt; fun = Tom.show =&gt;fun() =&gt; this: window =&gt; 输出window.name =&gt; 'window'</span></span><br></pre></td></tr></table></figure></li>\n<li>输出代码结果<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.a = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.b = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.a)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun.prototype = &#123; <span class=\"comment\">// 此时fun的constructor改变，指向了Object</span></span><br><span class=\"line\">    b: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.a = <span class=\"number\">20</span></span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.a)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    c: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.a = <span class=\"number\">30</span></span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.a)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> my_fun = <span class=\"keyword\">new</span> fun()</span><br><span class=\"line\">my_fun.b() <span class=\"comment\">// 私有的方法b  this: my_fun =&gt; my_fun.a =&gt; '0'</span></span><br><span class=\"line\">my_fun.c() <span class=\"comment\">// 公有的方法c  this: my_fun =&gt; my_fun.c =&gt; '30'(把当前示例私有属性由0改为了30)</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>"},{"title":"JS连等运算","date":"2020-09-06T08:29:39.000Z","_content":"js连等运算知识点考查\n<!--more-->\n- 输出以下代码的结果并解释为什么\n```javascript\nvar a = { n: 1 }\nvar b = a\na.x = a = { n: 2 } // a = { n: 2 } => { n: 2 }.x = a\nconsole.log(a.x) // undefined\nconsole.log(b.x) // { n: 2 }\n```\n解释：这里的重点是a.x到底是谁\n简单来说，在赋值过程开始时，a其实是{n:1}\na.x=a={n:2}\n其实在计算机眼中是长成这样的：\n{n:1}.x=a={n:2}\n所以，这个赋值发生了两件事\n//1.把\"a\"变成了{n:2}\n//2.把{n:1}的x变成了{n:2}--------------------\n也就是说：\na.x = a = {n: 2};\n其实被计算机执行成了\n{n:1}.x={n: 2};\na={n: 2};\n所以最后的结果变成了\na=={n: 2};\nconsole.log(a.x) => undefined    //因为a没有x属性\nb=={n: 1, x: {n: 2}}\nconsole.log(b.x) => {n: 2}\n\n- 连等开始之前，程序会把所有引用都保存起来\n- 连等的过程中，这些值是不变的\n- 等到整个连等结束了，再一起变","source":"_posts/JS连等运算.md","raw":"---\ntitle: JS连等运算\ndate: 2020-09-06 16:29:39\ncategories:\n    - JavaScript\ntags:\n    - 面试题\n---\njs连等运算知识点考查\n<!--more-->\n- 输出以下代码的结果并解释为什么\n```javascript\nvar a = { n: 1 }\nvar b = a\na.x = a = { n: 2 } // a = { n: 2 } => { n: 2 }.x = a\nconsole.log(a.x) // undefined\nconsole.log(b.x) // { n: 2 }\n```\n解释：这里的重点是a.x到底是谁\n简单来说，在赋值过程开始时，a其实是{n:1}\na.x=a={n:2}\n其实在计算机眼中是长成这样的：\n{n:1}.x=a={n:2}\n所以，这个赋值发生了两件事\n//1.把\"a\"变成了{n:2}\n//2.把{n:1}的x变成了{n:2}--------------------\n也就是说：\na.x = a = {n: 2};\n其实被计算机执行成了\n{n:1}.x={n: 2};\na={n: 2};\n所以最后的结果变成了\na=={n: 2};\nconsole.log(a.x) => undefined    //因为a没有x属性\nb=={n: 1, x: {n: 2}}\nconsole.log(b.x) => {n: 2}\n\n- 连等开始之前，程序会把所有引用都保存起来\n- 连等的过程中，这些值是不变的\n- 等到整个连等结束了，再一起变","slug":"JS连等运算","published":1,"updated":"2020-09-06T08:47:53.128Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmdwh6nx3000k8ubp373jerf9","content":"<p>js连等运算知识点考查</p>\n<a id=\"more\"></a>\n<ul>\n<li><p>输出以下代码的结果并解释为什么</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123; <span class=\"attr\">n</span>: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a</span><br><span class=\"line\">a.x = a = &#123; <span class=\"attr\">n</span>: <span class=\"number\">2</span> &#125; <span class=\"comment\">// a = &#123; n: 2 &#125; =&gt; &#123; n: 2 &#125;.x = a</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.x) <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.x) <span class=\"comment\">// &#123; n: 2 &#125;</span></span><br></pre></td></tr></table></figure>\n<p>解释：这里的重点是a.x到底是谁<br>简单来说，在赋值过程开始时，a其实是{n:1}<br>a.x=a={n:2}<br>其实在计算机眼中是长成这样的：<br>{n:1}.x=a={n:2}<br>所以，这个赋值发生了两件事<br>//1.把”a”变成了{n:2}<br>//2.把{n:1}的x变成了{n:2}——————–<br>也就是说：<br>a.x = a = {n: 2};<br>其实被计算机执行成了<br>{n:1}.x={n: 2};<br>a={n: 2};<br>所以最后的结果变成了<br>a=={n: 2};<br>console.log(a.x) =&gt; undefined    //因为a没有x属性<br>b=={n: 1, x: {n: 2}}<br>console.log(b.x) =&gt; {n: 2}</p>\n</li>\n<li><p>连等开始之前，程序会把所有引用都保存起来</p>\n</li>\n<li><p>连等的过程中，这些值是不变的</p>\n</li>\n<li><p>等到整个连等结束了，再一起变</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>js连等运算知识点考查</p>","more":"<ul>\n<li><p>输出以下代码的结果并解释为什么</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123; <span class=\"attr\">n</span>: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a</span><br><span class=\"line\">a.x = a = &#123; <span class=\"attr\">n</span>: <span class=\"number\">2</span> &#125; <span class=\"comment\">// a = &#123; n: 2 &#125; =&gt; &#123; n: 2 &#125;.x = a</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.x) <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.x) <span class=\"comment\">// &#123; n: 2 &#125;</span></span><br></pre></td></tr></table></figure>\n<p>解释：这里的重点是a.x到底是谁<br>简单来说，在赋值过程开始时，a其实是{n:1}<br>a.x=a={n:2}<br>其实在计算机眼中是长成这样的：<br>{n:1}.x=a={n:2}<br>所以，这个赋值发生了两件事<br>//1.把”a”变成了{n:2}<br>//2.把{n:1}的x变成了{n:2}——————–<br>也就是说：<br>a.x = a = {n: 2};<br>其实被计算机执行成了<br>{n:1}.x={n: 2};<br>a={n: 2};<br>所以最后的结果变成了<br>a=={n: 2};<br>console.log(a.x) =&gt; undefined    //因为a没有x属性<br>b=={n: 1, x: {n: 2}}<br>console.log(b.x) =&gt; {n: 2}</p>\n</li>\n<li><p>连等开始之前，程序会把所有引用都保存起来</p>\n</li>\n<li><p>连等的过程中，这些值是不变的</p>\n</li>\n<li><p>等到整个连等结束了，再一起变</p>\n</li>\n</ul>"},{"title":"为什么需要node作为中间层","date":"2020-09-01T08:55:09.000Z","_content":"通常我们把Web领域分为客户端和服务端，也就是前端和后端，这里的后端就包含了网关，静态资源，接口，缓存，数据库等。而中间层呢，就是在后端这里再抽离一层出来，在业务上处理和客户端衔接更紧密的部分，比如页面渲染（SSR），数据聚合，接口转发等等。\n以SSR来说，在服务端将页面渲染好，可以加快用户的首屏加载速度，避免请求时白屏，还有利于网站做SEO，他的好处是比较好理解的。那么对于数据的聚合，接口转发来说，这样做有什么意义呢？\n<!--more-->\n- 用Node的原因有以下：\n  - 代理：在开发环境下，我们可以利用代理来，解决最常见的跨域问题；在线上环境下，我们可以利用代理，转发请求到多个服务端\n  - 缓存：缓存其实是更靠近前端的需求，用户的动作触发数据的更新，node中间层可以直接处理一部分缓存需求。\n  - 限流：node中间层，可以针对接口或者路由做响应的限流。\n  - 日志：相比其他服务端语言，node中间层的日志记录，能更方便快捷的定位问题（是在浏览器端还是服务端）。\n  - 监控：擅长高并发的请求处理，做监控也是合适的选项。\n  - 鉴权：有一个中间层去鉴权，也是一种单一职责的实现。\n  - 路由：前端更需要掌握页面路由的权限和逻辑。\n  - 服务端渲染：node中间层的解决方案更灵活，比如SSR、模板直出、利用一些JS库做预渲染等等。\n  - 更多的可能性","source":"_posts/为什么需要node作为中间层.md","raw":"---\ntitle: 为什么需要node作为中间层\ndate: 2020-09-01 16:55:09\ncategories:\n    - JavaScript\ntags:\n    - 面试题\n---\n通常我们把Web领域分为客户端和服务端，也就是前端和后端，这里的后端就包含了网关，静态资源，接口，缓存，数据库等。而中间层呢，就是在后端这里再抽离一层出来，在业务上处理和客户端衔接更紧密的部分，比如页面渲染（SSR），数据聚合，接口转发等等。\n以SSR来说，在服务端将页面渲染好，可以加快用户的首屏加载速度，避免请求时白屏，还有利于网站做SEO，他的好处是比较好理解的。那么对于数据的聚合，接口转发来说，这样做有什么意义呢？\n<!--more-->\n- 用Node的原因有以下：\n  - 代理：在开发环境下，我们可以利用代理来，解决最常见的跨域问题；在线上环境下，我们可以利用代理，转发请求到多个服务端\n  - 缓存：缓存其实是更靠近前端的需求，用户的动作触发数据的更新，node中间层可以直接处理一部分缓存需求。\n  - 限流：node中间层，可以针对接口或者路由做响应的限流。\n  - 日志：相比其他服务端语言，node中间层的日志记录，能更方便快捷的定位问题（是在浏览器端还是服务端）。\n  - 监控：擅长高并发的请求处理，做监控也是合适的选项。\n  - 鉴权：有一个中间层去鉴权，也是一种单一职责的实现。\n  - 路由：前端更需要掌握页面路由的权限和逻辑。\n  - 服务端渲染：node中间层的解决方案更灵活，比如SSR、模板直出、利用一些JS库做预渲染等等。\n  - 更多的可能性","slug":"为什么需要node作为中间层","published":1,"updated":"2020-09-05T15:05:00.285Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmdwh6nx8000n8ubpdpkv2tuc","content":"<p>通常我们把Web领域分为客户端和服务端，也就是前端和后端，这里的后端就包含了网关，静态资源，接口，缓存，数据库等。而中间层呢，就是在后端这里再抽离一层出来，在业务上处理和客户端衔接更紧密的部分，比如页面渲染（SSR），数据聚合，接口转发等等。<br>以SSR来说，在服务端将页面渲染好，可以加快用户的首屏加载速度，避免请求时白屏，还有利于网站做SEO，他的好处是比较好理解的。那么对于数据的聚合，接口转发来说，这样做有什么意义呢？</p>\n<a id=\"more\"></a>\n<ul>\n<li>用Node的原因有以下：<ul>\n<li>代理：在开发环境下，我们可以利用代理来，解决最常见的跨域问题；在线上环境下，我们可以利用代理，转发请求到多个服务端</li>\n<li>缓存：缓存其实是更靠近前端的需求，用户的动作触发数据的更新，node中间层可以直接处理一部分缓存需求。</li>\n<li>限流：node中间层，可以针对接口或者路由做响应的限流。</li>\n<li>日志：相比其他服务端语言，node中间层的日志记录，能更方便快捷的定位问题（是在浏览器端还是服务端）。</li>\n<li>监控：擅长高并发的请求处理，做监控也是合适的选项。</li>\n<li>鉴权：有一个中间层去鉴权，也是一种单一职责的实现。</li>\n<li>路由：前端更需要掌握页面路由的权限和逻辑。</li>\n<li>服务端渲染：node中间层的解决方案更灵活，比如SSR、模板直出、利用一些JS库做预渲染等等。</li>\n<li>更多的可能性</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>通常我们把Web领域分为客户端和服务端，也就是前端和后端，这里的后端就包含了网关，静态资源，接口，缓存，数据库等。而中间层呢，就是在后端这里再抽离一层出来，在业务上处理和客户端衔接更紧密的部分，比如页面渲染（SSR），数据聚合，接口转发等等。<br>以SSR来说，在服务端将页面渲染好，可以加快用户的首屏加载速度，避免请求时白屏，还有利于网站做SEO，他的好处是比较好理解的。那么对于数据的聚合，接口转发来说，这样做有什么意义呢？</p>","more":"<ul>\n<li>用Node的原因有以下：<ul>\n<li>代理：在开发环境下，我们可以利用代理来，解决最常见的跨域问题；在线上环境下，我们可以利用代理，转发请求到多个服务端</li>\n<li>缓存：缓存其实是更靠近前端的需求，用户的动作触发数据的更新，node中间层可以直接处理一部分缓存需求。</li>\n<li>限流：node中间层，可以针对接口或者路由做响应的限流。</li>\n<li>日志：相比其他服务端语言，node中间层的日志记录，能更方便快捷的定位问题（是在浏览器端还是服务端）。</li>\n<li>监控：擅长高并发的请求处理，做监控也是合适的选项。</li>\n<li>鉴权：有一个中间层去鉴权，也是一种单一职责的实现。</li>\n<li>路由：前端更需要掌握页面路由的权限和逻辑。</li>\n<li>服务端渲染：node中间层的解决方案更灵活，比如SSR、模板直出、利用一些JS库做预渲染等等。</li>\n<li>更多的可能性</li>\n</ul>\n</li>\n</ul>"},{"title":"undefined和null","date":"2020-09-04T18:49:41.000Z","_content":"undefined和null出现场景总结如下：\n<!--more-->\n- **undefined**\n  - 变量提升：只声明，未定义，其默认值为undefined\n  - 严格模式下，没有明确的执行主体，this的值为undefined\n  - 对象没有这个属性名，属性值为undefined\n  - 对象没有这个属性名，typeof obj[item]值为字符串'undefined'\n  - 函数定义形参不传值，默认值为undefined\n  - 函数没有返回值（没有return语句或者return;）\n  - ...\n- **null**\n  - 手动设置变量的值或者对象某一属性的值为null（后面再赋值）\n  - 在JS的DOM元素获取中，如果没有获取到指定的元素对象，结果一般为null\n  - Object.prototype._proto_的值为null\n  - 正则捕获的时候，如果没有捕获到结果，默认值是null\n  - ...","source":"_posts/undefined和null.md","raw":"---\ntitle: undefined和null\ndate: 2020-09-05 02:49:41\ncategories:\n    - JavaScript\ntags:\n    - 面试题\n---\nundefined和null出现场景总结如下：\n<!--more-->\n- **undefined**\n  - 变量提升：只声明，未定义，其默认值为undefined\n  - 严格模式下，没有明确的执行主体，this的值为undefined\n  - 对象没有这个属性名，属性值为undefined\n  - 对象没有这个属性名，typeof obj[item]值为字符串'undefined'\n  - 函数定义形参不传值，默认值为undefined\n  - 函数没有返回值（没有return语句或者return;）\n  - ...\n- **null**\n  - 手动设置变量的值或者对象某一属性的值为null（后面再赋值）\n  - 在JS的DOM元素获取中，如果没有获取到指定的元素对象，结果一般为null\n  - Object.prototype._proto_的值为null\n  - 正则捕获的时候，如果没有捕获到结果，默认值是null\n  - ...","slug":"undefined和null","published":1,"updated":"2020-09-05T15:18:00.076Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmdwh6nx9000r8ubpejcweak3","content":"<p>undefined和null出现场景总结如下：</p>\n<a id=\"more\"></a>\n<ul>\n<li><strong>undefined</strong><ul>\n<li>变量提升：只声明，未定义，其默认值为undefined</li>\n<li>严格模式下，没有明确的执行主体，this的值为undefined</li>\n<li>对象没有这个属性名，属性值为undefined</li>\n<li>对象没有这个属性名，typeof obj[item]值为字符串’undefined’</li>\n<li>函数定义形参不传值，默认值为undefined</li>\n<li>函数没有返回值（没有return语句或者return;）</li>\n<li>…</li>\n</ul>\n</li>\n<li><strong>null</strong><ul>\n<li>手动设置变量的值或者对象某一属性的值为null（后面再赋值）</li>\n<li>在JS的DOM元素获取中，如果没有获取到指定的元素对象，结果一般为null</li>\n<li>Object.prototype._proto_的值为null</li>\n<li>正则捕获的时候，如果没有捕获到结果，默认值是null</li>\n<li>…</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>undefined和null出现场景总结如下：</p>","more":"<ul>\n<li><strong>undefined</strong><ul>\n<li>变量提升：只声明，未定义，其默认值为undefined</li>\n<li>严格模式下，没有明确的执行主体，this的值为undefined</li>\n<li>对象没有这个属性名，属性值为undefined</li>\n<li>对象没有这个属性名，typeof obj[item]值为字符串’undefined’</li>\n<li>函数定义形参不传值，默认值为undefined</li>\n<li>函数没有返回值（没有return语句或者return;）</li>\n<li>…</li>\n</ul>\n</li>\n<li><strong>null</strong><ul>\n<li>手动设置变量的值或者对象某一属性的值为null（后面再赋值）</li>\n<li>在JS的DOM元素获取中，如果没有获取到指定的元素对象，结果一般为null</li>\n<li>Object.prototype._proto_的值为null</li>\n<li>正则捕获的时候，如果没有捕获到结果，默认值是null</li>\n<li>…</li>\n</ul>\n</li>\n</ul>"},{"title":"二叉树解题总结","date":"2020-09-06T15:22:50.000Z","_content":"二叉树是实现递归的经典数据结构，关于二叉树的解题套路请看下文\n<!--more-->\n二叉树算法的设计的总路线：明确一个节点要做的事情，然后剩下的事抛给框架。\n```javascript\nvoid traverse(TreeNode root) {\n    // root 需要做什么？在这做。\n    // 其他的不用 root 操心，抛给框架\n    traverse(root.left);\n    traverse(root.right);\n}\n```\n**1. 如何把二叉树所有的节点中的值加一？**\n```javascript\nvoid plusOne(TreeNode root) {\n    if (root == null) return;\n    root.val += 1;\n\n    plusOne(root.left);\n    plusOne(root.right);\n}\n```\n**2. 如何判断两棵二叉树是否完全相同？**\n```javascript\nboolean isSameTree(TreeNode root1, TreeNode root2) {\n    // 都为空的话，显然相同\n    if (root1 == null && root2 == null) return true;\n    // 一个为空，一个非空，显然不同\n    if (root1 == null || root2 == null) return false;\n    // 两个都非空，但 val 不一样也不行\n    if (root1.val != root2.val) return false;\n\n    // root1 和 root2 该比的都比完了\n    return isSameTree(root1.left, root2.left)\n        && isSameTree(root1.right, root2.right);\n}\n```\n**3. 零、判断 BST 的合法性**\n这里是有坑的哦，我们按照刚才的思路，每个节点自己要做的事不就是比较自己和左右孩子吗？看起来应该这样写代码：\n```javascript\nboolean isValidBST(TreeNode root) {\n    if (root == null) return true;\n    if (root.left != null && root.val <= root.left.val) return false;\n    if (root.right != null && root.val >= root.right.val) return false;\n\n    return isValidBST(root.left)\n        && isValidBST(root.right);\n}\n```\n但是这个算法出现了错误，BST 的每个节点应该要小于右边子树的所有节点，下面这个二叉树显然不是 BST，但是我们的算法会把它判定为 BST。\n我们重新看一下 BST 的定义，root 需要做的不只是和左右子节点比较，而是要整个左子树和右子树所有节点比较。\n这种情况，我们可以使用辅助函数，增加函数参数列表，在参数中携带额外信息，请看正确的代码：\n```javascript\nboolean isValidBST(TreeNode root) {\n    return isValidBST(root, null, null);\n}\n\nboolean isValidBST(TreeNode root, TreeNode min, TreeNode max) {\n    if (root == null) return true;\n    if (min != null && root.val <= min.val) return false;\n    if (max != null && root.val >= max.val) return false;\n    return isValidBST(root.left, min, root) \n        && isValidBST(root.right, root, max);\n}\n```\n**4. 在 BST 中查找一个数是否存在**\n```javascript\nvoid BST(TreeNode root, int target) {\n    if (root.val == target)\n        // 找到目标，做点什么\n    if (root.val < target) \n        BST(root.right, target);\n    if (root.val > target)\n        BST(root.left, target);\n}\n```\n**5. 在 BST 中插入一个数**\n对数据结构的操作无非遍历 + 访问，遍历就是“找”，访问就是“改”。具体到这个问题，插入一个数，就是先找到插入位置，然后进行插入操作。\n上一个问题，我们总结了 BST 中的遍历框架，就是“找”的问题。直接套框架，加上“改”的操作即可。一旦涉及“改”，函数就要返回 TreeNode 类型，并且对递归调用的返回值进行接收。\n```javascript\nTreeNode insertIntoBST(TreeNode root, int val) {\n    // 找到空位置插入新节点\n    if (root == null) return new TreeNode(val);\n    // if (root.val == val)\n    //     BST 中一般不会插入已存在元素\n    if (root.val < val) \n        root.right = insertIntoBST(root.right, val);\n    if (root.val > val) \n        root.left = insertIntoBST(root.left, val);\n    return root;\n}\n```\n**6. 在 BST 中删除一个数**\n这个问题稍微复杂，不过你有框架指导，难不住你。跟插入操作类似，先“找”再“改”，先把框架写出来再说：\n```javascript\nTreeNode deleteNode(TreeNode root, int key) {\n    if (root.val == key) {\n        // 找到啦，进行删除\n    } else if (root.val > key) {\n        root.left = deleteNode(root.left, key);\n    } else if (root.val < key) {\n        root.right = deleteNode(root.right, key);\n    }\n    return root;\n}\n```\n找到目标节点了，比方说是节点 A，如何删除这个节点，这是难点。因为删除节点的同时不能破坏 BST 的性质。有三种情况，用图片来说明。\n1. 情况 1：A 恰好是末端节点，两个子节点都为空，那么它可以当场去世了。\n```javascript\nif (root.left == null && root.right == null)\n    return null;\n```\n2. 情况 2：A 只有一个非空子节点，那么它要让这个孩子接替自己的位置。\n```javascript\n// 排除了情况 1 之后\nif (root.left == null) return root.right;\nif (root.right == null) return root.left;\n```\n3. 情况 3：A 有两个子节点，麻烦了，为了不破坏 BST 的性质，A 必须找到左子树中最大的那个节点，或者右子树中最小的那个节点来接替自己。我们以第二种方式讲解。\n```javascript\nif (root.left != null && root.right != null) {\n    // 找到右子树的最小节点\n    TreeNode minNode = getMin(root.right);\n    // 把 root 改成 minNode\n    root.val = minNode.val;\n    // 转而去删除 minNode\n    root.right = deleteNode(root.right, minNode.val);\n}\n```\n\n简化代码如下\n```javascript\nTreeNode deleteNode(TreeNode root, int key) {\n    if (root == null) return null;\n    if (root.val == key) {\n        // 这两个 if 把情况 1 和 2 都正确处理了\n        if (root.left == null) return root.right;\n        if (root.right == null) return root.left;\n        // 处理情况 3\n        TreeNode minNode = getMin(root.right);\n        root.val = minNode.val;\n        root.right = deleteNode(root.right, minNode.val);\n    } else if (root.val > key) {\n        root.left = deleteNode(root.left, key);\n    } else if (root.val < key) {\n        root.right = deleteNode(root.right, key);\n    }\n    return root;\n}\n\nTreeNode getMin(TreeNode node) {\n    // BST 最左边的就是最小的\n    while (node.left != null) node = node.left;\n    return node;\n} \n```\n> 注：本文章来源自作者labuladong","source":"_posts/二叉树解题总结.md","raw":"---\ntitle: 二叉树解题总结\ndate: 2020-09-06 23:22:50\ncategories:\n    - 算法与数据结构\ntags:\n    - 二叉树\n---\n二叉树是实现递归的经典数据结构，关于二叉树的解题套路请看下文\n<!--more-->\n二叉树算法的设计的总路线：明确一个节点要做的事情，然后剩下的事抛给框架。\n```javascript\nvoid traverse(TreeNode root) {\n    // root 需要做什么？在这做。\n    // 其他的不用 root 操心，抛给框架\n    traverse(root.left);\n    traverse(root.right);\n}\n```\n**1. 如何把二叉树所有的节点中的值加一？**\n```javascript\nvoid plusOne(TreeNode root) {\n    if (root == null) return;\n    root.val += 1;\n\n    plusOne(root.left);\n    plusOne(root.right);\n}\n```\n**2. 如何判断两棵二叉树是否完全相同？**\n```javascript\nboolean isSameTree(TreeNode root1, TreeNode root2) {\n    // 都为空的话，显然相同\n    if (root1 == null && root2 == null) return true;\n    // 一个为空，一个非空，显然不同\n    if (root1 == null || root2 == null) return false;\n    // 两个都非空，但 val 不一样也不行\n    if (root1.val != root2.val) return false;\n\n    // root1 和 root2 该比的都比完了\n    return isSameTree(root1.left, root2.left)\n        && isSameTree(root1.right, root2.right);\n}\n```\n**3. 零、判断 BST 的合法性**\n这里是有坑的哦，我们按照刚才的思路，每个节点自己要做的事不就是比较自己和左右孩子吗？看起来应该这样写代码：\n```javascript\nboolean isValidBST(TreeNode root) {\n    if (root == null) return true;\n    if (root.left != null && root.val <= root.left.val) return false;\n    if (root.right != null && root.val >= root.right.val) return false;\n\n    return isValidBST(root.left)\n        && isValidBST(root.right);\n}\n```\n但是这个算法出现了错误，BST 的每个节点应该要小于右边子树的所有节点，下面这个二叉树显然不是 BST，但是我们的算法会把它判定为 BST。\n我们重新看一下 BST 的定义，root 需要做的不只是和左右子节点比较，而是要整个左子树和右子树所有节点比较。\n这种情况，我们可以使用辅助函数，增加函数参数列表，在参数中携带额外信息，请看正确的代码：\n```javascript\nboolean isValidBST(TreeNode root) {\n    return isValidBST(root, null, null);\n}\n\nboolean isValidBST(TreeNode root, TreeNode min, TreeNode max) {\n    if (root == null) return true;\n    if (min != null && root.val <= min.val) return false;\n    if (max != null && root.val >= max.val) return false;\n    return isValidBST(root.left, min, root) \n        && isValidBST(root.right, root, max);\n}\n```\n**4. 在 BST 中查找一个数是否存在**\n```javascript\nvoid BST(TreeNode root, int target) {\n    if (root.val == target)\n        // 找到目标，做点什么\n    if (root.val < target) \n        BST(root.right, target);\n    if (root.val > target)\n        BST(root.left, target);\n}\n```\n**5. 在 BST 中插入一个数**\n对数据结构的操作无非遍历 + 访问，遍历就是“找”，访问就是“改”。具体到这个问题，插入一个数，就是先找到插入位置，然后进行插入操作。\n上一个问题，我们总结了 BST 中的遍历框架，就是“找”的问题。直接套框架，加上“改”的操作即可。一旦涉及“改”，函数就要返回 TreeNode 类型，并且对递归调用的返回值进行接收。\n```javascript\nTreeNode insertIntoBST(TreeNode root, int val) {\n    // 找到空位置插入新节点\n    if (root == null) return new TreeNode(val);\n    // if (root.val == val)\n    //     BST 中一般不会插入已存在元素\n    if (root.val < val) \n        root.right = insertIntoBST(root.right, val);\n    if (root.val > val) \n        root.left = insertIntoBST(root.left, val);\n    return root;\n}\n```\n**6. 在 BST 中删除一个数**\n这个问题稍微复杂，不过你有框架指导，难不住你。跟插入操作类似，先“找”再“改”，先把框架写出来再说：\n```javascript\nTreeNode deleteNode(TreeNode root, int key) {\n    if (root.val == key) {\n        // 找到啦，进行删除\n    } else if (root.val > key) {\n        root.left = deleteNode(root.left, key);\n    } else if (root.val < key) {\n        root.right = deleteNode(root.right, key);\n    }\n    return root;\n}\n```\n找到目标节点了，比方说是节点 A，如何删除这个节点，这是难点。因为删除节点的同时不能破坏 BST 的性质。有三种情况，用图片来说明。\n1. 情况 1：A 恰好是末端节点，两个子节点都为空，那么它可以当场去世了。\n```javascript\nif (root.left == null && root.right == null)\n    return null;\n```\n2. 情况 2：A 只有一个非空子节点，那么它要让这个孩子接替自己的位置。\n```javascript\n// 排除了情况 1 之后\nif (root.left == null) return root.right;\nif (root.right == null) return root.left;\n```\n3. 情况 3：A 有两个子节点，麻烦了，为了不破坏 BST 的性质，A 必须找到左子树中最大的那个节点，或者右子树中最小的那个节点来接替自己。我们以第二种方式讲解。\n```javascript\nif (root.left != null && root.right != null) {\n    // 找到右子树的最小节点\n    TreeNode minNode = getMin(root.right);\n    // 把 root 改成 minNode\n    root.val = minNode.val;\n    // 转而去删除 minNode\n    root.right = deleteNode(root.right, minNode.val);\n}\n```\n\n简化代码如下\n```javascript\nTreeNode deleteNode(TreeNode root, int key) {\n    if (root == null) return null;\n    if (root.val == key) {\n        // 这两个 if 把情况 1 和 2 都正确处理了\n        if (root.left == null) return root.right;\n        if (root.right == null) return root.left;\n        // 处理情况 3\n        TreeNode minNode = getMin(root.right);\n        root.val = minNode.val;\n        root.right = deleteNode(root.right, minNode.val);\n    } else if (root.val > key) {\n        root.left = deleteNode(root.left, key);\n    } else if (root.val < key) {\n        root.right = deleteNode(root.right, key);\n    }\n    return root;\n}\n\nTreeNode getMin(TreeNode node) {\n    // BST 最左边的就是最小的\n    while (node.left != null) node = node.left;\n    return node;\n} \n```\n> 注：本文章来源自作者labuladong","slug":"二叉树解题总结","published":1,"updated":"2020-09-06T15:40:00.029Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmdwh6nxc000u8ubph3m76rha","content":"<p>二叉树是实现递归的经典数据结构，关于二叉树的解题套路请看下文</p>\n<a id=\"more\"></a>\n<p>二叉树算法的设计的总路线：明确一个节点要做的事情，然后剩下的事抛给框架。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> traverse(TreeNode root) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// root 需要做什么？在这做。</span></span><br><span class=\"line\">    <span class=\"comment\">// 其他的不用 root 操心，抛给框架</span></span><br><span class=\"line\">    traverse(root.left);</span><br><span class=\"line\">    traverse(root.right);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>1. 如何把二叉树所有的节点中的值加一？</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> plusOne(TreeNode root) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    root.val += <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    plusOne(root.left);</span><br><span class=\"line\">    plusOne(root.right);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2. 如何判断两棵二叉树是否完全相同？</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean isSameTree(TreeNode root1, TreeNode root2) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 都为空的话，显然相同</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root1 == <span class=\"literal\">null</span> &amp;&amp; root2 == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 一个为空，一个非空，显然不同</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root1 == <span class=\"literal\">null</span> || root2 == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 两个都非空，但 val 不一样也不行</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root1.val != root2.val) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// root1 和 root2 该比的都比完了</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> isSameTree(root1.left, root2.left)</span><br><span class=\"line\">        &amp;&amp; isSameTree(root1.right, root2.right);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>3. 零、判断 BST 的合法性</strong><br>这里是有坑的哦，我们按照刚才的思路，每个节点自己要做的事不就是比较自己和左右孩子吗？看起来应该这样写代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean isValidBST(TreeNode root) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.left != <span class=\"literal\">null</span> &amp;&amp; root.val &lt;= root.left.val) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.right != <span class=\"literal\">null</span> &amp;&amp; root.val &gt;= root.right.val) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> isValidBST(root.left)</span><br><span class=\"line\">        &amp;&amp; isValidBST(root.right);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是这个算法出现了错误，BST 的每个节点应该要小于右边子树的所有节点，下面这个二叉树显然不是 BST，但是我们的算法会把它判定为 BST。<br>我们重新看一下 BST 的定义，root 需要做的不只是和左右子节点比较，而是要整个左子树和右子树所有节点比较。<br>这种情况，我们可以使用辅助函数，增加函数参数列表，在参数中携带额外信息，请看正确的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean isValidBST(TreeNode root) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> isValidBST(root, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">boolean isValidBST(TreeNode root, TreeNode min, TreeNode max) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (min != <span class=\"literal\">null</span> &amp;&amp; root.val &lt;= min.val) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (max != <span class=\"literal\">null</span> &amp;&amp; root.val &gt;= max.val) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> isValidBST(root.left, min, root) </span><br><span class=\"line\">        &amp;&amp; isValidBST(root.right, root, max);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>4. 在 BST 中查找一个数是否存在</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> BST(TreeNode root, int target) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.val == target)</span><br><span class=\"line\">        <span class=\"comment\">// 找到目标，做点什么</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.val &lt; target) </span><br><span class=\"line\">        BST(root.right, target);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.val &gt; target)</span><br><span class=\"line\">        BST(root.left, target);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>5. 在 BST 中插入一个数</strong><br>对数据结构的操作无非遍历 + 访问，遍历就是“找”，访问就是“改”。具体到这个问题，插入一个数，就是先找到插入位置，然后进行插入操作。<br>上一个问题，我们总结了 BST 中的遍历框架，就是“找”的问题。直接套框架，加上“改”的操作即可。一旦涉及“改”，函数就要返回 TreeNode 类型，并且对递归调用的返回值进行接收。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TreeNode insertIntoBST(TreeNode root, int val) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 找到空位置插入新节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TreeNode(val);</span><br><span class=\"line\">    <span class=\"comment\">// if (root.val == val)</span></span><br><span class=\"line\">    <span class=\"comment\">//     BST 中一般不会插入已存在元素</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.val &lt; val) </span><br><span class=\"line\">        root.right = insertIntoBST(root.right, val);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.val &gt; val) </span><br><span class=\"line\">        root.left = insertIntoBST(root.left, val);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>6. 在 BST 中删除一个数</strong><br>这个问题稍微复杂，不过你有框架指导，难不住你。跟插入操作类似，先“找”再“改”，先把框架写出来再说：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TreeNode deleteNode(TreeNode root, int key) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.val == key) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 找到啦，进行删除</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root.val &gt; key) &#123;</span><br><span class=\"line\">        root.left = deleteNode(root.left, key);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root.val &lt; key) &#123;</span><br><span class=\"line\">        root.right = deleteNode(root.right, key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>找到目标节点了，比方说是节点 A，如何删除这个节点，这是难点。因为删除节点的同时不能破坏 BST 的性质。有三种情况，用图片来说明。</p>\n<ol>\n<li>情况 1：A 恰好是末端节点，两个子节点都为空，那么它可以当场去世了。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (root.left == <span class=\"literal\">null</span> &amp;&amp; root.right == <span class=\"literal\">null</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure></li>\n<li>情况 2：A 只有一个非空子节点，那么它要让这个孩子接替自己的位置。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 排除了情况 1 之后</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (root.left == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> root.right;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (root.right == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> root.left;</span><br></pre></td></tr></table></figure></li>\n<li>情况 3：A 有两个子节点，麻烦了，为了不破坏 BST 的性质，A 必须找到左子树中最大的那个节点，或者右子树中最小的那个节点来接替自己。我们以第二种方式讲解。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (root.left != <span class=\"literal\">null</span> &amp;&amp; root.right != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 找到右子树的最小节点</span></span><br><span class=\"line\">    TreeNode minNode = getMin(root.right);</span><br><span class=\"line\">    <span class=\"comment\">// 把 root 改成 minNode</span></span><br><span class=\"line\">    root.val = minNode.val;</span><br><span class=\"line\">    <span class=\"comment\">// 转而去删除 minNode</span></span><br><span class=\"line\">    root.right = deleteNode(root.right, minNode.val);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>简化代码如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TreeNode deleteNode(TreeNode root, int key) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.val == key) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这两个 if 把情况 1 和 2 都正确处理了</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.left == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> root.right;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.right == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> root.left;</span><br><span class=\"line\">        <span class=\"comment\">// 处理情况 3</span></span><br><span class=\"line\">        TreeNode minNode = getMin(root.right);</span><br><span class=\"line\">        root.val = minNode.val;</span><br><span class=\"line\">        root.right = deleteNode(root.right, minNode.val);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root.val &gt; key) &#123;</span><br><span class=\"line\">        root.left = deleteNode(root.left, key);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root.val &lt; key) &#123;</span><br><span class=\"line\">        root.right = deleteNode(root.right, key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">TreeNode getMin(TreeNode node) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// BST 最左边的就是最小的</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (node.left != <span class=\"literal\">null</span>) node = node.left;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注：本文章来源自作者labuladong</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>二叉树是实现递归的经典数据结构，关于二叉树的解题套路请看下文</p>","more":"<p>二叉树算法的设计的总路线：明确一个节点要做的事情，然后剩下的事抛给框架。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> traverse(TreeNode root) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// root 需要做什么？在这做。</span></span><br><span class=\"line\">    <span class=\"comment\">// 其他的不用 root 操心，抛给框架</span></span><br><span class=\"line\">    traverse(root.left);</span><br><span class=\"line\">    traverse(root.right);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>1. 如何把二叉树所有的节点中的值加一？</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> plusOne(TreeNode root) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    root.val += <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    plusOne(root.left);</span><br><span class=\"line\">    plusOne(root.right);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2. 如何判断两棵二叉树是否完全相同？</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean isSameTree(TreeNode root1, TreeNode root2) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 都为空的话，显然相同</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root1 == <span class=\"literal\">null</span> &amp;&amp; root2 == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 一个为空，一个非空，显然不同</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root1 == <span class=\"literal\">null</span> || root2 == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 两个都非空，但 val 不一样也不行</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root1.val != root2.val) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// root1 和 root2 该比的都比完了</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> isSameTree(root1.left, root2.left)</span><br><span class=\"line\">        &amp;&amp; isSameTree(root1.right, root2.right);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>3. 零、判断 BST 的合法性</strong><br>这里是有坑的哦，我们按照刚才的思路，每个节点自己要做的事不就是比较自己和左右孩子吗？看起来应该这样写代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean isValidBST(TreeNode root) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.left != <span class=\"literal\">null</span> &amp;&amp; root.val &lt;= root.left.val) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.right != <span class=\"literal\">null</span> &amp;&amp; root.val &gt;= root.right.val) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> isValidBST(root.left)</span><br><span class=\"line\">        &amp;&amp; isValidBST(root.right);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是这个算法出现了错误，BST 的每个节点应该要小于右边子树的所有节点，下面这个二叉树显然不是 BST，但是我们的算法会把它判定为 BST。<br>我们重新看一下 BST 的定义，root 需要做的不只是和左右子节点比较，而是要整个左子树和右子树所有节点比较。<br>这种情况，我们可以使用辅助函数，增加函数参数列表，在参数中携带额外信息，请看正确的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean isValidBST(TreeNode root) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> isValidBST(root, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">boolean isValidBST(TreeNode root, TreeNode min, TreeNode max) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (min != <span class=\"literal\">null</span> &amp;&amp; root.val &lt;= min.val) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (max != <span class=\"literal\">null</span> &amp;&amp; root.val &gt;= max.val) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> isValidBST(root.left, min, root) </span><br><span class=\"line\">        &amp;&amp; isValidBST(root.right, root, max);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>4. 在 BST 中查找一个数是否存在</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> BST(TreeNode root, int target) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.val == target)</span><br><span class=\"line\">        <span class=\"comment\">// 找到目标，做点什么</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.val &lt; target) </span><br><span class=\"line\">        BST(root.right, target);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.val &gt; target)</span><br><span class=\"line\">        BST(root.left, target);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>5. 在 BST 中插入一个数</strong><br>对数据结构的操作无非遍历 + 访问，遍历就是“找”，访问就是“改”。具体到这个问题，插入一个数，就是先找到插入位置，然后进行插入操作。<br>上一个问题，我们总结了 BST 中的遍历框架，就是“找”的问题。直接套框架，加上“改”的操作即可。一旦涉及“改”，函数就要返回 TreeNode 类型，并且对递归调用的返回值进行接收。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TreeNode insertIntoBST(TreeNode root, int val) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 找到空位置插入新节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TreeNode(val);</span><br><span class=\"line\">    <span class=\"comment\">// if (root.val == val)</span></span><br><span class=\"line\">    <span class=\"comment\">//     BST 中一般不会插入已存在元素</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.val &lt; val) </span><br><span class=\"line\">        root.right = insertIntoBST(root.right, val);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.val &gt; val) </span><br><span class=\"line\">        root.left = insertIntoBST(root.left, val);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>6. 在 BST 中删除一个数</strong><br>这个问题稍微复杂，不过你有框架指导，难不住你。跟插入操作类似，先“找”再“改”，先把框架写出来再说：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TreeNode deleteNode(TreeNode root, int key) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.val == key) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 找到啦，进行删除</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root.val &gt; key) &#123;</span><br><span class=\"line\">        root.left = deleteNode(root.left, key);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root.val &lt; key) &#123;</span><br><span class=\"line\">        root.right = deleteNode(root.right, key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>找到目标节点了，比方说是节点 A，如何删除这个节点，这是难点。因为删除节点的同时不能破坏 BST 的性质。有三种情况，用图片来说明。</p>\n<ol>\n<li>情况 1：A 恰好是末端节点，两个子节点都为空，那么它可以当场去世了。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (root.left == <span class=\"literal\">null</span> &amp;&amp; root.right == <span class=\"literal\">null</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure></li>\n<li>情况 2：A 只有一个非空子节点，那么它要让这个孩子接替自己的位置。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 排除了情况 1 之后</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (root.left == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> root.right;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (root.right == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> root.left;</span><br></pre></td></tr></table></figure></li>\n<li>情况 3：A 有两个子节点，麻烦了，为了不破坏 BST 的性质，A 必须找到左子树中最大的那个节点，或者右子树中最小的那个节点来接替自己。我们以第二种方式讲解。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (root.left != <span class=\"literal\">null</span> &amp;&amp; root.right != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 找到右子树的最小节点</span></span><br><span class=\"line\">    TreeNode minNode = getMin(root.right);</span><br><span class=\"line\">    <span class=\"comment\">// 把 root 改成 minNode</span></span><br><span class=\"line\">    root.val = minNode.val;</span><br><span class=\"line\">    <span class=\"comment\">// 转而去删除 minNode</span></span><br><span class=\"line\">    root.right = deleteNode(root.right, minNode.val);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>简化代码如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TreeNode deleteNode(TreeNode root, int key) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.val == key) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这两个 if 把情况 1 和 2 都正确处理了</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.left == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> root.right;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.right == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> root.left;</span><br><span class=\"line\">        <span class=\"comment\">// 处理情况 3</span></span><br><span class=\"line\">        TreeNode minNode = getMin(root.right);</span><br><span class=\"line\">        root.val = minNode.val;</span><br><span class=\"line\">        root.right = deleteNode(root.right, minNode.val);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root.val &gt; key) &#123;</span><br><span class=\"line\">        root.left = deleteNode(root.left, key);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root.val &lt; key) &#123;</span><br><span class=\"line\">        root.right = deleteNode(root.right, key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">TreeNode getMin(TreeNode node) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// BST 最左边的就是最小的</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (node.left != <span class=\"literal\">null</span>) node = node.left;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注：本文章来源自作者labuladong</p>\n</blockquote>"},{"title":"剑指offer-二叉树的镜像","date":"2020-09-21T10:17:23.000Z","_content":"请完成一个函数，输入一个二叉树，该函数输出它的镜像。\n\n<!--more-->\n> 原题描述访问：https://leetcode-cn.com/problems/er-cha-shu-de-jing-xiang-lcof/\n\n### 递归\n根据二叉树镜像的定义，考虑递归遍历（dfs）二叉树，交换每个节点的左 / 右子节点，即可生成二叉树的镜像。\n```javascript\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {TreeNode}\n */\nvar mirrorTree = function(root) {\n    if(!root || root.length == 0) return null\n    let tmp = root.left\n    root.left = mirrorTree(root.right)\n    root.right = mirrorTree(tmp)\n    return root\n};\n```\n\n### 辅助栈\n利用栈（或队列）遍历树的所有节点 node，并交换每个 node 的左 / 右子节点。\n```javascript\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {TreeNode}\n */\nvar mirrorTree = function(root) {\n    if(!root || root.length == 0) return null\n    let stack = [root]\n    while(stack.length){\n        let node = stack.pop()\n        if(node.left){\n            stack.push(node.left)\n        }\n        if(node.right){\n            stack.push(node.right)\n        }\n        let tmp = node.left\n        node.left = node.right\n        node.right = tmp\n    }\n    return root\n};\n```","source":"_posts/剑指offer-二叉树的镜像.md","raw":"---\ntitle: 剑指offer-二叉树的镜像\ndate: 2020-09-21 18:17:23\ncategories:\n    - 算法与数据结构\ntags:\n    - 递归\n    - bfs\n    - 剑指offer\n---\n请完成一个函数，输入一个二叉树，该函数输出它的镜像。\n\n<!--more-->\n> 原题描述访问：https://leetcode-cn.com/problems/er-cha-shu-de-jing-xiang-lcof/\n\n### 递归\n根据二叉树镜像的定义，考虑递归遍历（dfs）二叉树，交换每个节点的左 / 右子节点，即可生成二叉树的镜像。\n```javascript\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {TreeNode}\n */\nvar mirrorTree = function(root) {\n    if(!root || root.length == 0) return null\n    let tmp = root.left\n    root.left = mirrorTree(root.right)\n    root.right = mirrorTree(tmp)\n    return root\n};\n```\n\n### 辅助栈\n利用栈（或队列）遍历树的所有节点 node，并交换每个 node 的左 / 右子节点。\n```javascript\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {TreeNode}\n */\nvar mirrorTree = function(root) {\n    if(!root || root.length == 0) return null\n    let stack = [root]\n    while(stack.length){\n        let node = stack.pop()\n        if(node.left){\n            stack.push(node.left)\n        }\n        if(node.right){\n            stack.push(node.right)\n        }\n        let tmp = node.left\n        node.left = node.right\n        node.right = tmp\n    }\n    return root\n};\n```","slug":"剑指offer-二叉树的镜像","published":1,"updated":"2020-09-21T10:20:52.764Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmdwh6nxf000y8ubp7hlj2di3","content":"<p>请完成一个函数，输入一个二叉树，该函数输出它的镜像。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>原题描述访问：<a href=\"https://leetcode-cn.com/problems/er-cha-shu-de-jing-xiang-lcof/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/er-cha-shu-de-jing-xiang-lcof/</a></p>\n</blockquote>\n<h3 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h3><p>根据二叉树镜像的定义，考虑递归遍历（dfs）二叉树，交换每个节点的左 / 右子节点，即可生成二叉树的镜像。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;TreeNode&#125;</span> <span class=\"variable\">root</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;TreeNode&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mirrorTree = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!root || root.length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp = root.left</span><br><span class=\"line\">    root.left = mirrorTree(root.right)</span><br><span class=\"line\">    root.right = mirrorTree(tmp)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"辅助栈\"><a href=\"#辅助栈\" class=\"headerlink\" title=\"辅助栈\"></a>辅助栈</h3><p>利用栈（或队列）遍历树的所有节点 node，并交换每个 node 的左 / 右子节点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;TreeNode&#125;</span> <span class=\"variable\">root</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;TreeNode&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mirrorTree = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!root || root.length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> stack = [root]</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(stack.length)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> node = stack.pop()</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(node.left)&#123;</span><br><span class=\"line\">            stack.push(node.left)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(node.right)&#123;</span><br><span class=\"line\">            stack.push(node.right)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> tmp = node.left</span><br><span class=\"line\">        node.left = node.right</span><br><span class=\"line\">        node.right = tmp</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>请完成一个函数，输入一个二叉树，该函数输出它的镜像。</p>","more":"<blockquote>\n<p>原题描述访问：<a href=\"https://leetcode-cn.com/problems/er-cha-shu-de-jing-xiang-lcof/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/er-cha-shu-de-jing-xiang-lcof/</a></p>\n</blockquote>\n<h3 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h3><p>根据二叉树镜像的定义，考虑递归遍历（dfs）二叉树，交换每个节点的左 / 右子节点，即可生成二叉树的镜像。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;TreeNode&#125;</span> <span class=\"variable\">root</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;TreeNode&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mirrorTree = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!root || root.length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp = root.left</span><br><span class=\"line\">    root.left = mirrorTree(root.right)</span><br><span class=\"line\">    root.right = mirrorTree(tmp)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"辅助栈\"><a href=\"#辅助栈\" class=\"headerlink\" title=\"辅助栈\"></a>辅助栈</h3><p>利用栈（或队列）遍历树的所有节点 node，并交换每个 node 的左 / 右子节点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;TreeNode&#125;</span> <span class=\"variable\">root</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;TreeNode&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mirrorTree = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!root || root.length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> stack = [root]</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(stack.length)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> node = stack.pop()</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(node.left)&#123;</span><br><span class=\"line\">            stack.push(node.left)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(node.right)&#123;</span><br><span class=\"line\">            stack.push(node.right)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> tmp = node.left</span><br><span class=\"line\">        node.left = node.right</span><br><span class=\"line\">        node.right = tmp</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"剑指offer-对称的二叉树","date":"2020-09-21T10:21:49.000Z","_content":"请实现一个函数，用来判断一棵二叉树是不是对称的。如果一棵二叉树和它的镜像一样，那么它是对称的。\n\n<!--more-->\n> 原题描述访问：https://leetcode-cn.com/problems/dui-cheng-de-er-cha-shu-lcof/\n\n**思路**\n对于树中 任意两个对称节点L和R 一定有：\n    - L.val=R.val ：即此两对称节点值相等。\n    - L.left.val=R.right.val \n    - L.right.val=R.left.val\n\n**代码**\n```javascript\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar isSymmetric = function(root) {\n    var helper = function(left_root, right_root){\n        if(!left_root && !right_root) return true\n        if(!left_root || !right_root) return false\n        if(left_root.val !== right_root.val) return false\n        return helper(left_root.left, right_root.right) && helper(left_root.right, right_root.left)\n    }\n    return !root ? true : helper(root.left, root.right)\n};\n```","source":"_posts/剑指offer-对称的二叉树.md","raw":"---\ntitle: 剑指offer-对称的二叉树\ndate: 2020-09-21 18:21:49\ncategories:\n    - 算法与数据结构\ntags:\n    - 递归\n    - 剑指offer\n---\n请实现一个函数，用来判断一棵二叉树是不是对称的。如果一棵二叉树和它的镜像一样，那么它是对称的。\n\n<!--more-->\n> 原题描述访问：https://leetcode-cn.com/problems/dui-cheng-de-er-cha-shu-lcof/\n\n**思路**\n对于树中 任意两个对称节点L和R 一定有：\n    - L.val=R.val ：即此两对称节点值相等。\n    - L.left.val=R.right.val \n    - L.right.val=R.left.val\n\n**代码**\n```javascript\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar isSymmetric = function(root) {\n    var helper = function(left_root, right_root){\n        if(!left_root && !right_root) return true\n        if(!left_root || !right_root) return false\n        if(left_root.val !== right_root.val) return false\n        return helper(left_root.left, right_root.right) && helper(left_root.right, right_root.left)\n    }\n    return !root ? true : helper(root.left, root.right)\n};\n```","slug":"剑指offer-对称的二叉树","published":1,"updated":"2020-09-21T10:25:14.007Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmdwh6nxg00108ubp4i0i9jjd","content":"<p>请实现一个函数，用来判断一棵二叉树是不是对称的。如果一棵二叉树和它的镜像一样，那么它是对称的。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>原题描述访问：<a href=\"https://leetcode-cn.com/problems/dui-cheng-de-er-cha-shu-lcof/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/dui-cheng-de-er-cha-shu-lcof/</a></p>\n</blockquote>\n<p><strong>思路</strong><br>对于树中 任意两个对称节点L和R 一定有：<br>    - L.val=R.val ：即此两对称节点值相等。<br>    - L.left.val=R.right.val<br>    - L.right.val=R.left.val</p>\n<p><strong>代码</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;TreeNode&#125;</span> <span class=\"variable\">root</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isSymmetric = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> helper = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">left_root, right_root</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!left_root &amp;&amp; !right_root) <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!left_root || !right_root) <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left_root.val !== right_root.val) <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> helper(left_root.left, right_root.right) &amp;&amp; helper(left_root.right, right_root.left)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !root ? <span class=\"literal\">true</span> : helper(root.left, root.right)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>请实现一个函数，用来判断一棵二叉树是不是对称的。如果一棵二叉树和它的镜像一样，那么它是对称的。</p>","more":"<blockquote>\n<p>原题描述访问：<a href=\"https://leetcode-cn.com/problems/dui-cheng-de-er-cha-shu-lcof/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/dui-cheng-de-er-cha-shu-lcof/</a></p>\n</blockquote>\n<p><strong>思路</strong><br>对于树中 任意两个对称节点L和R 一定有：<br>    - L.val=R.val ：即此两对称节点值相等。<br>    - L.left.val=R.right.val<br>    - L.right.val=R.left.val</p>\n<p><strong>代码</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;TreeNode&#125;</span> <span class=\"variable\">root</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isSymmetric = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> helper = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">left_root, right_root</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!left_root &amp;&amp; !right_root) <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!left_root || !right_root) <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left_root.val !== right_root.val) <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> helper(left_root.left, right_root.right) &amp;&amp; helper(left_root.right, right_root.left)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !root ? <span class=\"literal\">true</span> : helper(root.left, root.right)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"回流和重绘","date":"2020-09-05T15:03:53.000Z","_content":"网页的回流和重绘知识点如下：\n<!--more-->\n1. **回流**\n回流又称之为**重排**，当Render Tree中的一部分（或者全部）因元素的规模，尺寸，布局等改变，而需要重新构建页面，就会触发回流\n具体总结为：\n    - 页面初始渲染\n    - 添加、删除可见的DOM元素\n    - 改变元素位置，尺寸，内容\n触发回流的属性：\n    - 盒子模型相关属性：width、height、display、border、border-width…\n    - 定位及浮动：position、left、right、top、bottom、float、padding、margin…\n    - 文字相关：text-align、overflow、font-weight、font-family、line-height，vertical-align、font-size、white-space…\n2. **重绘**\n当Render Tree中的一些元素需要更新属性，而这些属性只是影响到元素的外观，风格而不影响布局，就会触发重绘\n__回流一定重绘，但是重绘不一定回流__\n触发重绘的属性：\n   - color、border-style、border-radius、outline、visibility、background-color、text-decoration、background、background-image、box-shadow…\n3. 如何减少回流和重绘\n   - 用translate代替top\n   - 用opacity代替visibility\n   - 预先定义好className，然后统一修改Dom的className\n   - 不要把Dom结点的属性值放在一个循环里面变成循环变量\n   - 让要操作的元素进行“离线处理”，处理完后一起更新\n","source":"_posts/回流和重绘.md","raw":"---\ntitle: 回流和重绘\ndate: 2020-09-05 23:03:53\ncategories:\n    - CSS\ntags:\n    - 面试题\n---\n网页的回流和重绘知识点如下：\n<!--more-->\n1. **回流**\n回流又称之为**重排**，当Render Tree中的一部分（或者全部）因元素的规模，尺寸，布局等改变，而需要重新构建页面，就会触发回流\n具体总结为：\n    - 页面初始渲染\n    - 添加、删除可见的DOM元素\n    - 改变元素位置，尺寸，内容\n触发回流的属性：\n    - 盒子模型相关属性：width、height、display、border、border-width…\n    - 定位及浮动：position、left、right、top、bottom、float、padding、margin…\n    - 文字相关：text-align、overflow、font-weight、font-family、line-height，vertical-align、font-size、white-space…\n2. **重绘**\n当Render Tree中的一些元素需要更新属性，而这些属性只是影响到元素的外观，风格而不影响布局，就会触发重绘\n__回流一定重绘，但是重绘不一定回流__\n触发重绘的属性：\n   - color、border-style、border-radius、outline、visibility、background-color、text-decoration、background、background-image、box-shadow…\n3. 如何减少回流和重绘\n   - 用translate代替top\n   - 用opacity代替visibility\n   - 预先定义好className，然后统一修改Dom的className\n   - 不要把Dom结点的属性值放在一个循环里面变成循环变量\n   - 让要操作的元素进行“离线处理”，处理完后一起更新\n","slug":"回流和重绘","published":1,"updated":"2020-09-05T15:16:30.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmdwh6nxh00158ubpdulk1m92","content":"<p>网页的回流和重绘知识点如下：</p>\n<a id=\"more\"></a>\n<ol>\n<li><strong>回流</strong><br>回流又称之为<strong>重排</strong>，当Render Tree中的一部分（或者全部）因元素的规模，尺寸，布局等改变，而需要重新构建页面，就会触发回流<br>具体总结为：<ul>\n<li>页面初始渲染</li>\n<li>添加、删除可见的DOM元素</li>\n<li>改变元素位置，尺寸，内容<br>触发回流的属性：</li>\n<li>盒子模型相关属性：width、height、display、border、border-width…</li>\n<li>定位及浮动：position、left、right、top、bottom、float、padding、margin…</li>\n<li>文字相关：text-align、overflow、font-weight、font-family、line-height，vertical-align、font-size、white-space…</li>\n</ul>\n</li>\n<li><strong>重绘</strong><br>当Render Tree中的一些元素需要更新属性，而这些属性只是影响到元素的外观，风格而不影响布局，就会触发重绘<br><strong>回流一定重绘，但是重绘不一定回流</strong><br>触发重绘的属性：<ul>\n<li>color、border-style、border-radius、outline、visibility、background-color、text-decoration、background、background-image、box-shadow…</li>\n</ul>\n</li>\n<li>如何减少回流和重绘<ul>\n<li>用translate代替top</li>\n<li>用opacity代替visibility</li>\n<li>预先定义好className，然后统一修改Dom的className</li>\n<li>不要把Dom结点的属性值放在一个循环里面变成循环变量</li>\n<li>让要操作的元素进行“离线处理”，处理完后一起更新</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>网页的回流和重绘知识点如下：</p>","more":"<ol>\n<li><strong>回流</strong><br>回流又称之为<strong>重排</strong>，当Render Tree中的一部分（或者全部）因元素的规模，尺寸，布局等改变，而需要重新构建页面，就会触发回流<br>具体总结为：<ul>\n<li>页面初始渲染</li>\n<li>添加、删除可见的DOM元素</li>\n<li>改变元素位置，尺寸，内容<br>触发回流的属性：</li>\n<li>盒子模型相关属性：width、height、display、border、border-width…</li>\n<li>定位及浮动：position、left、right、top、bottom、float、padding、margin…</li>\n<li>文字相关：text-align、overflow、font-weight、font-family、line-height，vertical-align、font-size、white-space…</li>\n</ul>\n</li>\n<li><strong>重绘</strong><br>当Render Tree中的一些元素需要更新属性，而这些属性只是影响到元素的外观，风格而不影响布局，就会触发重绘<br><strong>回流一定重绘，但是重绘不一定回流</strong><br>触发重绘的属性：<ul>\n<li>color、border-style、border-radius、outline、visibility、background-color、text-decoration、background、background-image、box-shadow…</li>\n</ul>\n</li>\n<li>如何减少回流和重绘<ul>\n<li>用translate代替top</li>\n<li>用opacity代替visibility</li>\n<li>预先定义好className，然后统一修改Dom的className</li>\n<li>不要把Dom结点的属性值放在一个循环里面变成循环变量</li>\n<li>让要操作的元素进行“离线处理”，处理完后一起更新</li>\n</ul>\n</li>\n</ol>"},{"title":"剑指offer-重建二叉树","date":"2020-09-21T09:57:55.000Z","_content":"输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。\n\n<!--more-->\n> 原题描述访问：https://leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof/\n\n**代码**\n```javascript\nvar buildTree = function(preorder, inorder) {\n    if(!preorder.length || !inorder.length) return null\n    let root = preorder[0]\n    let node = new TreeNode(root)\n    let idx = inorder.indexOf(root)\n    node.left = buildTree(preorder.slice(1, idx+1), inorder.slice(0, idx))\n    node.right = buildTree(preorder.slice(idx+1), inorder.slice(idx+1))\n    return node\n};\n```","source":"_posts/剑指offer-重建二叉树.md","raw":"---\ntitle: 剑指offer-重建二叉树\ndate: 2020-09-21 17:57:55\ncategories:\n    - 算法与数据结构\ntags:\n    - 二叉树\n    - 递归\n    - 剑指offer\n---\n输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。\n\n<!--more-->\n> 原题描述访问：https://leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof/\n\n**代码**\n```javascript\nvar buildTree = function(preorder, inorder) {\n    if(!preorder.length || !inorder.length) return null\n    let root = preorder[0]\n    let node = new TreeNode(root)\n    let idx = inorder.indexOf(root)\n    node.left = buildTree(preorder.slice(1, idx+1), inorder.slice(0, idx))\n    node.right = buildTree(preorder.slice(idx+1), inorder.slice(idx+1))\n    return node\n};\n```","slug":"剑指offer-重建二叉树","published":1,"updated":"2020-09-21T10:09:45.988Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmdwh6nxi00178ubp48f1c1tt","content":"<p>输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>原题描述访问：<a href=\"https://leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof/</a></p>\n</blockquote>\n<p><strong>代码</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> buildTree = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">preorder, inorder</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!preorder.length || !inorder.length) <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> root = preorder[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> node = <span class=\"keyword\">new</span> TreeNode(root)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> idx = inorder.indexOf(root)</span><br><span class=\"line\">    node.left = buildTree(preorder.slice(<span class=\"number\">1</span>, idx+<span class=\"number\">1</span>), inorder.slice(<span class=\"number\">0</span>, idx))</span><br><span class=\"line\">    node.right = buildTree(preorder.slice(idx+<span class=\"number\">1</span>), inorder.slice(idx+<span class=\"number\">1</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。</p>","more":"<blockquote>\n<p>原题描述访问：<a href=\"https://leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof/</a></p>\n</blockquote>\n<p><strong>代码</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> buildTree = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">preorder, inorder</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!preorder.length || !inorder.length) <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> root = preorder[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> node = <span class=\"keyword\">new</span> TreeNode(root)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> idx = inorder.indexOf(root)</span><br><span class=\"line\">    node.left = buildTree(preorder.slice(<span class=\"number\">1</span>, idx+<span class=\"number\">1</span>), inorder.slice(<span class=\"number\">0</span>, idx))</span><br><span class=\"line\">    node.right = buildTree(preorder.slice(idx+<span class=\"number\">1</span>), inorder.slice(idx+<span class=\"number\">1</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"leetcode-组合总和","date":"2020-09-09T06:44:49.000Z","_content":"给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。\ncandidates 中的数字可以无限制重复被选取。\n<!--more-->\n> 原题描述访问：https://leetcode-cn.com/problems/combinations/\n> 题解转自：https://leetcode-cn.com/problems/combination-sum/solution/shou-hua-tu-jie-zu-he-zong-he-combination-sum-by-x/\n\n**题意**\n给你一个数组，里面都是不带重复的正数，还给你一个 target，求出所有和为 target 的组合。\n元素可以重复使用，但组合不能重复，比如 [2, 2, 3] 与 [2, 3, 2] 是重复的。\n**参考图解**\n![avatar](https://cdn.jsdelivr.net/gh/yc2hang/cdn-assets/photos/combinationsum.png)\n**代码**\n```javascript\nconst combinationSum = (candidates, target) => {\n  const res = [];\n  let sum = 0;\n\n  const dfs = (start, temp) => {\n    if (sum >= target) {\n      if (sum == target) {\n        res.push(temp.slice());\n      }\n      return;  // 结束当前递归\n    }\n    for (let i = start; i < candidates.length; i++) { // 枚举出选择，从start开始\n      sum += candidates[i];     // 累加给sum\n      temp.push(candidates[i]); // 加入“部分解”\n      dfs(i, temp);             // 往下递归，继续选择，注意是i，不是i+1\n      sum -= candidates[i];     // 撤销选择，sum变回来\n      temp.pop();               // 撤销选择\n    }\n  };\n\n  dfs(0, []);\n  return res;\n};\n```\n**总结**\n{% note %}\n回溯：在包含问题的所有的解的空间树中，按DFS的方法，从根节点出发，搜索整棵解空间树。\n\n搜索至任何一个节点时，总是会先判断当前节点是否可以 lead us to a complete solution。如果不可以，则结束对「以当前节点为根节点的子树」的搜索，向父节点回溯，回到之前的状态，搜索下一个分支。\n\n否则，进入该子树，继续以DFS的方式搜索。\n\n空间树中的节点是动态的，当前有哪些节点可选择，是根据上一步的选择（上一步的状态）得出的，所以做回溯时，要把状态还原成进入当前节点之前的状态。\n\n我们在做题时，要确定出问题的解空间树，它是隐式的，不是显式的一棵树。不熟练的就画图看看。\n\n然后，明确每个节点的扩展搜索规则。\n\n然后进行DFS搜索，并注意剪枝，避免无效的搜索。\n{% endnote %}\n\n\n","source":"_posts/leetcode-组合总和.md","raw":"---\ntitle: leetcode-组合总和\ndate: 2020-09-09 14:44:49\ncategories:\n    - 算法与数据结构\ntags:\n    - dfs\n    - 回溯\n    - 递归\n    - leetcode\n---\n给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。\ncandidates 中的数字可以无限制重复被选取。\n<!--more-->\n> 原题描述访问：https://leetcode-cn.com/problems/combinations/\n> 题解转自：https://leetcode-cn.com/problems/combination-sum/solution/shou-hua-tu-jie-zu-he-zong-he-combination-sum-by-x/\n\n**题意**\n给你一个数组，里面都是不带重复的正数，还给你一个 target，求出所有和为 target 的组合。\n元素可以重复使用，但组合不能重复，比如 [2, 2, 3] 与 [2, 3, 2] 是重复的。\n**参考图解**\n![avatar](https://cdn.jsdelivr.net/gh/yc2hang/cdn-assets/photos/combinationsum.png)\n**代码**\n```javascript\nconst combinationSum = (candidates, target) => {\n  const res = [];\n  let sum = 0;\n\n  const dfs = (start, temp) => {\n    if (sum >= target) {\n      if (sum == target) {\n        res.push(temp.slice());\n      }\n      return;  // 结束当前递归\n    }\n    for (let i = start; i < candidates.length; i++) { // 枚举出选择，从start开始\n      sum += candidates[i];     // 累加给sum\n      temp.push(candidates[i]); // 加入“部分解”\n      dfs(i, temp);             // 往下递归，继续选择，注意是i，不是i+1\n      sum -= candidates[i];     // 撤销选择，sum变回来\n      temp.pop();               // 撤销选择\n    }\n  };\n\n  dfs(0, []);\n  return res;\n};\n```\n**总结**\n{% note %}\n回溯：在包含问题的所有的解的空间树中，按DFS的方法，从根节点出发，搜索整棵解空间树。\n\n搜索至任何一个节点时，总是会先判断当前节点是否可以 lead us to a complete solution。如果不可以，则结束对「以当前节点为根节点的子树」的搜索，向父节点回溯，回到之前的状态，搜索下一个分支。\n\n否则，进入该子树，继续以DFS的方式搜索。\n\n空间树中的节点是动态的，当前有哪些节点可选择，是根据上一步的选择（上一步的状态）得出的，所以做回溯时，要把状态还原成进入当前节点之前的状态。\n\n我们在做题时，要确定出问题的解空间树，它是隐式的，不是显式的一棵树。不熟练的就画图看看。\n\n然后，明确每个节点的扩展搜索规则。\n\n然后进行DFS搜索，并注意剪枝，避免无效的搜索。\n{% endnote %}\n\n\n","slug":"leetcode-组合总和","published":1,"updated":"2020-09-09T07:18:21.762Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmdwh6nxk001c8ubp1l22acrr","content":"<p>给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。<br>candidates 中的数字可以无限制重复被选取。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>原题描述访问：<a href=\"https://leetcode-cn.com/problems/combinations/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/combinations/</a><br>题解转自：<a href=\"https://leetcode-cn.com/problems/combination-sum/solution/shou-hua-tu-jie-zu-he-zong-he-combination-sum-by-x/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/combination-sum/solution/shou-hua-tu-jie-zu-he-zong-he-combination-sum-by-x/</a></p>\n</blockquote>\n<p><strong>题意</strong><br>给你一个数组，里面都是不带重复的正数，还给你一个 target，求出所有和为 target 的组合。<br>元素可以重复使用，但组合不能重复，比如 [2, 2, 3] 与 [2, 3, 2] 是重复的。<br><strong>参考图解</strong><br><img src=\"https://cdn.jsdelivr.net/gh/yc2hang/cdn-assets/photos/combinationsum.png\" alt=\"avatar\"><br><strong>代码</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> combinationSum = <span class=\"function\">(<span class=\"params\">candidates, target</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> dfs = <span class=\"function\">(<span class=\"params\">start, temp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sum &gt;= target) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (sum == target) &#123;</span><br><span class=\"line\">        res.push(temp.slice());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;  <span class=\"comment\">// 结束当前递归</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = start; i &lt; candidates.length; i++) &#123; <span class=\"comment\">// 枚举出选择，从start开始</span></span><br><span class=\"line\">      sum += candidates[i];     <span class=\"comment\">// 累加给sum</span></span><br><span class=\"line\">      temp.push(candidates[i]); <span class=\"comment\">// 加入“部分解”</span></span><br><span class=\"line\">      dfs(i, temp);             <span class=\"comment\">// 往下递归，继续选择，注意是i，不是i+1</span></span><br><span class=\"line\">      sum -= candidates[i];     <span class=\"comment\">// 撤销选择，sum变回来</span></span><br><span class=\"line\">      temp.pop();               <span class=\"comment\">// 撤销选择</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  dfs(<span class=\"number\">0</span>, []);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>总结</strong></p>\n<div class=\"note \"><p>回溯：在包含问题的所有的解的空间树中，按DFS的方法，从根节点出发，搜索整棵解空间树。</p>\n<p>搜索至任何一个节点时，总是会先判断当前节点是否可以 lead us to a complete solution。如果不可以，则结束对「以当前节点为根节点的子树」的搜索，向父节点回溯，回到之前的状态，搜索下一个分支。</p>\n<p>否则，进入该子树，继续以DFS的方式搜索。</p>\n<p>空间树中的节点是动态的，当前有哪些节点可选择，是根据上一步的选择（上一步的状态）得出的，所以做回溯时，要把状态还原成进入当前节点之前的状态。</p>\n<p>我们在做题时，要确定出问题的解空间树，它是隐式的，不是显式的一棵树。不熟练的就画图看看。</p>\n<p>然后，明确每个节点的扩展搜索规则。</p>\n<p>然后进行DFS搜索，并注意剪枝，避免无效的搜索。</p></div>\n\n\n","site":{"data":{}},"excerpt":"<p>给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。<br>candidates 中的数字可以无限制重复被选取。</p>","more":"<blockquote>\n<p>原题描述访问：<a href=\"https://leetcode-cn.com/problems/combinations/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/combinations/</a><br>题解转自：<a href=\"https://leetcode-cn.com/problems/combination-sum/solution/shou-hua-tu-jie-zu-he-zong-he-combination-sum-by-x/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/combination-sum/solution/shou-hua-tu-jie-zu-he-zong-he-combination-sum-by-x/</a></p>\n</blockquote>\n<p><strong>题意</strong><br>给你一个数组，里面都是不带重复的正数，还给你一个 target，求出所有和为 target 的组合。<br>元素可以重复使用，但组合不能重复，比如 [2, 2, 3] 与 [2, 3, 2] 是重复的。<br><strong>参考图解</strong><br><img src=\"https://cdn.jsdelivr.net/gh/yc2hang/cdn-assets/photos/combinationsum.png\" alt=\"avatar\"><br><strong>代码</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> combinationSum = <span class=\"function\">(<span class=\"params\">candidates, target</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> dfs = <span class=\"function\">(<span class=\"params\">start, temp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sum &gt;= target) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (sum == target) &#123;</span><br><span class=\"line\">        res.push(temp.slice());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;  <span class=\"comment\">// 结束当前递归</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = start; i &lt; candidates.length; i++) &#123; <span class=\"comment\">// 枚举出选择，从start开始</span></span><br><span class=\"line\">      sum += candidates[i];     <span class=\"comment\">// 累加给sum</span></span><br><span class=\"line\">      temp.push(candidates[i]); <span class=\"comment\">// 加入“部分解”</span></span><br><span class=\"line\">      dfs(i, temp);             <span class=\"comment\">// 往下递归，继续选择，注意是i，不是i+1</span></span><br><span class=\"line\">      sum -= candidates[i];     <span class=\"comment\">// 撤销选择，sum变回来</span></span><br><span class=\"line\">      temp.pop();               <span class=\"comment\">// 撤销选择</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  dfs(<span class=\"number\">0</span>, []);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>总结</strong></p>\n<div class=\"note \"><p>回溯：在包含问题的所有的解的空间树中，按DFS的方法，从根节点出发，搜索整棵解空间树。</p>\n<p>搜索至任何一个节点时，总是会先判断当前节点是否可以 lead us to a complete solution。如果不可以，则结束对「以当前节点为根节点的子树」的搜索，向父节点回溯，回到之前的状态，搜索下一个分支。</p>\n<p>否则，进入该子树，继续以DFS的方式搜索。</p>\n<p>空间树中的节点是动态的，当前有哪些节点可选择，是根据上一步的选择（上一步的状态）得出的，所以做回溯时，要把状态还原成进入当前节点之前的状态。</p>\n<p>我们在做题时，要确定出问题的解空间树，它是隐式的，不是显式的一棵树。不熟练的就画图看看。</p>\n<p>然后，明确每个节点的扩展搜索规则。</p>\n<p>然后进行DFS搜索，并注意剪枝，避免无效的搜索。</p></div>"},{"title":"leetcode-组合总和3","date":"2020-09-11T16:33:43.000Z","_content":"找出所有相加之和为 n 的 k 个数的组合。组合中只允许含有 1 - 9 的正整数，并且每种组合中不存在重复的数字。\n<!--more-->\n> 原题描述访问：https://leetcode-cn.com/problems/combination-sum-iii/\n> 题解转自：https://leetcode-cn.com/problems/combination-sum-iii/solution/shou-hua-tu-jie-216-zu-he-zong-he-iii-by-xiao_ben_/\n\n**题意**\n此题与组合总和1，2相似，解法可参考前面\n**代码**\n```javascript\nconst combinationSum3 = (k, n) => {\n  const res = []; \n\n  const dfs = (start, temp, sum) => {\n    if (temp.length == k) {     // You've selected k numbers. End recursion\n      if (sum == n) {           // The sum of numbers in a combination equals n\n        res.push(temp.slice()); // Add its copy to the solution set\n      }\n      return;\n    }\n    for (let i = start; i <= 9; i++) { // Enumerate the options\n      temp.push(i);                    // Make a choice\n      dfs(i + 1, temp, sum + i);       // Explore\n      temp.pop();                      // Undo the choice\n    }\n  };\n\n  dfs(1, [], 0);  // press the search button\n  return res;\n};\n```\n\n","source":"_posts/leetcode-组合总和3.md","raw":"---\ntitle: leetcode-组合总和3\ndate: 2020-09-12 00:33:43\ncategories:\n    - 算法与数据结构\ntags:\n    - dfs\n    - 回溯\n    - 递归\n    - leetcode\n---\n找出所有相加之和为 n 的 k 个数的组合。组合中只允许含有 1 - 9 的正整数，并且每种组合中不存在重复的数字。\n<!--more-->\n> 原题描述访问：https://leetcode-cn.com/problems/combination-sum-iii/\n> 题解转自：https://leetcode-cn.com/problems/combination-sum-iii/solution/shou-hua-tu-jie-216-zu-he-zong-he-iii-by-xiao_ben_/\n\n**题意**\n此题与组合总和1，2相似，解法可参考前面\n**代码**\n```javascript\nconst combinationSum3 = (k, n) => {\n  const res = []; \n\n  const dfs = (start, temp, sum) => {\n    if (temp.length == k) {     // You've selected k numbers. End recursion\n      if (sum == n) {           // The sum of numbers in a combination equals n\n        res.push(temp.slice()); // Add its copy to the solution set\n      }\n      return;\n    }\n    for (let i = start; i <= 9; i++) { // Enumerate the options\n      temp.push(i);                    // Make a choice\n      dfs(i + 1, temp, sum + i);       // Explore\n      temp.pop();                      // Undo the choice\n    }\n  };\n\n  dfs(1, [], 0);  // press the search button\n  return res;\n};\n```\n\n","slug":"leetcode-组合总和3","published":1,"updated":"2020-09-11T16:36:01.240Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmdwh6nxl001f8ubpghev3jzf","content":"<p>找出所有相加之和为 n 的 k 个数的组合。组合中只允许含有 1 - 9 的正整数，并且每种组合中不存在重复的数字。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>原题描述访问：<a href=\"https://leetcode-cn.com/problems/combination-sum-iii/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/combination-sum-iii/</a><br>题解转自：<a href=\"https://leetcode-cn.com/problems/combination-sum-iii/solution/shou-hua-tu-jie-216-zu-he-zong-he-iii-by-xiao_ben_/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/combination-sum-iii/solution/shou-hua-tu-jie-216-zu-he-zong-he-iii-by-xiao_ben_/</a></p>\n</blockquote>\n<p><strong>题意</strong><br>此题与组合总和1，2相似，解法可参考前面<br><strong>代码</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> combinationSum3 = <span class=\"function\">(<span class=\"params\">k, n</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = []; </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> dfs = <span class=\"function\">(<span class=\"params\">start, temp, sum</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (temp.length == k) &#123;     <span class=\"comment\">// You've selected k numbers. End recursion</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (sum == n) &#123;           <span class=\"comment\">// The sum of numbers in a combination equals n</span></span><br><span class=\"line\">        res.push(temp.slice()); <span class=\"comment\">// Add its copy to the solution set</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = start; i &lt;= <span class=\"number\">9</span>; i++) &#123; <span class=\"comment\">// Enumerate the options</span></span><br><span class=\"line\">      temp.push(i);                    <span class=\"comment\">// Make a choice</span></span><br><span class=\"line\">      dfs(i + <span class=\"number\">1</span>, temp, sum + i);       <span class=\"comment\">// Explore</span></span><br><span class=\"line\">      temp.pop();                      <span class=\"comment\">// Undo the choice</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  dfs(<span class=\"number\">1</span>, [], <span class=\"number\">0</span>);  <span class=\"comment\">// press the search button</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>找出所有相加之和为 n 的 k 个数的组合。组合中只允许含有 1 - 9 的正整数，并且每种组合中不存在重复的数字。</p>","more":"<blockquote>\n<p>原题描述访问：<a href=\"https://leetcode-cn.com/problems/combination-sum-iii/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/combination-sum-iii/</a><br>题解转自：<a href=\"https://leetcode-cn.com/problems/combination-sum-iii/solution/shou-hua-tu-jie-216-zu-he-zong-he-iii-by-xiao_ben_/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/combination-sum-iii/solution/shou-hua-tu-jie-216-zu-he-zong-he-iii-by-xiao_ben_/</a></p>\n</blockquote>\n<p><strong>题意</strong><br>此题与组合总和1，2相似，解法可参考前面<br><strong>代码</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> combinationSum3 = <span class=\"function\">(<span class=\"params\">k, n</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = []; </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> dfs = <span class=\"function\">(<span class=\"params\">start, temp, sum</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (temp.length == k) &#123;     <span class=\"comment\">// You've selected k numbers. End recursion</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (sum == n) &#123;           <span class=\"comment\">// The sum of numbers in a combination equals n</span></span><br><span class=\"line\">        res.push(temp.slice()); <span class=\"comment\">// Add its copy to the solution set</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = start; i &lt;= <span class=\"number\">9</span>; i++) &#123; <span class=\"comment\">// Enumerate the options</span></span><br><span class=\"line\">      temp.push(i);                    <span class=\"comment\">// Make a choice</span></span><br><span class=\"line\">      dfs(i + <span class=\"number\">1</span>, temp, sum + i);       <span class=\"comment\">// Explore</span></span><br><span class=\"line\">      temp.pop();                      <span class=\"comment\">// Undo the choice</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  dfs(<span class=\"number\">1</span>, [], <span class=\"number\">0</span>);  <span class=\"comment\">// press the search button</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"多个按钮单击事件","date":"2020-09-04T17:34:01.000Z","_content":"关于多个按钮单击弹出结果面试题考察分析如下：\n<!--more-->\n- 题目部分代码片段如下\n```javascript\nvar btnBox = document.getElementById('btnBox')\nvar inputs = btnBox.getElementsByTagName('input')\nvar l = inputs.length\nfor(var i=0;i<l;i++){ // 点击时候循环已结束， i = 5\n    inputs[i].click = function(){\n        alert(i)\n    }\n}\n```\n- 以上题目涉及到如下知识\n  - **所有的事件绑定都是异步编程**（绑定的时候方法并没有执行），当点击触发的时候，循环早已经结束\n    - 同步：Js中当前任务没有完成，之后的任务不会执行\n    - 异步：Js中当前任务没有完成，可以继续执行其他任务\n\n- 三种解决方案如下：\n    1. 自定义属性\n```javascript\nfor(var i=0;i<l;i++){\n    inputs[i].MyIndex = i\n    inputs[i].click = function(){\n        alert(this..MyIndex)\n    }\n}\n```\n    2. 闭包\n```javascript\nfor(var i=0;i<l;i++){\n    ~(function(i){\n        inputs[i].click = function(){\n            alert(this..MyIndex)\n        }\n    })(i)\n}\n// 另一种写法, 形成多个不销毁的闭包，性能不好\nfor(var i=0;i<l;i++){\n    inputs[i].click = (function(i){\n        return function(){\n            alert(i)\n        }\n    })(i)\n}\n```\n    3. ES6（块级作用域）\n```javascript\nfor(let i=0;i<l;i++){\n    inputs[i].click = function(){\n        alert(i)\n    }\n}\n```\n","source":"_posts/多个按钮单击事件.md","raw":"---\ntitle: 多个按钮单击事件\ndate: 2020-09-05 01:34:01\ncategories:\n    - JavaScript\ntags:\n    - 面试题\n---\n关于多个按钮单击弹出结果面试题考察分析如下：\n<!--more-->\n- 题目部分代码片段如下\n```javascript\nvar btnBox = document.getElementById('btnBox')\nvar inputs = btnBox.getElementsByTagName('input')\nvar l = inputs.length\nfor(var i=0;i<l;i++){ // 点击时候循环已结束， i = 5\n    inputs[i].click = function(){\n        alert(i)\n    }\n}\n```\n- 以上题目涉及到如下知识\n  - **所有的事件绑定都是异步编程**（绑定的时候方法并没有执行），当点击触发的时候，循环早已经结束\n    - 同步：Js中当前任务没有完成，之后的任务不会执行\n    - 异步：Js中当前任务没有完成，可以继续执行其他任务\n\n- 三种解决方案如下：\n    1. 自定义属性\n```javascript\nfor(var i=0;i<l;i++){\n    inputs[i].MyIndex = i\n    inputs[i].click = function(){\n        alert(this..MyIndex)\n    }\n}\n```\n    2. 闭包\n```javascript\nfor(var i=0;i<l;i++){\n    ~(function(i){\n        inputs[i].click = function(){\n            alert(this..MyIndex)\n        }\n    })(i)\n}\n// 另一种写法, 形成多个不销毁的闭包，性能不好\nfor(var i=0;i<l;i++){\n    inputs[i].click = (function(i){\n        return function(){\n            alert(i)\n        }\n    })(i)\n}\n```\n    3. ES6（块级作用域）\n```javascript\nfor(let i=0;i<l;i++){\n    inputs[i].click = function(){\n        alert(i)\n    }\n}\n```\n","slug":"多个按钮单击事件","published":1,"updated":"2020-09-05T15:17:28.450Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmdwh6nxm001k8ubpc40d5vlg","content":"<p>关于多个按钮单击弹出结果面试题考察分析如下：</p>\n<a id=\"more\"></a>\n<ul>\n<li><p>题目部分代码片段如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btnBox = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btnBox'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> inputs = btnBox.getElementsByTagName(<span class=\"string\">'input'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> l = inputs.length</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;l;i++)&#123; <span class=\"comment\">// 点击时候循环已结束， i = 5</span></span><br><span class=\"line\">    inputs[i].click = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        alert(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>以上题目涉及到如下知识</p>\n<ul>\n<li><strong>所有的事件绑定都是异步编程</strong>（绑定的时候方法并没有执行），当点击触发的时候，循环早已经结束<ul>\n<li>同步：Js中当前任务没有完成，之后的任务不会执行</li>\n<li>异步：Js中当前任务没有完成，可以继续执行其他任务</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>三种解决方案如下：</p>\n<ol>\n<li>自定义属性<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;l;i++)&#123;</span><br><span class=\"line\">    inputs[i].MyIndex = i</span><br><span class=\"line\">    inputs[i].click = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>..MyIndex)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>闭包<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;l;i++)&#123;</span><br><span class=\"line\">    ~(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>)</span>&#123;</span><br><span class=\"line\">        inputs[i].click = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            alert(<span class=\"keyword\">this</span>..MyIndex)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 另一种写法, 形成多个不销毁的闭包，性能不好</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;l;i++)&#123;</span><br><span class=\"line\">    inputs[i].click = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            alert(i)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>ES6（块级作用域）<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;l;i++)&#123;</span><br><span class=\"line\">    inputs[i].click = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        alert(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>关于多个按钮单击弹出结果面试题考察分析如下：</p>","more":"<ul>\n<li><p>题目部分代码片段如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btnBox = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btnBox'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> inputs = btnBox.getElementsByTagName(<span class=\"string\">'input'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> l = inputs.length</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;l;i++)&#123; <span class=\"comment\">// 点击时候循环已结束， i = 5</span></span><br><span class=\"line\">    inputs[i].click = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        alert(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>以上题目涉及到如下知识</p>\n<ul>\n<li><strong>所有的事件绑定都是异步编程</strong>（绑定的时候方法并没有执行），当点击触发的时候，循环早已经结束<ul>\n<li>同步：Js中当前任务没有完成，之后的任务不会执行</li>\n<li>异步：Js中当前任务没有完成，可以继续执行其他任务</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>三种解决方案如下：</p>\n<ol>\n<li>自定义属性<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;l;i++)&#123;</span><br><span class=\"line\">    inputs[i].MyIndex = i</span><br><span class=\"line\">    inputs[i].click = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>..MyIndex)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>闭包<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;l;i++)&#123;</span><br><span class=\"line\">    ~(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>)</span>&#123;</span><br><span class=\"line\">        inputs[i].click = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            alert(<span class=\"keyword\">this</span>..MyIndex)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 另一种写法, 形成多个不销毁的闭包，性能不好</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;l;i++)&#123;</span><br><span class=\"line\">    inputs[i].click = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            alert(i)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>ES6（块级作用域）<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;l;i++)&#123;</span><br><span class=\"line\">    inputs[i].click = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        alert(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>"},{"title":"leetcode-组合总和2","date":"2020-09-11T14:40:54.000Z","_content":"给定一个数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。\ncandidates 中的每个数字在每个组合中只能使用一次。\n<!--more-->\n> 原题描述访问：https://leetcode-cn.com/problems/combination-sum-ii/\n> 题解转自：https://leetcode-cn.com/problems/combination-sum-ii/solution/man-tan-wo-li-jie-de-hui-su-chang-wen-shou-hua-tu-/\n\n**思路**\n以 [2,5,2,1,2], target = 5 为例。\n\n每个节点都作出选择，选一个数，看看下一个选择受到哪些限制：选过的不能再选，且不能产生相同的组合。去做剪枝（如下图所标）。\n\n当和为 target，找到一个正确的解，加入解集。且当和 >= target，已经爆掉了，不用继续选了，结束当前递归，继续搜别的分支，找齐所有的解。\n\n因此，回到上一个节点，撤销当前选择的数字，去进入下一个分支。\n**与组合总和区别**\n- 组合总和：元素可以重复使用，组合不能重复。\n- 本题：元素不可以重复使用，组合不能重复。\n\n本题只需改动三点：\n1. 给定的数组可能有重复的元素，先排序，使得重复的数字相邻，方便去重。\n2. for 循环枚举出选项时，加入下面判断，忽略掉同一层重复的选项，避免产生重复的组合。比如[1,2,2,2,5]中，选了第一个 2，变成 [1,2]，第一个 2 的下一选项也是 2，跳过它，因为选它，就还是 [1,2]。\n```javascript\nif (candidates[i - 1] == candidates[i] && i - 1 >= start) {\n    continue;\n}\n```\n3. 当前选择的数字不能和下一个选择的数字重复，递归传入i+1，避免与当前选的i重复，这样每次选，就不会选过往选过的同一个数。\n```javascript\ndfs(i + 1, temp, sum + candidates[i]);\n```\n**代码**\n```javascript\nconst combinationSum2 = (candidates, target) => {\n  candidates.sort();    // 排序\n  const res = [];\n\n  const dfs = (start, temp, sum) => { // start是索引 当前选择范围的第一个\n    if (sum >= target) {        // 爆掉了，不用继续选了\n      if (sum == target) {      // 满足条件，加入解集\n        res.push(temp.slice()); // temp是地址引用，后续还要用，所以拷贝一份\n      }\n      return;                   // 结束当前递归\n    }\n    for (let i = start; i < candidates.length; i++) {             // 枚举出选择\n      if (candidates[i - 1] == candidates[i] && i - 1 >= start) { // 当前选项和隔壁选项一样，跳过\n        continue;\n      }\n      temp.push(candidates[i]);              // 作出选择\n      dfs(i + 1, temp, sum + candidates[i]); // 递归，向下选择，并更新sum\n      temp.pop();                            // 撤销选择，\n    }\n  };\n\n  dfs(0, [], 0);\n  return res;\n};\n```","source":"_posts/leetcode-组合总和2.md","raw":"---\ntitle: leetcode-组合总和2\ndate: 2020-09-11 22:40:54\ncategories:\n    - 算法与数据结构\ntags:\n    - dfs\n    - 回溯\n    - 递归\n    - leetcode\n---\n给定一个数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。\ncandidates 中的每个数字在每个组合中只能使用一次。\n<!--more-->\n> 原题描述访问：https://leetcode-cn.com/problems/combination-sum-ii/\n> 题解转自：https://leetcode-cn.com/problems/combination-sum-ii/solution/man-tan-wo-li-jie-de-hui-su-chang-wen-shou-hua-tu-/\n\n**思路**\n以 [2,5,2,1,2], target = 5 为例。\n\n每个节点都作出选择，选一个数，看看下一个选择受到哪些限制：选过的不能再选，且不能产生相同的组合。去做剪枝（如下图所标）。\n\n当和为 target，找到一个正确的解，加入解集。且当和 >= target，已经爆掉了，不用继续选了，结束当前递归，继续搜别的分支，找齐所有的解。\n\n因此，回到上一个节点，撤销当前选择的数字，去进入下一个分支。\n**与组合总和区别**\n- 组合总和：元素可以重复使用，组合不能重复。\n- 本题：元素不可以重复使用，组合不能重复。\n\n本题只需改动三点：\n1. 给定的数组可能有重复的元素，先排序，使得重复的数字相邻，方便去重。\n2. for 循环枚举出选项时，加入下面判断，忽略掉同一层重复的选项，避免产生重复的组合。比如[1,2,2,2,5]中，选了第一个 2，变成 [1,2]，第一个 2 的下一选项也是 2，跳过它，因为选它，就还是 [1,2]。\n```javascript\nif (candidates[i - 1] == candidates[i] && i - 1 >= start) {\n    continue;\n}\n```\n3. 当前选择的数字不能和下一个选择的数字重复，递归传入i+1，避免与当前选的i重复，这样每次选，就不会选过往选过的同一个数。\n```javascript\ndfs(i + 1, temp, sum + candidates[i]);\n```\n**代码**\n```javascript\nconst combinationSum2 = (candidates, target) => {\n  candidates.sort();    // 排序\n  const res = [];\n\n  const dfs = (start, temp, sum) => { // start是索引 当前选择范围的第一个\n    if (sum >= target) {        // 爆掉了，不用继续选了\n      if (sum == target) {      // 满足条件，加入解集\n        res.push(temp.slice()); // temp是地址引用，后续还要用，所以拷贝一份\n      }\n      return;                   // 结束当前递归\n    }\n    for (let i = start; i < candidates.length; i++) {             // 枚举出选择\n      if (candidates[i - 1] == candidates[i] && i - 1 >= start) { // 当前选项和隔壁选项一样，跳过\n        continue;\n      }\n      temp.push(candidates[i]);              // 作出选择\n      dfs(i + 1, temp, sum + candidates[i]); // 递归，向下选择，并更新sum\n      temp.pop();                            // 撤销选择，\n    }\n  };\n\n  dfs(0, [], 0);\n  return res;\n};\n```","slug":"leetcode-组合总和2","published":1,"updated":"2020-09-11T14:47:33.989Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmdwh6nxm001n8ubphgqybda0","content":"<p>给定一个数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。<br>candidates 中的每个数字在每个组合中只能使用一次。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>原题描述访问：<a href=\"https://leetcode-cn.com/problems/combination-sum-ii/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/combination-sum-ii/</a><br>题解转自：<a href=\"https://leetcode-cn.com/problems/combination-sum-ii/solution/man-tan-wo-li-jie-de-hui-su-chang-wen-shou-hua-tu-/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/combination-sum-ii/solution/man-tan-wo-li-jie-de-hui-su-chang-wen-shou-hua-tu-/</a></p>\n</blockquote>\n<p><strong>思路</strong><br>以 [2,5,2,1,2], target = 5 为例。</p>\n<p>每个节点都作出选择，选一个数，看看下一个选择受到哪些限制：选过的不能再选，且不能产生相同的组合。去做剪枝（如下图所标）。</p>\n<p>当和为 target，找到一个正确的解，加入解集。且当和 &gt;= target，已经爆掉了，不用继续选了，结束当前递归，继续搜别的分支，找齐所有的解。</p>\n<p>因此，回到上一个节点，撤销当前选择的数字，去进入下一个分支。<br><strong>与组合总和区别</strong></p>\n<ul>\n<li>组合总和：元素可以重复使用，组合不能重复。</li>\n<li>本题：元素不可以重复使用，组合不能重复。</li>\n</ul>\n<p>本题只需改动三点：</p>\n<ol>\n<li>给定的数组可能有重复的元素，先排序，使得重复的数字相邻，方便去重。</li>\n<li>for 循环枚举出选项时，加入下面判断，忽略掉同一层重复的选项，避免产生重复的组合。比如[1,2,2,2,5]中，选了第一个 2，变成 [1,2]，第一个 2 的下一选项也是 2，跳过它，因为选它，就还是 [1,2]。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (candidates[i - <span class=\"number\">1</span>] == candidates[i] &amp;&amp; i - <span class=\"number\">1</span> &gt;= start) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>当前选择的数字不能和下一个选择的数字重复，递归传入i+1，避免与当前选的i重复，这样每次选，就不会选过往选过的同一个数。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dfs(i + <span class=\"number\">1</span>, temp, sum + candidates[i]);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>代码</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> combinationSum2 = <span class=\"function\">(<span class=\"params\">candidates, target</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  candidates.sort();    <span class=\"comment\">// 排序</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> dfs = <span class=\"function\">(<span class=\"params\">start, temp, sum</span>) =&gt;</span> &#123; <span class=\"comment\">// start是索引 当前选择范围的第一个</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sum &gt;= target) &#123;        <span class=\"comment\">// 爆掉了，不用继续选了</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (sum == target) &#123;      <span class=\"comment\">// 满足条件，加入解集</span></span><br><span class=\"line\">        res.push(temp.slice()); <span class=\"comment\">// temp是地址引用，后续还要用，所以拷贝一份</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;                   <span class=\"comment\">// 结束当前递归</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = start; i &lt; candidates.length; i++) &#123;             <span class=\"comment\">// 枚举出选择</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (candidates[i - <span class=\"number\">1</span>] == candidates[i] &amp;&amp; i - <span class=\"number\">1</span> &gt;= start) &#123; <span class=\"comment\">// 当前选项和隔壁选项一样，跳过</span></span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      temp.push(candidates[i]);              <span class=\"comment\">// 作出选择</span></span><br><span class=\"line\">      dfs(i + <span class=\"number\">1</span>, temp, sum + candidates[i]); <span class=\"comment\">// 递归，向下选择，并更新sum</span></span><br><span class=\"line\">      temp.pop();                            <span class=\"comment\">// 撤销选择，</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  dfs(<span class=\"number\">0</span>, [], <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>给定一个数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。<br>candidates 中的每个数字在每个组合中只能使用一次。</p>","more":"<blockquote>\n<p>原题描述访问：<a href=\"https://leetcode-cn.com/problems/combination-sum-ii/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/combination-sum-ii/</a><br>题解转自：<a href=\"https://leetcode-cn.com/problems/combination-sum-ii/solution/man-tan-wo-li-jie-de-hui-su-chang-wen-shou-hua-tu-/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/combination-sum-ii/solution/man-tan-wo-li-jie-de-hui-su-chang-wen-shou-hua-tu-/</a></p>\n</blockquote>\n<p><strong>思路</strong><br>以 [2,5,2,1,2], target = 5 为例。</p>\n<p>每个节点都作出选择，选一个数，看看下一个选择受到哪些限制：选过的不能再选，且不能产生相同的组合。去做剪枝（如下图所标）。</p>\n<p>当和为 target，找到一个正确的解，加入解集。且当和 &gt;= target，已经爆掉了，不用继续选了，结束当前递归，继续搜别的分支，找齐所有的解。</p>\n<p>因此，回到上一个节点，撤销当前选择的数字，去进入下一个分支。<br><strong>与组合总和区别</strong></p>\n<ul>\n<li>组合总和：元素可以重复使用，组合不能重复。</li>\n<li>本题：元素不可以重复使用，组合不能重复。</li>\n</ul>\n<p>本题只需改动三点：</p>\n<ol>\n<li>给定的数组可能有重复的元素，先排序，使得重复的数字相邻，方便去重。</li>\n<li>for 循环枚举出选项时，加入下面判断，忽略掉同一层重复的选项，避免产生重复的组合。比如[1,2,2,2,5]中，选了第一个 2，变成 [1,2]，第一个 2 的下一选项也是 2，跳过它，因为选它，就还是 [1,2]。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (candidates[i - <span class=\"number\">1</span>] == candidates[i] &amp;&amp; i - <span class=\"number\">1</span> &gt;= start) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>当前选择的数字不能和下一个选择的数字重复，递归传入i+1，避免与当前选的i重复，这样每次选，就不会选过往选过的同一个数。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dfs(i + <span class=\"number\">1</span>, temp, sum + candidates[i]);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>代码</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> combinationSum2 = <span class=\"function\">(<span class=\"params\">candidates, target</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  candidates.sort();    <span class=\"comment\">// 排序</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> dfs = <span class=\"function\">(<span class=\"params\">start, temp, sum</span>) =&gt;</span> &#123; <span class=\"comment\">// start是索引 当前选择范围的第一个</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sum &gt;= target) &#123;        <span class=\"comment\">// 爆掉了，不用继续选了</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (sum == target) &#123;      <span class=\"comment\">// 满足条件，加入解集</span></span><br><span class=\"line\">        res.push(temp.slice()); <span class=\"comment\">// temp是地址引用，后续还要用，所以拷贝一份</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;                   <span class=\"comment\">// 结束当前递归</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = start; i &lt; candidates.length; i++) &#123;             <span class=\"comment\">// 枚举出选择</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (candidates[i - <span class=\"number\">1</span>] == candidates[i] &amp;&amp; i - <span class=\"number\">1</span> &gt;= start) &#123; <span class=\"comment\">// 当前选项和隔壁选项一样，跳过</span></span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      temp.push(candidates[i]);              <span class=\"comment\">// 作出选择</span></span><br><span class=\"line\">      dfs(i + <span class=\"number\">1</span>, temp, sum + candidates[i]); <span class=\"comment\">// 递归，向下选择，并更新sum</span></span><br><span class=\"line\">      temp.pop();                            <span class=\"comment\">// 撤销选择，</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  dfs(<span class=\"number\">0</span>, [], <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"回溯算法","date":"2020-09-11T14:47:56.000Z","_content":"回溯跟递归，深度搜索遍历结合使用，是非常普遍的算法思路。下面介绍回溯思路\n\n<!--more-->\n> 转自题解：https://leetcode-cn.com/problems/combination-sum-ii/solution/man-tan-wo-li-jie-de-hui-su-chang-wen-shou-hua-tu-/\n\n### 回溯的要素\n我们关心，当前局面下，我们有什么选择，作了一个选择之后，下一个选择会有什么限制。\n\n解空间树的节点是动态的，当前的选择决定了下一个选择是怎么展开的。\n\n所以，不仅要关注 options，还要关注 restraints 约束。\n\n前者用于展开出一棵解的空间树，后者用于为这棵树剪枝，剪去不能产生正确解的节点，避免无效搜索。\n\n第三个要素：目标（结束条件），明确了目标，就知道何时去将解加入解集。\n\n并且让你知道：探索到某一步时，发现当前的部分解不能通向正确的完整解，搜下去没有意义。\n\n此时回退一步，撤销当前的选择，回到上一个选择的状态，做别的选择。\n\n此路不通，退回去，尝试别的路，是一个「choose, explore, unchoose」的过程。\n### 套路做法\n1. 用 for 循环去枚举出所有的选择\n2. 做出一个选择\n3. 基于这个选择，继续往下选择（递归）\n4. 上面的递归结束了，撤销这个选择，进入 for 循环的下一次迭代\n\n### 回溯与嵌套循环\n回溯是一种算法，递归不是算法，是一种计算机解决问题的方式。\n\n回溯是借助递归实现的。如果回溯不借助递归，它只能借助循环。\n\n用 for 循环枚举出当前的选项，选了一个，选下一个，又要嵌套一层循环，枚举出可选的选项。\n\n如果要选很多个，就导致多重的循环嵌套，很费力也很丑。\n\n于是借助递归解决，因为递归和子递归就是层级嵌套的关系。\n\n而且，树在结构上，具有高度的重复性，每一个节点，都是当前子树的根节点，调用递归函数负责当前子树的搜索。\n\n### 虚拟的解空间树\n回溯算法并没有显式地创建数据结构，也不是基于已有的数据结构做搜索。\n\n它是隐式地，通过递归，构建出一棵解的空间树。这个空间树中包含了所有的解。\n\n然后通过 dfs 的搜索方式，把解给全部找出来。\n\n如果说它难，应该难在确定出容易搜索（经过充分的剪枝）的解空间结构，剩下的 dfs 和回溯就比较简单了。","source":"_posts/回溯算法.md","raw":"---\ntitle: 回溯算法\ndate: 2020-09-11 22:47:56\ncategories:\n    - 算法与数据结构\ntags:\n    - 回溯\n    - 递归\n    - dfs\n---\n回溯跟递归，深度搜索遍历结合使用，是非常普遍的算法思路。下面介绍回溯思路\n\n<!--more-->\n> 转自题解：https://leetcode-cn.com/problems/combination-sum-ii/solution/man-tan-wo-li-jie-de-hui-su-chang-wen-shou-hua-tu-/\n\n### 回溯的要素\n我们关心，当前局面下，我们有什么选择，作了一个选择之后，下一个选择会有什么限制。\n\n解空间树的节点是动态的，当前的选择决定了下一个选择是怎么展开的。\n\n所以，不仅要关注 options，还要关注 restraints 约束。\n\n前者用于展开出一棵解的空间树，后者用于为这棵树剪枝，剪去不能产生正确解的节点，避免无效搜索。\n\n第三个要素：目标（结束条件），明确了目标，就知道何时去将解加入解集。\n\n并且让你知道：探索到某一步时，发现当前的部分解不能通向正确的完整解，搜下去没有意义。\n\n此时回退一步，撤销当前的选择，回到上一个选择的状态，做别的选择。\n\n此路不通，退回去，尝试别的路，是一个「choose, explore, unchoose」的过程。\n### 套路做法\n1. 用 for 循环去枚举出所有的选择\n2. 做出一个选择\n3. 基于这个选择，继续往下选择（递归）\n4. 上面的递归结束了，撤销这个选择，进入 for 循环的下一次迭代\n\n### 回溯与嵌套循环\n回溯是一种算法，递归不是算法，是一种计算机解决问题的方式。\n\n回溯是借助递归实现的。如果回溯不借助递归，它只能借助循环。\n\n用 for 循环枚举出当前的选项，选了一个，选下一个，又要嵌套一层循环，枚举出可选的选项。\n\n如果要选很多个，就导致多重的循环嵌套，很费力也很丑。\n\n于是借助递归解决，因为递归和子递归就是层级嵌套的关系。\n\n而且，树在结构上，具有高度的重复性，每一个节点，都是当前子树的根节点，调用递归函数负责当前子树的搜索。\n\n### 虚拟的解空间树\n回溯算法并没有显式地创建数据结构，也不是基于已有的数据结构做搜索。\n\n它是隐式地，通过递归，构建出一棵解的空间树。这个空间树中包含了所有的解。\n\n然后通过 dfs 的搜索方式，把解给全部找出来。\n\n如果说它难，应该难在确定出容易搜索（经过充分的剪枝）的解空间结构，剩下的 dfs 和回溯就比较简单了。","slug":"回溯算法","published":1,"updated":"2020-09-11T14:55:04.219Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmdwh6nxo001s8ubp5h7s7v3e","content":"<p>回溯跟递归，深度搜索遍历结合使用，是非常普遍的算法思路。下面介绍回溯思路</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>转自题解：<a href=\"https://leetcode-cn.com/problems/combination-sum-ii/solution/man-tan-wo-li-jie-de-hui-su-chang-wen-shou-hua-tu-/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/combination-sum-ii/solution/man-tan-wo-li-jie-de-hui-su-chang-wen-shou-hua-tu-/</a></p>\n</blockquote>\n<h3 id=\"回溯的要素\"><a href=\"#回溯的要素\" class=\"headerlink\" title=\"回溯的要素\"></a>回溯的要素</h3><p>我们关心，当前局面下，我们有什么选择，作了一个选择之后，下一个选择会有什么限制。</p>\n<p>解空间树的节点是动态的，当前的选择决定了下一个选择是怎么展开的。</p>\n<p>所以，不仅要关注 options，还要关注 restraints 约束。</p>\n<p>前者用于展开出一棵解的空间树，后者用于为这棵树剪枝，剪去不能产生正确解的节点，避免无效搜索。</p>\n<p>第三个要素：目标（结束条件），明确了目标，就知道何时去将解加入解集。</p>\n<p>并且让你知道：探索到某一步时，发现当前的部分解不能通向正确的完整解，搜下去没有意义。</p>\n<p>此时回退一步，撤销当前的选择，回到上一个选择的状态，做别的选择。</p>\n<p>此路不通，退回去，尝试别的路，是一个「choose, explore, unchoose」的过程。</p>\n<h3 id=\"套路做法\"><a href=\"#套路做法\" class=\"headerlink\" title=\"套路做法\"></a>套路做法</h3><ol>\n<li>用 for 循环去枚举出所有的选择</li>\n<li>做出一个选择</li>\n<li>基于这个选择，继续往下选择（递归）</li>\n<li>上面的递归结束了，撤销这个选择，进入 for 循环的下一次迭代</li>\n</ol>\n<h3 id=\"回溯与嵌套循环\"><a href=\"#回溯与嵌套循环\" class=\"headerlink\" title=\"回溯与嵌套循环\"></a>回溯与嵌套循环</h3><p>回溯是一种算法，递归不是算法，是一种计算机解决问题的方式。</p>\n<p>回溯是借助递归实现的。如果回溯不借助递归，它只能借助循环。</p>\n<p>用 for 循环枚举出当前的选项，选了一个，选下一个，又要嵌套一层循环，枚举出可选的选项。</p>\n<p>如果要选很多个，就导致多重的循环嵌套，很费力也很丑。</p>\n<p>于是借助递归解决，因为递归和子递归就是层级嵌套的关系。</p>\n<p>而且，树在结构上，具有高度的重复性，每一个节点，都是当前子树的根节点，调用递归函数负责当前子树的搜索。</p>\n<h3 id=\"虚拟的解空间树\"><a href=\"#虚拟的解空间树\" class=\"headerlink\" title=\"虚拟的解空间树\"></a>虚拟的解空间树</h3><p>回溯算法并没有显式地创建数据结构，也不是基于已有的数据结构做搜索。</p>\n<p>它是隐式地，通过递归，构建出一棵解的空间树。这个空间树中包含了所有的解。</p>\n<p>然后通过 dfs 的搜索方式，把解给全部找出来。</p>\n<p>如果说它难，应该难在确定出容易搜索（经过充分的剪枝）的解空间结构，剩下的 dfs 和回溯就比较简单了。</p>\n","site":{"data":{}},"excerpt":"<p>回溯跟递归，深度搜索遍历结合使用，是非常普遍的算法思路。下面介绍回溯思路</p>","more":"<blockquote>\n<p>转自题解：<a href=\"https://leetcode-cn.com/problems/combination-sum-ii/solution/man-tan-wo-li-jie-de-hui-su-chang-wen-shou-hua-tu-/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/combination-sum-ii/solution/man-tan-wo-li-jie-de-hui-su-chang-wen-shou-hua-tu-/</a></p>\n</blockquote>\n<h3 id=\"回溯的要素\"><a href=\"#回溯的要素\" class=\"headerlink\" title=\"回溯的要素\"></a>回溯的要素</h3><p>我们关心，当前局面下，我们有什么选择，作了一个选择之后，下一个选择会有什么限制。</p>\n<p>解空间树的节点是动态的，当前的选择决定了下一个选择是怎么展开的。</p>\n<p>所以，不仅要关注 options，还要关注 restraints 约束。</p>\n<p>前者用于展开出一棵解的空间树，后者用于为这棵树剪枝，剪去不能产生正确解的节点，避免无效搜索。</p>\n<p>第三个要素：目标（结束条件），明确了目标，就知道何时去将解加入解集。</p>\n<p>并且让你知道：探索到某一步时，发现当前的部分解不能通向正确的完整解，搜下去没有意义。</p>\n<p>此时回退一步，撤销当前的选择，回到上一个选择的状态，做别的选择。</p>\n<p>此路不通，退回去，尝试别的路，是一个「choose, explore, unchoose」的过程。</p>\n<h3 id=\"套路做法\"><a href=\"#套路做法\" class=\"headerlink\" title=\"套路做法\"></a>套路做法</h3><ol>\n<li>用 for 循环去枚举出所有的选择</li>\n<li>做出一个选择</li>\n<li>基于这个选择，继续往下选择（递归）</li>\n<li>上面的递归结束了，撤销这个选择，进入 for 循环的下一次迭代</li>\n</ol>\n<h3 id=\"回溯与嵌套循环\"><a href=\"#回溯与嵌套循环\" class=\"headerlink\" title=\"回溯与嵌套循环\"></a>回溯与嵌套循环</h3><p>回溯是一种算法，递归不是算法，是一种计算机解决问题的方式。</p>\n<p>回溯是借助递归实现的。如果回溯不借助递归，它只能借助循环。</p>\n<p>用 for 循环枚举出当前的选项，选了一个，选下一个，又要嵌套一层循环，枚举出可选的选项。</p>\n<p>如果要选很多个，就导致多重的循环嵌套，很费力也很丑。</p>\n<p>于是借助递归解决，因为递归和子递归就是层级嵌套的关系。</p>\n<p>而且，树在结构上，具有高度的重复性，每一个节点，都是当前子树的根节点，调用递归函数负责当前子树的搜索。</p>\n<h3 id=\"虚拟的解空间树\"><a href=\"#虚拟的解空间树\" class=\"headerlink\" title=\"虚拟的解空间树\"></a>虚拟的解空间树</h3><p>回溯算法并没有显式地创建数据结构，也不是基于已有的数据结构做搜索。</p>\n<p>它是隐式地，通过递归，构建出一棵解的空间树。这个空间树中包含了所有的解。</p>\n<p>然后通过 dfs 的搜索方式，把解给全部找出来。</p>\n<p>如果说它难，应该难在确定出容易搜索（经过充分的剪枝）的解空间结构，剩下的 dfs 和回溯就比较简单了。</p>"},{"title":"跨域常用解决方案","date":"2020-09-06T06:55:05.000Z","_content":"在前端领域中，跨域是指浏览器允许向服务器发送跨域请求，从而克服Ajax只能同源使用的限制。\n<!--more-->\n### 什么是同源策略？\n{% note %}同源策略是一种约定，由Netscape公司1995年引入浏览器，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSFR等攻击。所谓同源是指\"协议+域名+端口\"三者相同，即便两个不同的域名指向同一个ip地址，也非同源。{% endnote %}\n##### 同源策略限制以下几种行为：\n  - Cookie、LocalStorage 和 IndexDB 无法读取\n  - DOM和JS对象无法获得\n  - AJAX 请求不能发送\n\n### 常见跨域解决方案\n#### 1. JSONP跨域\njsonp的原理就是利用script标签没有跨域限制，通过script标签src属性，发送带有callback参数的GET请求，服务端将接口返回数据拼凑到callback函数中，返回给浏览器，浏览器解析执行，从而前端拿到callback函数返回的数据。\n- 原生JS实现\n```html\n<script>\n    var script = document.createElement('script');\n    script.type = 'text/javascript';\n\n    // 传参一个回调函数名给后端，方便后端返回时执行这个在前端定义的回调函数\n    script.src = 'http://www.domain2.com:8080/login?user=admin&callback=handleCallback';\n    document.head.appendChild(script);\n\n    // 回调执行函数\n    function handleCallback(res) {\n        alert(JSON.stringify(res));\n    }\n </script>\n```\n服务端返回如下（返回时即执行全局函数）：\n```javascript\nhandleCallback({\"success\": true, \"user\": \"admin\"})\n```\n- 后端node实现\n```javascript\nvar querystring = require('querystring');\nvar http = require('http');\nvar server = http.createServer();\n\nserver.on('request', function(req, res) {\n    var params = querystring.parse(req.url.split('?')[1]);\n    var fn = params.callback;\n\n    // jsonp返回设置\n    res.writeHead(200, { 'Content-Type': 'text/javascript' });\n    res.write(fn + '(' + JSON.stringify(params) + ')');\n\n    res.end();\n});\n\nserver.listen('8080');\nconsole.log('Server is running at port 8080...');\n```\n{% note %} jsonp的缺点：只能发送get一种请求。 {% endnote %}\n\n#### 2. 跨域资源共享(CORS)\n{% note %}CORS是一个W3C标准，全称是\"跨域资源共享\"（Cross-origin resource sharing）。\n它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。\nCORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。{% endnote %}\n浏览器将CORS跨域请求分为简单请求和非简单请求。只要同时满足一下两个条件，就属于简单请求\n1. 使用下列方法之一\n   - head\n   - get\n   - post\n2. 请求的Heder是\n   - Accept\n   - Accept-Language\n   - Content-Language\n   - Content-Type: 只限于三个值：application/x-www-form-urlencoded、multipart/form-data、text/plain\n\n不同时满足上面的两个条件，就属于非简单请求。浏览器对这两种的处理，是不一样的。\n##### 简单请求\n对于简单请求，浏览器直接发出CORS请求。具体来说，就是在头信息之中，增加一个Origin字段。  \n```\nGET /cors HTTP/1.1\nOrigin: http://api.bob.com\nHost: api.alice.com\nAccept-Language: en-US\nConnection: keep-alive\nUser-Agent: Mozilla/5.0...\n```\n上面的头信息中，Origin字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。\n**CORS请求设置的响应头字段，都以 Access-Control-开头:**\n- **Access-Control-Allow-Origin**：必选\n- **Access-Control-Allow-Credentials**：可选\n- **Access-Control-Expose-Headers**：可选\n\n##### 非简单请求\n非简单请求是那种对服务器有特殊要求的请求，比如请求方法是PUT或DELETE，或者Content-Type字段的类型是application/json。非简单请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为\"预检\"请求（preflight）。\n**预检请求**\n预检\"请求用的请求方法是OPTIONS，表示这个请求是用来询问的。请求头信息里面，关键字段是Origin，表示请求来自哪个源。除了Origin字段，\"预检\"请求的头信息包括两个特殊字段。\n```\nOPTIONS /cors HTTP/1.1\nOrigin: http://api.bob.com\nAccess-Control-Request-Method: PUT\nAccess-Control-Request-Headers: X-Custom-Header\nHost: api.alice.com\nAccept-Language: en-US\nConnection: keep-alive\nUser-Agent: Mozilla/5.0..\n```\n- 原生JS实现\n```javascript\nvar xhr = new XMLHttpRequest(); // IE8/9需用window.XDomainRequest兼容\n\n// 前端设置是否带cookie\nxhr.withCredentials = true;\n\nxhr.open('post', 'http://www.domain2.com:8080/login', true);\nxhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\nxhr.send('user=admin');\n\nxhr.onreadystatechange = function() {\n    if (xhr.readyState == 4 && xhr.status == 200) {\n        alert(xhr.responseText);\n    }\n};\n```\n- 后端node代码\n```javascript\nvar http = require('http');\nvar server = http.createServer();\nvar qs = require('querystring');\n\nserver.on('request', function(req, res) {\n    var postData = '';\n    // 数据块接收中\n    req.addListener('data', function(chunk) {\n        postData += chunk;\n    });\n    // 数据接收完毕\n    req.addListener('end', function() {\n        postData = qs.parse(postData);\n        // 跨域后台设置\n        res.writeHead(200, {\n            'Access-Control-Allow-Credentials': 'true',     // 后端允许发送Cookie\n            'Access-Control-Allow-Origin': 'http://www.domain1.com',    // 允许访问的域（协议+域名+端口）\n            /* \n             * 此处设置的cookie还是domain2的而非domain1，因为后端也不能跨域写cookie(nginx反向代理可以实现)，\n             * 但只要domain2中写入一次cookie认证，后面的跨域接口都能从domain2中获取cookie，从而实现所有的接口都能跨域访问\n             */\n            'Set-Cookie': 'l=a123456;Path=/;Domain=www.domain2.com;HttpOnly'  // HttpOnly的作用是让js无法读取cookie\n        });\n        res.write(JSON.stringify(postData));\n        res.end();\n    });\n});\nserver.listen('8080');\nconsole.log('Server is running at port 8080...');\n```\n\n#### 3. nginx代理跨域\nnginx代理跨域，实质和CORS跨域原理一样，通过配置文件设置请求响应头Access-Control-Allow-Origin…等字段。\n1. nginx配置解决iconfont跨域\n浏览器跨域访问js、css、img等常规静态资源被同源策略许可，但iconfont字体文件(eot|otf|ttf|woff|svg)例外，此时可在nginx的静态资源服务器中加入以下配置。\n```\nlocation / {\n  add_header Access-Control-Allow-Origin *;\n}\n```\n2. nginx反向代理接口跨域\n{% note %}跨域问题：同源策略仅是针对浏览器的安全策略。服务器端调用HTTP接口只是使用HTTP协议，不需要同源策略，也就不存在跨域问题。{% endnote %}\n\n#### 4. nodejs中间件代理跨域\nnode中间件实现跨域代理，原理大致与nginx相同，都是通过启一个代理服务器，实现数据的转发，也可以通过设置cookieDomainRewrite参数修改响应头中cookie中域名，实现当前域的cookie写入，方便接口登录认证。\n**vue框架的跨域**\nnode + vue + webpack + webpack-dev-server搭建的项目，跨域请求接口，直接修改webpack.config.js配置。开发环境下，vue渲染服务和接口代理服务都是webpack-dev-server同一个，所以页面与代理接口之间不再跨域。\nwebpack.config.js部分配置：\n```js\nmodule.exports = {\n    entry: {},\n    module: {},\n    ...\n    devServer: {\n        historyApiFallback: true,\n        proxy: [{\n            context: '/login',\n            target: 'http://www.domain2.com:8080',  // 代理跨域目标接口\n            changeOrigin: true,\n            secure: false,  // 当代理某些https服务报错时用\n            cookieDomainRewrite: 'www.domain1.com'  // 可以为false，表示不修改\n        }],\n        noInfo: true\n    }\n}\n```\n> 声明：以上内容转自https://segmentfault.com/a/1190000011145364","source":"_posts/跨域常用解决方案.md","raw":"---\ntitle: 跨域常用解决方案\ndate: 2020-09-06 14:55:05\ncategories:\ntags:\n    - 面试题\n---\n在前端领域中，跨域是指浏览器允许向服务器发送跨域请求，从而克服Ajax只能同源使用的限制。\n<!--more-->\n### 什么是同源策略？\n{% note %}同源策略是一种约定，由Netscape公司1995年引入浏览器，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSFR等攻击。所谓同源是指\"协议+域名+端口\"三者相同，即便两个不同的域名指向同一个ip地址，也非同源。{% endnote %}\n##### 同源策略限制以下几种行为：\n  - Cookie、LocalStorage 和 IndexDB 无法读取\n  - DOM和JS对象无法获得\n  - AJAX 请求不能发送\n\n### 常见跨域解决方案\n#### 1. JSONP跨域\njsonp的原理就是利用script标签没有跨域限制，通过script标签src属性，发送带有callback参数的GET请求，服务端将接口返回数据拼凑到callback函数中，返回给浏览器，浏览器解析执行，从而前端拿到callback函数返回的数据。\n- 原生JS实现\n```html\n<script>\n    var script = document.createElement('script');\n    script.type = 'text/javascript';\n\n    // 传参一个回调函数名给后端，方便后端返回时执行这个在前端定义的回调函数\n    script.src = 'http://www.domain2.com:8080/login?user=admin&callback=handleCallback';\n    document.head.appendChild(script);\n\n    // 回调执行函数\n    function handleCallback(res) {\n        alert(JSON.stringify(res));\n    }\n </script>\n```\n服务端返回如下（返回时即执行全局函数）：\n```javascript\nhandleCallback({\"success\": true, \"user\": \"admin\"})\n```\n- 后端node实现\n```javascript\nvar querystring = require('querystring');\nvar http = require('http');\nvar server = http.createServer();\n\nserver.on('request', function(req, res) {\n    var params = querystring.parse(req.url.split('?')[1]);\n    var fn = params.callback;\n\n    // jsonp返回设置\n    res.writeHead(200, { 'Content-Type': 'text/javascript' });\n    res.write(fn + '(' + JSON.stringify(params) + ')');\n\n    res.end();\n});\n\nserver.listen('8080');\nconsole.log('Server is running at port 8080...');\n```\n{% note %} jsonp的缺点：只能发送get一种请求。 {% endnote %}\n\n#### 2. 跨域资源共享(CORS)\n{% note %}CORS是一个W3C标准，全称是\"跨域资源共享\"（Cross-origin resource sharing）。\n它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。\nCORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。{% endnote %}\n浏览器将CORS跨域请求分为简单请求和非简单请求。只要同时满足一下两个条件，就属于简单请求\n1. 使用下列方法之一\n   - head\n   - get\n   - post\n2. 请求的Heder是\n   - Accept\n   - Accept-Language\n   - Content-Language\n   - Content-Type: 只限于三个值：application/x-www-form-urlencoded、multipart/form-data、text/plain\n\n不同时满足上面的两个条件，就属于非简单请求。浏览器对这两种的处理，是不一样的。\n##### 简单请求\n对于简单请求，浏览器直接发出CORS请求。具体来说，就是在头信息之中，增加一个Origin字段。  \n```\nGET /cors HTTP/1.1\nOrigin: http://api.bob.com\nHost: api.alice.com\nAccept-Language: en-US\nConnection: keep-alive\nUser-Agent: Mozilla/5.0...\n```\n上面的头信息中，Origin字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。\n**CORS请求设置的响应头字段，都以 Access-Control-开头:**\n- **Access-Control-Allow-Origin**：必选\n- **Access-Control-Allow-Credentials**：可选\n- **Access-Control-Expose-Headers**：可选\n\n##### 非简单请求\n非简单请求是那种对服务器有特殊要求的请求，比如请求方法是PUT或DELETE，或者Content-Type字段的类型是application/json。非简单请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为\"预检\"请求（preflight）。\n**预检请求**\n预检\"请求用的请求方法是OPTIONS，表示这个请求是用来询问的。请求头信息里面，关键字段是Origin，表示请求来自哪个源。除了Origin字段，\"预检\"请求的头信息包括两个特殊字段。\n```\nOPTIONS /cors HTTP/1.1\nOrigin: http://api.bob.com\nAccess-Control-Request-Method: PUT\nAccess-Control-Request-Headers: X-Custom-Header\nHost: api.alice.com\nAccept-Language: en-US\nConnection: keep-alive\nUser-Agent: Mozilla/5.0..\n```\n- 原生JS实现\n```javascript\nvar xhr = new XMLHttpRequest(); // IE8/9需用window.XDomainRequest兼容\n\n// 前端设置是否带cookie\nxhr.withCredentials = true;\n\nxhr.open('post', 'http://www.domain2.com:8080/login', true);\nxhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\nxhr.send('user=admin');\n\nxhr.onreadystatechange = function() {\n    if (xhr.readyState == 4 && xhr.status == 200) {\n        alert(xhr.responseText);\n    }\n};\n```\n- 后端node代码\n```javascript\nvar http = require('http');\nvar server = http.createServer();\nvar qs = require('querystring');\n\nserver.on('request', function(req, res) {\n    var postData = '';\n    // 数据块接收中\n    req.addListener('data', function(chunk) {\n        postData += chunk;\n    });\n    // 数据接收完毕\n    req.addListener('end', function() {\n        postData = qs.parse(postData);\n        // 跨域后台设置\n        res.writeHead(200, {\n            'Access-Control-Allow-Credentials': 'true',     // 后端允许发送Cookie\n            'Access-Control-Allow-Origin': 'http://www.domain1.com',    // 允许访问的域（协议+域名+端口）\n            /* \n             * 此处设置的cookie还是domain2的而非domain1，因为后端也不能跨域写cookie(nginx反向代理可以实现)，\n             * 但只要domain2中写入一次cookie认证，后面的跨域接口都能从domain2中获取cookie，从而实现所有的接口都能跨域访问\n             */\n            'Set-Cookie': 'l=a123456;Path=/;Domain=www.domain2.com;HttpOnly'  // HttpOnly的作用是让js无法读取cookie\n        });\n        res.write(JSON.stringify(postData));\n        res.end();\n    });\n});\nserver.listen('8080');\nconsole.log('Server is running at port 8080...');\n```\n\n#### 3. nginx代理跨域\nnginx代理跨域，实质和CORS跨域原理一样，通过配置文件设置请求响应头Access-Control-Allow-Origin…等字段。\n1. nginx配置解决iconfont跨域\n浏览器跨域访问js、css、img等常规静态资源被同源策略许可，但iconfont字体文件(eot|otf|ttf|woff|svg)例外，此时可在nginx的静态资源服务器中加入以下配置。\n```\nlocation / {\n  add_header Access-Control-Allow-Origin *;\n}\n```\n2. nginx反向代理接口跨域\n{% note %}跨域问题：同源策略仅是针对浏览器的安全策略。服务器端调用HTTP接口只是使用HTTP协议，不需要同源策略，也就不存在跨域问题。{% endnote %}\n\n#### 4. nodejs中间件代理跨域\nnode中间件实现跨域代理，原理大致与nginx相同，都是通过启一个代理服务器，实现数据的转发，也可以通过设置cookieDomainRewrite参数修改响应头中cookie中域名，实现当前域的cookie写入，方便接口登录认证。\n**vue框架的跨域**\nnode + vue + webpack + webpack-dev-server搭建的项目，跨域请求接口，直接修改webpack.config.js配置。开发环境下，vue渲染服务和接口代理服务都是webpack-dev-server同一个，所以页面与代理接口之间不再跨域。\nwebpack.config.js部分配置：\n```js\nmodule.exports = {\n    entry: {},\n    module: {},\n    ...\n    devServer: {\n        historyApiFallback: true,\n        proxy: [{\n            context: '/login',\n            target: 'http://www.domain2.com:8080',  // 代理跨域目标接口\n            changeOrigin: true,\n            secure: false,  // 当代理某些https服务报错时用\n            cookieDomainRewrite: 'www.domain1.com'  // 可以为false，表示不修改\n        }],\n        noInfo: true\n    }\n}\n```\n> 声明：以上内容转自https://segmentfault.com/a/1190000011145364","slug":"跨域常用解决方案","published":1,"updated":"2020-09-06T08:04:47.233Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmdwh6nxq001v8ubp90cf32oc","content":"<p>在前端领域中，跨域是指浏览器允许向服务器发送跨域请求，从而克服Ajax只能同源使用的限制。</p>\n<a id=\"more\"></a>\n<h3 id=\"什么是同源策略？\"><a href=\"#什么是同源策略？\" class=\"headerlink\" title=\"什么是同源策略？\"></a>什么是同源策略？</h3><div class=\"note \"><p>同源策略是一种约定，由Netscape公司1995年引入浏览器，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSFR等攻击。所谓同源是指”协议+域名+端口”三者相同，即便两个不同的域名指向同一个ip地址，也非同源。</p></div>\n<h5 id=\"同源策略限制以下几种行为：\"><a href=\"#同源策略限制以下几种行为：\" class=\"headerlink\" title=\"同源策略限制以下几种行为：\"></a>同源策略限制以下几种行为：</h5><ul>\n<li>Cookie、LocalStorage 和 IndexDB 无法读取</li>\n<li>DOM和JS对象无法获得</li>\n<li>AJAX 请求不能发送</li>\n</ul>\n<h3 id=\"常见跨域解决方案\"><a href=\"#常见跨域解决方案\" class=\"headerlink\" title=\"常见跨域解决方案\"></a>常见跨域解决方案</h3><h4 id=\"1-JSONP跨域\"><a href=\"#1-JSONP跨域\" class=\"headerlink\" title=\"1. JSONP跨域\"></a>1. JSONP跨域</h4><p>jsonp的原理就是利用script标签没有跨域限制，通过script标签src属性，发送带有callback参数的GET请求，服务端将接口返回数据拼凑到callback函数中，返回给浏览器，浏览器解析执行，从而前端拿到callback函数返回的数据。</p>\n<ul>\n<li>原生JS实现<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">    script.type = <span class=\"string\">'text/javascript'</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">// 传参一个回调函数名给后端，方便后端返回时执行这个在前端定义的回调函数</span></span></span><br><span class=\"line\"><span class=\"actionscript\">    script.src = <span class=\"string\">'http://www.domain2.com:8080/login?user=admin&amp;callback=handleCallback'</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.head.appendChild(script);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">// 回调执行函数</span></span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleCallback</span><span class=\"params\">(res)</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        alert(<span class=\"built_in\">JSON</span>.stringify(res));</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n服务端返回如下（返回时即执行全局函数）：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handleCallback(&#123;<span class=\"string\">\"success\"</span>: <span class=\"literal\">true</span>, <span class=\"string\">\"user\"</span>: <span class=\"string\">\"admin\"</span>&#125;)</span><br></pre></td></tr></table></figure></li>\n<li>后端node实现<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> querystring = <span class=\"built_in\">require</span>(<span class=\"string\">'querystring'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> server = http.createServer();</span><br><span class=\"line\"></span><br><span class=\"line\">server.on(<span class=\"string\">'request'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> params = querystring.parse(req.url.split(<span class=\"string\">'?'</span>)[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fn = params.callback;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// jsonp返回设置</span></span><br><span class=\"line\">    res.writeHead(<span class=\"number\">200</span>, &#123; <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/javascript'</span> &#125;);</span><br><span class=\"line\">    res.write(fn + <span class=\"string\">'('</span> + <span class=\"built_in\">JSON</span>.stringify(params) + <span class=\"string\">')'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    res.end();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(<span class=\"string\">'8080'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Server is running at port 8080...'</span>);</span><br></pre></td></tr></table></figure>\n<div class=\"note \"><p>jsonp的缺点：只能发送get一种请求。 </p></div>\n\n</li>\n</ul>\n<h4 id=\"2-跨域资源共享-CORS\"><a href=\"#2-跨域资源共享-CORS\" class=\"headerlink\" title=\"2. 跨域资源共享(CORS)\"></a>2. 跨域资源共享(CORS)</h4><div class=\"note \"><p>CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）。<br>它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。<br>CORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。</p></div>\n<p>浏览器将CORS跨域请求分为简单请求和非简单请求。只要同时满足一下两个条件，就属于简单请求</p>\n<ol>\n<li>使用下列方法之一<ul>\n<li>head</li>\n<li>get</li>\n<li>post</li>\n</ul>\n</li>\n<li>请求的Heder是<ul>\n<li>Accept</li>\n<li>Accept-Language</li>\n<li>Content-Language</li>\n<li>Content-Type: 只限于三个值：application/x-www-form-urlencoded、multipart/form-data、text/plain</li>\n</ul>\n</li>\n</ol>\n<p>不同时满足上面的两个条件，就属于非简单请求。浏览器对这两种的处理，是不一样的。</p>\n<h5 id=\"简单请求\"><a href=\"#简单请求\" class=\"headerlink\" title=\"简单请求\"></a>简单请求</h5><p>对于简单请求，浏览器直接发出CORS请求。具体来说，就是在头信息之中，增加一个Origin字段。  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET &#x2F;cors HTTP&#x2F;1.1</span><br><span class=\"line\">Origin: http:&#x2F;&#x2F;api.bob.com</span><br><span class=\"line\">Host: api.alice.com</span><br><span class=\"line\">Accept-Language: en-US</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">User-Agent: Mozilla&#x2F;5.0...</span><br></pre></td></tr></table></figure>\n<p>上面的头信息中，Origin字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。<br><strong>CORS请求设置的响应头字段，都以 Access-Control-开头:</strong></p>\n<ul>\n<li><strong>Access-Control-Allow-Origin</strong>：必选</li>\n<li><strong>Access-Control-Allow-Credentials</strong>：可选</li>\n<li><strong>Access-Control-Expose-Headers</strong>：可选</li>\n</ul>\n<h5 id=\"非简单请求\"><a href=\"#非简单请求\" class=\"headerlink\" title=\"非简单请求\"></a>非简单请求</h5><p>非简单请求是那种对服务器有特殊要求的请求，比如请求方法是PUT或DELETE，或者Content-Type字段的类型是application/json。非简单请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为”预检”请求（preflight）。<br><strong>预检请求</strong><br>预检”请求用的请求方法是OPTIONS，表示这个请求是用来询问的。请求头信息里面，关键字段是Origin，表示请求来自哪个源。除了Origin字段，”预检”请求的头信息包括两个特殊字段。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OPTIONS &#x2F;cors HTTP&#x2F;1.1</span><br><span class=\"line\">Origin: http:&#x2F;&#x2F;api.bob.com</span><br><span class=\"line\">Access-Control-Request-Method: PUT</span><br><span class=\"line\">Access-Control-Request-Headers: X-Custom-Header</span><br><span class=\"line\">Host: api.alice.com</span><br><span class=\"line\">Accept-Language: en-US</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">User-Agent: Mozilla&#x2F;5.0..</span><br></pre></td></tr></table></figure>\n<ul>\n<li>原生JS实现<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest(); <span class=\"comment\">// IE8/9需用window.XDomainRequest兼容</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 前端设置是否带cookie</span></span><br><span class=\"line\">xhr.withCredentials = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">xhr.open(<span class=\"string\">'post'</span>, <span class=\"string\">'http://www.domain2.com:8080/login'</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">xhr.setRequestHeader(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'application/x-www-form-urlencoded'</span>);</span><br><span class=\"line\">xhr.send(<span class=\"string\">'user=admin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (xhr.readyState == <span class=\"number\">4</span> &amp;&amp; xhr.status == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        alert(xhr.responseText);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n<li>后端node代码<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> server = http.createServer();</span><br><span class=\"line\"><span class=\"keyword\">var</span> qs = <span class=\"built_in\">require</span>(<span class=\"string\">'querystring'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">server.on(<span class=\"string\">'request'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> postData = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 数据块接收中</span></span><br><span class=\"line\">    req.addListener(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chunk</span>) </span>&#123;</span><br><span class=\"line\">        postData += chunk;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 数据接收完毕</span></span><br><span class=\"line\">    req.addListener(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        postData = qs.parse(postData);</span><br><span class=\"line\">        <span class=\"comment\">// 跨域后台设置</span></span><br><span class=\"line\">        res.writeHead(<span class=\"number\">200</span>, &#123;</span><br><span class=\"line\">            <span class=\"string\">'Access-Control-Allow-Credentials'</span>: <span class=\"string\">'true'</span>,     <span class=\"comment\">// 后端允许发送Cookie</span></span><br><span class=\"line\">            <span class=\"string\">'Access-Control-Allow-Origin'</span>: <span class=\"string\">'http://www.domain1.com'</span>,    <span class=\"comment\">// 允许访问的域（协议+域名+端口）</span></span><br><span class=\"line\">            <span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">             * 此处设置的cookie还是domain2的而非domain1，因为后端也不能跨域写cookie(nginx反向代理可以实现)，</span></span><br><span class=\"line\"><span class=\"comment\">             * 但只要domain2中写入一次cookie认证，后面的跨域接口都能从domain2中获取cookie，从而实现所有的接口都能跨域访问</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"string\">'Set-Cookie'</span>: <span class=\"string\">'l=a123456;Path=/;Domain=www.domain2.com;HttpOnly'</span>  <span class=\"comment\">// HttpOnly的作用是让js无法读取cookie</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        res.write(<span class=\"built_in\">JSON</span>.stringify(postData));</span><br><span class=\"line\">        res.end();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.listen(<span class=\"string\">'8080'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Server is running at port 8080...'</span>);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"3-nginx代理跨域\"><a href=\"#3-nginx代理跨域\" class=\"headerlink\" title=\"3. nginx代理跨域\"></a>3. nginx代理跨域</h4><p>nginx代理跨域，实质和CORS跨域原理一样，通过配置文件设置请求响应头Access-Control-Allow-Origin…等字段。</p>\n<ol>\n<li>nginx配置解决iconfont跨域<br>浏览器跨域访问js、css、img等常规静态资源被同源策略许可，但iconfont字体文件(eot|otf|ttf|woff|svg)例外，此时可在nginx的静态资源服务器中加入以下配置。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location &#x2F; &#123;</span><br><span class=\"line\">  add_header Access-Control-Allow-Origin *;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>nginx反向代理接口跨域<div class=\"note \"><p>跨域问题：同源策略仅是针对浏览器的安全策略。服务器端调用HTTP接口只是使用HTTP协议，不需要同源策略，也就不存在跨域问题。</p></div>\n\n</li>\n</ol>\n<h4 id=\"4-nodejs中间件代理跨域\"><a href=\"#4-nodejs中间件代理跨域\" class=\"headerlink\" title=\"4. nodejs中间件代理跨域\"></a>4. nodejs中间件代理跨域</h4><p>node中间件实现跨域代理，原理大致与nginx相同，都是通过启一个代理服务器，实现数据的转发，也可以通过设置cookieDomainRewrite参数修改响应头中cookie中域名，实现当前域的cookie写入，方便接口登录认证。<br><strong>vue框架的跨域</strong><br>node + vue + webpack + webpack-dev-server搭建的项目，跨域请求接口，直接修改webpack.config.js配置。开发环境下，vue渲染服务和接口代理服务都是webpack-dev-server同一个，所以页面与代理接口之间不再跨域。<br>webpack.config.js部分配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: &#123;&#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;&#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    devServer: &#123;</span><br><span class=\"line\">        historyApiFallback: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        proxy: [&#123;</span><br><span class=\"line\">            context: <span class=\"string\">'/login'</span>,</span><br><span class=\"line\">            target: <span class=\"string\">'http://www.domain2.com:8080'</span>,  <span class=\"comment\">// 代理跨域目标接口</span></span><br><span class=\"line\">            changeOrigin: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            secure: <span class=\"literal\">false</span>,  <span class=\"comment\">// 当代理某些https服务报错时用</span></span><br><span class=\"line\">            cookieDomainRewrite: <span class=\"string\">'www.domain1.com'</span>  <span class=\"comment\">// 可以为false，表示不修改</span></span><br><span class=\"line\">        &#125;],</span><br><span class=\"line\">        noInfo: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>声明：以上内容转自<a href=\"https://segmentfault.com/a/1190000011145364\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000011145364</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>在前端领域中，跨域是指浏览器允许向服务器发送跨域请求，从而克服Ajax只能同源使用的限制。</p>","more":"<h3 id=\"什么是同源策略？\"><a href=\"#什么是同源策略？\" class=\"headerlink\" title=\"什么是同源策略？\"></a>什么是同源策略？</h3><div class=\"note \"><p>同源策略是一种约定，由Netscape公司1995年引入浏览器，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSFR等攻击。所谓同源是指”协议+域名+端口”三者相同，即便两个不同的域名指向同一个ip地址，也非同源。</p></div>\n<h5 id=\"同源策略限制以下几种行为：\"><a href=\"#同源策略限制以下几种行为：\" class=\"headerlink\" title=\"同源策略限制以下几种行为：\"></a>同源策略限制以下几种行为：</h5><ul>\n<li>Cookie、LocalStorage 和 IndexDB 无法读取</li>\n<li>DOM和JS对象无法获得</li>\n<li>AJAX 请求不能发送</li>\n</ul>\n<h3 id=\"常见跨域解决方案\"><a href=\"#常见跨域解决方案\" class=\"headerlink\" title=\"常见跨域解决方案\"></a>常见跨域解决方案</h3><h4 id=\"1-JSONP跨域\"><a href=\"#1-JSONP跨域\" class=\"headerlink\" title=\"1. JSONP跨域\"></a>1. JSONP跨域</h4><p>jsonp的原理就是利用script标签没有跨域限制，通过script标签src属性，发送带有callback参数的GET请求，服务端将接口返回数据拼凑到callback函数中，返回给浏览器，浏览器解析执行，从而前端拿到callback函数返回的数据。</p>\n<ul>\n<li>原生JS实现<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">    script.type = <span class=\"string\">'text/javascript'</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">// 传参一个回调函数名给后端，方便后端返回时执行这个在前端定义的回调函数</span></span></span><br><span class=\"line\"><span class=\"actionscript\">    script.src = <span class=\"string\">'http://www.domain2.com:8080/login?user=admin&amp;callback=handleCallback'</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.head.appendChild(script);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">// 回调执行函数</span></span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleCallback</span><span class=\"params\">(res)</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        alert(<span class=\"built_in\">JSON</span>.stringify(res));</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n服务端返回如下（返回时即执行全局函数）：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handleCallback(&#123;<span class=\"string\">\"success\"</span>: <span class=\"literal\">true</span>, <span class=\"string\">\"user\"</span>: <span class=\"string\">\"admin\"</span>&#125;)</span><br></pre></td></tr></table></figure></li>\n<li>后端node实现<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> querystring = <span class=\"built_in\">require</span>(<span class=\"string\">'querystring'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> server = http.createServer();</span><br><span class=\"line\"></span><br><span class=\"line\">server.on(<span class=\"string\">'request'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> params = querystring.parse(req.url.split(<span class=\"string\">'?'</span>)[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fn = params.callback;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// jsonp返回设置</span></span><br><span class=\"line\">    res.writeHead(<span class=\"number\">200</span>, &#123; <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/javascript'</span> &#125;);</span><br><span class=\"line\">    res.write(fn + <span class=\"string\">'('</span> + <span class=\"built_in\">JSON</span>.stringify(params) + <span class=\"string\">')'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    res.end();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(<span class=\"string\">'8080'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Server is running at port 8080...'</span>);</span><br></pre></td></tr></table></figure>\n<div class=\"note \"><p>jsonp的缺点：只能发送get一种请求。 </p></div>\n\n</li>\n</ul>\n<h4 id=\"2-跨域资源共享-CORS\"><a href=\"#2-跨域资源共享-CORS\" class=\"headerlink\" title=\"2. 跨域资源共享(CORS)\"></a>2. 跨域资源共享(CORS)</h4><div class=\"note \"><p>CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）。<br>它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。<br>CORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。</p></div>\n<p>浏览器将CORS跨域请求分为简单请求和非简单请求。只要同时满足一下两个条件，就属于简单请求</p>\n<ol>\n<li>使用下列方法之一<ul>\n<li>head</li>\n<li>get</li>\n<li>post</li>\n</ul>\n</li>\n<li>请求的Heder是<ul>\n<li>Accept</li>\n<li>Accept-Language</li>\n<li>Content-Language</li>\n<li>Content-Type: 只限于三个值：application/x-www-form-urlencoded、multipart/form-data、text/plain</li>\n</ul>\n</li>\n</ol>\n<p>不同时满足上面的两个条件，就属于非简单请求。浏览器对这两种的处理，是不一样的。</p>\n<h5 id=\"简单请求\"><a href=\"#简单请求\" class=\"headerlink\" title=\"简单请求\"></a>简单请求</h5><p>对于简单请求，浏览器直接发出CORS请求。具体来说，就是在头信息之中，增加一个Origin字段。  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET &#x2F;cors HTTP&#x2F;1.1</span><br><span class=\"line\">Origin: http:&#x2F;&#x2F;api.bob.com</span><br><span class=\"line\">Host: api.alice.com</span><br><span class=\"line\">Accept-Language: en-US</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">User-Agent: Mozilla&#x2F;5.0...</span><br></pre></td></tr></table></figure>\n<p>上面的头信息中，Origin字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。<br><strong>CORS请求设置的响应头字段，都以 Access-Control-开头:</strong></p>\n<ul>\n<li><strong>Access-Control-Allow-Origin</strong>：必选</li>\n<li><strong>Access-Control-Allow-Credentials</strong>：可选</li>\n<li><strong>Access-Control-Expose-Headers</strong>：可选</li>\n</ul>\n<h5 id=\"非简单请求\"><a href=\"#非简单请求\" class=\"headerlink\" title=\"非简单请求\"></a>非简单请求</h5><p>非简单请求是那种对服务器有特殊要求的请求，比如请求方法是PUT或DELETE，或者Content-Type字段的类型是application/json。非简单请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为”预检”请求（preflight）。<br><strong>预检请求</strong><br>预检”请求用的请求方法是OPTIONS，表示这个请求是用来询问的。请求头信息里面，关键字段是Origin，表示请求来自哪个源。除了Origin字段，”预检”请求的头信息包括两个特殊字段。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OPTIONS &#x2F;cors HTTP&#x2F;1.1</span><br><span class=\"line\">Origin: http:&#x2F;&#x2F;api.bob.com</span><br><span class=\"line\">Access-Control-Request-Method: PUT</span><br><span class=\"line\">Access-Control-Request-Headers: X-Custom-Header</span><br><span class=\"line\">Host: api.alice.com</span><br><span class=\"line\">Accept-Language: en-US</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">User-Agent: Mozilla&#x2F;5.0..</span><br></pre></td></tr></table></figure>\n<ul>\n<li>原生JS实现<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest(); <span class=\"comment\">// IE8/9需用window.XDomainRequest兼容</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 前端设置是否带cookie</span></span><br><span class=\"line\">xhr.withCredentials = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">xhr.open(<span class=\"string\">'post'</span>, <span class=\"string\">'http://www.domain2.com:8080/login'</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">xhr.setRequestHeader(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'application/x-www-form-urlencoded'</span>);</span><br><span class=\"line\">xhr.send(<span class=\"string\">'user=admin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (xhr.readyState == <span class=\"number\">4</span> &amp;&amp; xhr.status == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        alert(xhr.responseText);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n<li>后端node代码<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> server = http.createServer();</span><br><span class=\"line\"><span class=\"keyword\">var</span> qs = <span class=\"built_in\">require</span>(<span class=\"string\">'querystring'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">server.on(<span class=\"string\">'request'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> postData = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 数据块接收中</span></span><br><span class=\"line\">    req.addListener(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chunk</span>) </span>&#123;</span><br><span class=\"line\">        postData += chunk;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 数据接收完毕</span></span><br><span class=\"line\">    req.addListener(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        postData = qs.parse(postData);</span><br><span class=\"line\">        <span class=\"comment\">// 跨域后台设置</span></span><br><span class=\"line\">        res.writeHead(<span class=\"number\">200</span>, &#123;</span><br><span class=\"line\">            <span class=\"string\">'Access-Control-Allow-Credentials'</span>: <span class=\"string\">'true'</span>,     <span class=\"comment\">// 后端允许发送Cookie</span></span><br><span class=\"line\">            <span class=\"string\">'Access-Control-Allow-Origin'</span>: <span class=\"string\">'http://www.domain1.com'</span>,    <span class=\"comment\">// 允许访问的域（协议+域名+端口）</span></span><br><span class=\"line\">            <span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">             * 此处设置的cookie还是domain2的而非domain1，因为后端也不能跨域写cookie(nginx反向代理可以实现)，</span></span><br><span class=\"line\"><span class=\"comment\">             * 但只要domain2中写入一次cookie认证，后面的跨域接口都能从domain2中获取cookie，从而实现所有的接口都能跨域访问</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"string\">'Set-Cookie'</span>: <span class=\"string\">'l=a123456;Path=/;Domain=www.domain2.com;HttpOnly'</span>  <span class=\"comment\">// HttpOnly的作用是让js无法读取cookie</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        res.write(<span class=\"built_in\">JSON</span>.stringify(postData));</span><br><span class=\"line\">        res.end();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.listen(<span class=\"string\">'8080'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Server is running at port 8080...'</span>);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"3-nginx代理跨域\"><a href=\"#3-nginx代理跨域\" class=\"headerlink\" title=\"3. nginx代理跨域\"></a>3. nginx代理跨域</h4><p>nginx代理跨域，实质和CORS跨域原理一样，通过配置文件设置请求响应头Access-Control-Allow-Origin…等字段。</p>\n<ol>\n<li>nginx配置解决iconfont跨域<br>浏览器跨域访问js、css、img等常规静态资源被同源策略许可，但iconfont字体文件(eot|otf|ttf|woff|svg)例外，此时可在nginx的静态资源服务器中加入以下配置。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location &#x2F; &#123;</span><br><span class=\"line\">  add_header Access-Control-Allow-Origin *;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>nginx反向代理接口跨域<div class=\"note \"><p>跨域问题：同源策略仅是针对浏览器的安全策略。服务器端调用HTTP接口只是使用HTTP协议，不需要同源策略，也就不存在跨域问题。</p></div>\n\n</li>\n</ol>\n<h4 id=\"4-nodejs中间件代理跨域\"><a href=\"#4-nodejs中间件代理跨域\" class=\"headerlink\" title=\"4. nodejs中间件代理跨域\"></a>4. nodejs中间件代理跨域</h4><p>node中间件实现跨域代理，原理大致与nginx相同，都是通过启一个代理服务器，实现数据的转发，也可以通过设置cookieDomainRewrite参数修改响应头中cookie中域名，实现当前域的cookie写入，方便接口登录认证。<br><strong>vue框架的跨域</strong><br>node + vue + webpack + webpack-dev-server搭建的项目，跨域请求接口，直接修改webpack.config.js配置。开发环境下，vue渲染服务和接口代理服务都是webpack-dev-server同一个，所以页面与代理接口之间不再跨域。<br>webpack.config.js部分配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: &#123;&#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;&#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    devServer: &#123;</span><br><span class=\"line\">        historyApiFallback: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        proxy: [&#123;</span><br><span class=\"line\">            context: <span class=\"string\">'/login'</span>,</span><br><span class=\"line\">            target: <span class=\"string\">'http://www.domain2.com:8080'</span>,  <span class=\"comment\">// 代理跨域目标接口</span></span><br><span class=\"line\">            changeOrigin: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            secure: <span class=\"literal\">false</span>,  <span class=\"comment\">// 当代理某些https服务报错时用</span></span><br><span class=\"line\">            cookieDomainRewrite: <span class=\"string\">'www.domain1.com'</span>  <span class=\"comment\">// 可以为false，表示不修改</span></span><br><span class=\"line\">        &#125;],</span><br><span class=\"line\">        noInfo: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>声明：以上内容转自<a href=\"https://segmentfault.com/a/1190000011145364\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000011145364</a></p>\n</blockquote>"},{"title":"常见面试题","date":"2020-09-06T10:06:01.000Z","_content":"常见面试题汇总\n<!--more-->\n1. 手写一个sleep函数（可从Promise，Generator，async/await等角度实现）\n```javascript\nfunction sleep(ms){\n    return new Promise(resolve=>{\n        setTimeout(resolve, ms)\n    })\n}\n~(async ()=>{\n    console.log(111)\n    await sleep(2000)\n    console.log(222)\n})()\n```\n2. 已知如下数组，编写一个程序将数组扁平化去除其中重复部分数据，最终得到一个升序且不重复的数组(不使用es6的flat()方法)\n```javascript\nlet arr = [[1, 2, 2], [3, 4, 5, 5], [6, 7, 8, 9, [11, 12, [12, 13, [14]]]], 10]\n\nlet res = []\nfunction flat(arr){\n    for(let i=0;i<arr.length;i++){\n        if(typeof arr[i] == 'number'){\n            if(res.indexOf(arr[i]) == -1){\n                res.push(arr[i])\n            }\n        }else{\n            flat(arr[i])\n        }\n    }\n    let pivot = res[0]\n    let left = [],right = []\n    for(let i=0;i<res.length;i++){\n        if(res[i]>pivot){\n            right.push(res[i])\n        }else if(res[i]<pivot){\n            left.push(res[i])\n        }\n    }\n    console.log(left.concat(pivot, right))\n}\n\nflat(arr)\n```\n3. 在不改变当前代码的情况下，使这张图片的宽度为300px\n    ```html\n    <img src=\"1.png\" style=\"width: 480px !important\"/>\n    ```\n    - css方法\n    ```html\n    <img src=\"1.png\" style=\"width: 480px !important; max-width: 300px \"/>\n    <img src=\"1.png\" style=\"width: 480px !important; transform: scale(0.65, 1);\"/>\n    <img src=\"1.png\" style=\"width: 480px !important; width: 300px !important\"/>\n    ```\n    - js方法\n    ```javascript\n    document.getElementsByTagName('img')[0].setAttribute('style', 'width: 300px !important')\n    ```","source":"_posts/常见面试题.md","raw":"---\ntitle: 常见面试题\ndate: 2020-09-06 18:06:01\ncategories:\n    - JavaScript\ntags:\n    - 面试题\n---\n常见面试题汇总\n<!--more-->\n1. 手写一个sleep函数（可从Promise，Generator，async/await等角度实现）\n```javascript\nfunction sleep(ms){\n    return new Promise(resolve=>{\n        setTimeout(resolve, ms)\n    })\n}\n~(async ()=>{\n    console.log(111)\n    await sleep(2000)\n    console.log(222)\n})()\n```\n2. 已知如下数组，编写一个程序将数组扁平化去除其中重复部分数据，最终得到一个升序且不重复的数组(不使用es6的flat()方法)\n```javascript\nlet arr = [[1, 2, 2], [3, 4, 5, 5], [6, 7, 8, 9, [11, 12, [12, 13, [14]]]], 10]\n\nlet res = []\nfunction flat(arr){\n    for(let i=0;i<arr.length;i++){\n        if(typeof arr[i] == 'number'){\n            if(res.indexOf(arr[i]) == -1){\n                res.push(arr[i])\n            }\n        }else{\n            flat(arr[i])\n        }\n    }\n    let pivot = res[0]\n    let left = [],right = []\n    for(let i=0;i<res.length;i++){\n        if(res[i]>pivot){\n            right.push(res[i])\n        }else if(res[i]<pivot){\n            left.push(res[i])\n        }\n    }\n    console.log(left.concat(pivot, right))\n}\n\nflat(arr)\n```\n3. 在不改变当前代码的情况下，使这张图片的宽度为300px\n    ```html\n    <img src=\"1.png\" style=\"width: 480px !important\"/>\n    ```\n    - css方法\n    ```html\n    <img src=\"1.png\" style=\"width: 480px !important; max-width: 300px \"/>\n    <img src=\"1.png\" style=\"width: 480px !important; transform: scale(0.65, 1);\"/>\n    <img src=\"1.png\" style=\"width: 480px !important; width: 300px !important\"/>\n    ```\n    - js方法\n    ```javascript\n    document.getElementsByTagName('img')[0].setAttribute('style', 'width: 300px !important')\n    ```","slug":"常见面试题","published":1,"updated":"2020-09-09T09:04:26.916Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmdwh6nxr001y8ubp5gal3xlf","content":"<p>常见面试题汇总</p>\n<a id=\"more\"></a>\n<ol>\n<li>手写一个sleep函数（可从Promise，Generator，async/await等角度实现）<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sleep</span>(<span class=\"params\">ms</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span>=&gt;</span>&#123;</span><br><span class=\"line\">        setTimeout(resolve, ms)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">~<span class=\"function\">(<span class=\"params\"><span class=\"keyword\">async</span> (</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">111</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> sleep(<span class=\"number\">2000</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">222</span>)</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure></li>\n<li>已知如下数组，编写一个程序将数组扁平化去除其中重复部分数据，最终得到一个升序且不重复的数组(不使用es6的flat()方法)<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>], [<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, [<span class=\"number\">11</span>, <span class=\"number\">12</span>, [<span class=\"number\">12</span>, <span class=\"number\">13</span>, [<span class=\"number\">14</span>]]]], <span class=\"number\">10</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> res = []</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">flat</span>(<span class=\"params\">arr</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> arr[i] == <span class=\"string\">'number'</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(res.indexOf(arr[i]) == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">                res.push(arr[i])</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            flat(arr[i])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pivot = res[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = [],right = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;res.length;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(res[i]&gt;pivot)&#123;</span><br><span class=\"line\">            right.push(res[i])</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(res[i]&lt;pivot)&#123;</span><br><span class=\"line\">            left.push(res[i])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(left.concat(pivot, right))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">flat(arr)</span><br></pre></td></tr></table></figure></li>\n<li>在不改变当前代码的情况下，使这张图片的宽度为300px <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"1.png\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 480px !important\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>css方法<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"1.png\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 480px !important; max-width: 300px \"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"1.png\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 480px !important; transform: scale(0.65, 1);\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"1.png\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 480px !important; width: 300px !important\"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>js方法<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'img'</span>)[<span class=\"number\">0</span>].setAttribute(<span class=\"string\">'style'</span>, <span class=\"string\">'width: 300px !important'</span>)</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>常见面试题汇总</p>","more":"<ol>\n<li>手写一个sleep函数（可从Promise，Generator，async/await等角度实现）<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sleep</span>(<span class=\"params\">ms</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span>=&gt;</span>&#123;</span><br><span class=\"line\">        setTimeout(resolve, ms)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">~<span class=\"function\">(<span class=\"params\"><span class=\"keyword\">async</span> (</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">111</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> sleep(<span class=\"number\">2000</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">222</span>)</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure></li>\n<li>已知如下数组，编写一个程序将数组扁平化去除其中重复部分数据，最终得到一个升序且不重复的数组(不使用es6的flat()方法)<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>], [<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, [<span class=\"number\">11</span>, <span class=\"number\">12</span>, [<span class=\"number\">12</span>, <span class=\"number\">13</span>, [<span class=\"number\">14</span>]]]], <span class=\"number\">10</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> res = []</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">flat</span>(<span class=\"params\">arr</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> arr[i] == <span class=\"string\">'number'</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(res.indexOf(arr[i]) == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">                res.push(arr[i])</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            flat(arr[i])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pivot = res[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = [],right = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;res.length;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(res[i]&gt;pivot)&#123;</span><br><span class=\"line\">            right.push(res[i])</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(res[i]&lt;pivot)&#123;</span><br><span class=\"line\">            left.push(res[i])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(left.concat(pivot, right))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">flat(arr)</span><br></pre></td></tr></table></figure></li>\n<li>在不改变当前代码的情况下，使这张图片的宽度为300px <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"1.png\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 480px !important\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>css方法<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"1.png\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 480px !important; max-width: 300px \"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"1.png\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 480px !important; transform: scale(0.65, 1);\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"1.png\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 480px !important; width: 300px !important\"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>js方法<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'img'</span>)[<span class=\"number\">0</span>].setAttribute(<span class=\"string\">'style'</span>, <span class=\"string\">'width: 300px !important'</span>)</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>"},{"title":"如何实现数组去重","date":"2020-09-04T18:12:58.000Z","_content":"实现数组去重有多种方式实现，具体可见如下代码：\n<!--more-->\n1. 循环迭代+map\n```javascript\n~(function(){\n    let pro = Array.prototype\n    pro.myDistinct = function(){\n        let obj = {}\n        for(let i=0;i<this.length;i++){\n            let item = this[i]\n            if(typeof obj[item] !== 'undefined'){ // 括号中也可写做 obj[item] !== undefined\n                this[i] = this[this.length-1]\n                this.length--\n                i--\n                continue\n            }\n            obj[item] = item\n        }\n        obj = null\n        return this\n    }\n})()\n```\n2. ES6的Array.filter()\n```javascript\n~(function(){\n    let pro = Array.prototype\n    pro.myDistinct = function(){\n        return this.filter((item, index) => {\n            return this.indexOf(item) === index\n        })\n    }\n})()\n```\n3. ES6的Set()（高性能）\nset结构成员的值都是唯一的，可以接受数组作为参数\n```javascript\n~(function(){\n    let pro = Array.prototype\n    pro.myDistinct = function(){\n        var set = new Set(this)\n        return [...set]\n    }\n})()\n```\n","source":"_posts/如何实现数组去重.md","raw":"---\ntitle: 如何实现数组去重\ndate: 2020-09-05 02:12:58\ncategories:\n    - JavaScript\ntags:\n    - 面试题\n---\n实现数组去重有多种方式实现，具体可见如下代码：\n<!--more-->\n1. 循环迭代+map\n```javascript\n~(function(){\n    let pro = Array.prototype\n    pro.myDistinct = function(){\n        let obj = {}\n        for(let i=0;i<this.length;i++){\n            let item = this[i]\n            if(typeof obj[item] !== 'undefined'){ // 括号中也可写做 obj[item] !== undefined\n                this[i] = this[this.length-1]\n                this.length--\n                i--\n                continue\n            }\n            obj[item] = item\n        }\n        obj = null\n        return this\n    }\n})()\n```\n2. ES6的Array.filter()\n```javascript\n~(function(){\n    let pro = Array.prototype\n    pro.myDistinct = function(){\n        return this.filter((item, index) => {\n            return this.indexOf(item) === index\n        })\n    }\n})()\n```\n3. ES6的Set()（高性能）\nset结构成员的值都是唯一的，可以接受数组作为参数\n```javascript\n~(function(){\n    let pro = Array.prototype\n    pro.myDistinct = function(){\n        var set = new Set(this)\n        return [...set]\n    }\n})()\n```\n","slug":"如何实现数组去重","published":1,"updated":"2020-09-05T15:17:43.232Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmdwh6nxt00228ubp9c30arn6","content":"<p>实现数组去重有多种方式实现，具体可见如下代码：</p>\n<a id=\"more\"></a>\n<ol>\n<li>循环迭代+map<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pro = <span class=\"built_in\">Array</span>.prototype</span><br><span class=\"line\">    pro.myDistinct = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> obj = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"keyword\">this</span>.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> item = <span class=\"keyword\">this</span>[i]</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> obj[item] !== <span class=\"string\">'undefined'</span>)&#123; <span class=\"comment\">// 括号中也可写做 obj[item] !== undefined</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>[i] = <span class=\"keyword\">this</span>[<span class=\"keyword\">this</span>.length<span class=\"number\">-1</span>]</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.length--</span><br><span class=\"line\">                i--</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            obj[item] = item</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        obj = <span class=\"literal\">null</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure></li>\n<li>ES6的Array.filter()<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pro = <span class=\"built_in\">Array</span>.prototype</span><br><span class=\"line\">    pro.myDistinct = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.filter(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.indexOf(item) === index</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure></li>\n<li>ES6的Set()（高性能）<br>set结构成员的值都是唯一的，可以接受数组作为参数<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pro = <span class=\"built_in\">Array</span>.prototype</span><br><span class=\"line\">    pro.myDistinct = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> <span class=\"keyword\">set</span> = new Set(this)</span><br><span class=\"line\">        return [...<span class=\"keyword\">set</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>实现数组去重有多种方式实现，具体可见如下代码：</p>","more":"<ol>\n<li>循环迭代+map<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pro = <span class=\"built_in\">Array</span>.prototype</span><br><span class=\"line\">    pro.myDistinct = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> obj = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"keyword\">this</span>.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> item = <span class=\"keyword\">this</span>[i]</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> obj[item] !== <span class=\"string\">'undefined'</span>)&#123; <span class=\"comment\">// 括号中也可写做 obj[item] !== undefined</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>[i] = <span class=\"keyword\">this</span>[<span class=\"keyword\">this</span>.length<span class=\"number\">-1</span>]</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.length--</span><br><span class=\"line\">                i--</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            obj[item] = item</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        obj = <span class=\"literal\">null</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure></li>\n<li>ES6的Array.filter()<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pro = <span class=\"built_in\">Array</span>.prototype</span><br><span class=\"line\">    pro.myDistinct = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.filter(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.indexOf(item) === index</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure></li>\n<li>ES6的Set()（高性能）<br>set结构成员的值都是唯一的，可以接受数组作为参数<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pro = <span class=\"built_in\">Array</span>.prototype</span><br><span class=\"line\">    pro.myDistinct = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> <span class=\"keyword\">set</span> = new Set(this)</span><br><span class=\"line\">        return [...<span class=\"keyword\">set</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n</li>\n</ol>"},{"title":"排序算法","date":"2020-09-07T07:24:19.000Z","_content":"目前经典的排序算法包括(冒泡排序，选择排序，插入排序)，合并排序和快速排序，其中效率最高的为快速排序，以下为详细讲解\n<!--more-->\n{% note %}\n转自阮一峰博客：https://javascript.ruanyifeng.com/library/sorting.html\n参考：https://humanwhocodes.com/blog/2012/11/27/computer-science-in-javascript-quicksort/\n{% endnote %}\n\n![avatar](https://cdn.jsdelivr.net/gh/yc2hang/cdn-assets/photos/sort.jpg)\n\n### 尼古拉斯·泽卡斯版\n\n#### 简介\n\n快速排序（quick sort）是公认最快的排序算法之一，有着广泛的应用。\n\n它的基本思想很简单：先确定一个“支点”（pivot），将所有小于“支点”的值都放在该点的左侧，大于“支点”的值都放在该点的右侧，然后对左右两侧不断重复这个过程，直到所有排序完成。\n\n具体做法是：\n{% note 'info' %}\n1. 确定“支点”（pivot）。虽然数组中任意一个值都能作为“支点”，但通常是取数组的中间值。\n2. 建立两端的指针。左侧的指针指向数组的第一个元素，右侧的指针指向数组的最后一个元素。\n3. 左侧指针的当前值与“支点”进行比较，如果小于“支点”则指针向后移动一位，否则指针停在原地。\n4. 右侧指针的当前值与“支点”进行比较，如果大于“支点”则指针向前移动一位，否则指针停在原地。\n5. 左侧指针的位置与右侧指针的位置进行比较，如果前者大于等于后者，则本次排序结束；否则，左侧指针的值与右侧指针的值相交换。\n6. 对左右两侧重复第2至5步。\n{% endnote %}\n以对数组[3, 2, 4, 5, 1] 进行从小到大排序为例，步骤如下：\n{% note 'info' %}\n1. 选择中间值“4”作为“支点”。\n2. 第一个元素3小于4，左侧指针向后移动一位；第二个元素2小于4，左侧指针向后移动一位；第三个元素4等于4，左侧指针停在这个位置（数组的第2位）。\n3. 倒数第一个元素1小于4，右侧指针停在这个位置（数组的第4位）。\n4. 左侧指针的位置（2）小于右侧指针的位置（4），两个位置的值互换，数组变成[3, 2, 1, 5, 4]。\n5. 左侧指针向后移动一位，第四个元素5大于4，左侧指针停在这个位置（数组的第3位）。\n6. 右侧指针向前移动一位，第四个元素5大于4，右侧指针移动向前移动一位，第三个元素1小于4，右侧指针停在这个位置（数组的第3位）。\n7. 左侧指针的位置（3）大于右侧指针的位置（2），本次排序结束。\n8. 对 [3, 2, 1]和[5, 4]两部分各自不断重复上述步骤，直到排序完成。\n{% endnote %}\n\n#### 算法实现\n\n首先部署一个swap函数，用于互换两个位置的值。\n```javascript\nfunction swap(myArray, firstIndex, secondIndex){\n    var temp = myArray[firstIndex];\n    myArray[firstIndex] = myArray[secondIndex];\n    myArray[secondIndex] = temp;\n}\n```\n然后，部署一个partition函数，用于完成一轮排序。\n```javascript\nfunction partition(myArray, left, right) {\n\n    var pivot   = myArray[Math.floor((right + left) / 2)],\n        i       = left,\n        j       = right;\n\n\n    while (i <= j) {\n\n        while (myArray[i] < pivot) {\n            i++;\n        }\n\n        while (myArray[j] > pivot) {\n            j--;\n        }\n\n        if (i <= j) {\n            swap(myArray, i, j);\n            i++;\n            j--;\n        }\n    }\n\n    return i;\n}\n```\n接下来，就是递归上面的过程，完成整个排序。\n```javascript\nfunction quickSort(myArray, left, right) {\n\n\tif (myArray.length < 2) return myArray;\n\n\tleft = (typeof left !== \"number\" ? 0 : left);\n\n\tright = (typeof right !== \"number\" ? myArray.length - 1 : right);\n\n\tvar index  = partition(myArray, left, right);\n\n\t if (left < index - 1) {\n            quickSort(myArray, left, index - 1);\n     }\n\n\t if (index < right) {\n            quickSort(myArray, index, right);\n      }\n\n\t return myArray;\n\n}\n```\n\n### 阮一峰版\n```javascript\nfunction quickSort(arr){\n    if(arr.length<2) return arr\n    let pivotIndex = Math.floor(arr.length/2)\n    let pivot = arr.splice(pivotIndex, 1)[0]\n    let left = []\n    let right = []\n    for(let i=0;i<arr.length;i++){\n        if(arr[i]<pivot){\n            left.push(arr[i])\n        }else{\n            right.push(arr[i])\n        }\n    }\n    return quickSort(left).concat([pivot], quickSort(right))\n}\n```\n\n### 简单好记版（ES6）\n```javascript\nfunction quickSort(arr){\n    if(!arr || arr.length<2) return arr\n    let pivot = arr.shift()\n    let left = arr.filter(item => item < pivot)\n    let right = arr.filter(item => item>=pivot)\n    return quickSort(left).concat([pivot], quickSort(right))\n}\n```","source":"_posts/排序算法.md","raw":"---\ntitle: 排序算法\ndate: 2020-09-07 15:24:19\ncategories:\n    - 算法与数据结构\ntags:\n    - 排序\n    - 递归\n---\n目前经典的排序算法包括(冒泡排序，选择排序，插入排序)，合并排序和快速排序，其中效率最高的为快速排序，以下为详细讲解\n<!--more-->\n{% note %}\n转自阮一峰博客：https://javascript.ruanyifeng.com/library/sorting.html\n参考：https://humanwhocodes.com/blog/2012/11/27/computer-science-in-javascript-quicksort/\n{% endnote %}\n\n![avatar](https://cdn.jsdelivr.net/gh/yc2hang/cdn-assets/photos/sort.jpg)\n\n### 尼古拉斯·泽卡斯版\n\n#### 简介\n\n快速排序（quick sort）是公认最快的排序算法之一，有着广泛的应用。\n\n它的基本思想很简单：先确定一个“支点”（pivot），将所有小于“支点”的值都放在该点的左侧，大于“支点”的值都放在该点的右侧，然后对左右两侧不断重复这个过程，直到所有排序完成。\n\n具体做法是：\n{% note 'info' %}\n1. 确定“支点”（pivot）。虽然数组中任意一个值都能作为“支点”，但通常是取数组的中间值。\n2. 建立两端的指针。左侧的指针指向数组的第一个元素，右侧的指针指向数组的最后一个元素。\n3. 左侧指针的当前值与“支点”进行比较，如果小于“支点”则指针向后移动一位，否则指针停在原地。\n4. 右侧指针的当前值与“支点”进行比较，如果大于“支点”则指针向前移动一位，否则指针停在原地。\n5. 左侧指针的位置与右侧指针的位置进行比较，如果前者大于等于后者，则本次排序结束；否则，左侧指针的值与右侧指针的值相交换。\n6. 对左右两侧重复第2至5步。\n{% endnote %}\n以对数组[3, 2, 4, 5, 1] 进行从小到大排序为例，步骤如下：\n{% note 'info' %}\n1. 选择中间值“4”作为“支点”。\n2. 第一个元素3小于4，左侧指针向后移动一位；第二个元素2小于4，左侧指针向后移动一位；第三个元素4等于4，左侧指针停在这个位置（数组的第2位）。\n3. 倒数第一个元素1小于4，右侧指针停在这个位置（数组的第4位）。\n4. 左侧指针的位置（2）小于右侧指针的位置（4），两个位置的值互换，数组变成[3, 2, 1, 5, 4]。\n5. 左侧指针向后移动一位，第四个元素5大于4，左侧指针停在这个位置（数组的第3位）。\n6. 右侧指针向前移动一位，第四个元素5大于4，右侧指针移动向前移动一位，第三个元素1小于4，右侧指针停在这个位置（数组的第3位）。\n7. 左侧指针的位置（3）大于右侧指针的位置（2），本次排序结束。\n8. 对 [3, 2, 1]和[5, 4]两部分各自不断重复上述步骤，直到排序完成。\n{% endnote %}\n\n#### 算法实现\n\n首先部署一个swap函数，用于互换两个位置的值。\n```javascript\nfunction swap(myArray, firstIndex, secondIndex){\n    var temp = myArray[firstIndex];\n    myArray[firstIndex] = myArray[secondIndex];\n    myArray[secondIndex] = temp;\n}\n```\n然后，部署一个partition函数，用于完成一轮排序。\n```javascript\nfunction partition(myArray, left, right) {\n\n    var pivot   = myArray[Math.floor((right + left) / 2)],\n        i       = left,\n        j       = right;\n\n\n    while (i <= j) {\n\n        while (myArray[i] < pivot) {\n            i++;\n        }\n\n        while (myArray[j] > pivot) {\n            j--;\n        }\n\n        if (i <= j) {\n            swap(myArray, i, j);\n            i++;\n            j--;\n        }\n    }\n\n    return i;\n}\n```\n接下来，就是递归上面的过程，完成整个排序。\n```javascript\nfunction quickSort(myArray, left, right) {\n\n\tif (myArray.length < 2) return myArray;\n\n\tleft = (typeof left !== \"number\" ? 0 : left);\n\n\tright = (typeof right !== \"number\" ? myArray.length - 1 : right);\n\n\tvar index  = partition(myArray, left, right);\n\n\t if (left < index - 1) {\n            quickSort(myArray, left, index - 1);\n     }\n\n\t if (index < right) {\n            quickSort(myArray, index, right);\n      }\n\n\t return myArray;\n\n}\n```\n\n### 阮一峰版\n```javascript\nfunction quickSort(arr){\n    if(arr.length<2) return arr\n    let pivotIndex = Math.floor(arr.length/2)\n    let pivot = arr.splice(pivotIndex, 1)[0]\n    let left = []\n    let right = []\n    for(let i=0;i<arr.length;i++){\n        if(arr[i]<pivot){\n            left.push(arr[i])\n        }else{\n            right.push(arr[i])\n        }\n    }\n    return quickSort(left).concat([pivot], quickSort(right))\n}\n```\n\n### 简单好记版（ES6）\n```javascript\nfunction quickSort(arr){\n    if(!arr || arr.length<2) return arr\n    let pivot = arr.shift()\n    let left = arr.filter(item => item < pivot)\n    let right = arr.filter(item => item>=pivot)\n    return quickSort(left).concat([pivot], quickSort(right))\n}\n```","slug":"排序算法","published":1,"updated":"2020-09-08T05:50:23.273Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmdwh6nxu00258ubp728scdxs","content":"<p>目前经典的排序算法包括(冒泡排序，选择排序，插入排序)，合并排序和快速排序，其中效率最高的为快速排序，以下为详细讲解</p>\n<a id=\"more\"></a>\n<div class=\"note \"><p>转自阮一峰博客：<a href=\"https://javascript.ruanyifeng.com/library/sorting.html\" target=\"_blank\" rel=\"noopener\">https://javascript.ruanyifeng.com/library/sorting.html</a><br>参考：<a href=\"https://humanwhocodes.com/blog/2012/11/27/computer-science-in-javascript-quicksort/\" target=\"_blank\" rel=\"noopener\">https://humanwhocodes.com/blog/2012/11/27/computer-science-in-javascript-quicksort/</a></p></div>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/yc2hang/cdn-assets/photos/sort.jpg\" alt=\"avatar\"></p>\n<h3 id=\"尼古拉斯·泽卡斯版\"><a href=\"#尼古拉斯·泽卡斯版\" class=\"headerlink\" title=\"尼古拉斯·泽卡斯版\"></a>尼古拉斯·泽卡斯版</h3><h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><p>快速排序（quick sort）是公认最快的排序算法之一，有着广泛的应用。</p>\n<p>它的基本思想很简单：先确定一个“支点”（pivot），将所有小于“支点”的值都放在该点的左侧，大于“支点”的值都放在该点的右侧，然后对左右两侧不断重复这个过程，直到所有排序完成。</p>\n<p>具体做法是：</p>\n<div class=\"note info\"><ol>\n<li>确定“支点”（pivot）。虽然数组中任意一个值都能作为“支点”，但通常是取数组的中间值。</li>\n<li>建立两端的指针。左侧的指针指向数组的第一个元素，右侧的指针指向数组的最后一个元素。</li>\n<li>左侧指针的当前值与“支点”进行比较，如果小于“支点”则指针向后移动一位，否则指针停在原地。</li>\n<li>右侧指针的当前值与“支点”进行比较，如果大于“支点”则指针向前移动一位，否则指针停在原地。</li>\n<li>左侧指针的位置与右侧指针的位置进行比较，如果前者大于等于后者，则本次排序结束；否则，左侧指针的值与右侧指针的值相交换。</li>\n<li>对左右两侧重复第2至5步。</li>\n</ol></div>\n<p>以对数组[3, 2, 4, 5, 1] 进行从小到大排序为例，步骤如下：</p>\n<div class=\"note info\"><ol>\n<li>选择中间值“4”作为“支点”。</li>\n<li>第一个元素3小于4，左侧指针向后移动一位；第二个元素2小于4，左侧指针向后移动一位；第三个元素4等于4，左侧指针停在这个位置（数组的第2位）。</li>\n<li>倒数第一个元素1小于4，右侧指针停在这个位置（数组的第4位）。</li>\n<li>左侧指针的位置（2）小于右侧指针的位置（4），两个位置的值互换，数组变成[3, 2, 1, 5, 4]。</li>\n<li>左侧指针向后移动一位，第四个元素5大于4，左侧指针停在这个位置（数组的第3位）。</li>\n<li>右侧指针向前移动一位，第四个元素5大于4，右侧指针移动向前移动一位，第三个元素1小于4，右侧指针停在这个位置（数组的第3位）。</li>\n<li>左侧指针的位置（3）大于右侧指针的位置（2），本次排序结束。</li>\n<li>对 [3, 2, 1]和[5, 4]两部分各自不断重复上述步骤，直到排序完成。</li>\n</ol></div>\n\n<h4 id=\"算法实现\"><a href=\"#算法实现\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h4><p>首先部署一个swap函数，用于互换两个位置的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swap</span>(<span class=\"params\">myArray, firstIndex, secondIndex</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> temp = myArray[firstIndex];</span><br><span class=\"line\">    myArray[firstIndex] = myArray[secondIndex];</span><br><span class=\"line\">    myArray[secondIndex] = temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后，部署一个partition函数，用于完成一轮排序。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">partition</span>(<span class=\"params\">myArray, left, right</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> pivot   = myArray[<span class=\"built_in\">Math</span>.floor((right + left) / <span class=\"number\">2</span>)],</span><br><span class=\"line\">        i       = left,</span><br><span class=\"line\">        j       = right;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt;= j) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (myArray[i] &lt; pivot) &#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (myArray[j] &gt; pivot) &#123;</span><br><span class=\"line\">            j--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt;= j) &#123;</span><br><span class=\"line\">            swap(myArray, i, j);</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">            j--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来，就是递归上面的过程，完成整个排序。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort</span>(<span class=\"params\">myArray, left, right</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (myArray.length &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> myArray;</span><br><span class=\"line\"></span><br><span class=\"line\">\tleft = (<span class=\"keyword\">typeof</span> left !== <span class=\"string\">\"number\"</span> ? <span class=\"number\">0</span> : left);</span><br><span class=\"line\"></span><br><span class=\"line\">\tright = (<span class=\"keyword\">typeof</span> right !== <span class=\"string\">\"number\"</span> ? myArray.length - <span class=\"number\">1</span> : right);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> index  = partition(myArray, left, right);</span><br><span class=\"line\"></span><br><span class=\"line\">\t <span class=\"keyword\">if</span> (left &lt; index - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            quickSort(myArray, left, index - <span class=\"number\">1</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t <span class=\"keyword\">if</span> (index &lt; right) &#123;</span><br><span class=\"line\">            quickSort(myArray, index, right);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t <span class=\"keyword\">return</span> myArray;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"阮一峰版\"><a href=\"#阮一峰版\" class=\"headerlink\" title=\"阮一峰版\"></a>阮一峰版</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort</span>(<span class=\"params\">arr</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arr.length&lt;<span class=\"number\">2</span>) <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pivotIndex = <span class=\"built_in\">Math</span>.floor(arr.length/<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pivot = arr.splice(pivotIndex, <span class=\"number\">1</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = []</span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[i]&lt;pivot)&#123;</span><br><span class=\"line\">            left.push(arr[i])</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            right.push(arr[i])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> quickSort(left).concat([pivot], quickSort(right))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"简单好记版（ES6）\"><a href=\"#简单好记版（ES6）\" class=\"headerlink\" title=\"简单好记版（ES6）\"></a>简单好记版（ES6）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort</span>(<span class=\"params\">arr</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!arr || arr.length&lt;<span class=\"number\">2</span>) <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pivot = arr.shift()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = arr.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item &lt; pivot)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = arr.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item&gt;=pivot)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> quickSort(left).concat([pivot], quickSort(right))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>目前经典的排序算法包括(冒泡排序，选择排序，插入排序)，合并排序和快速排序，其中效率最高的为快速排序，以下为详细讲解</p>","more":"<div class=\"note \"><p>转自阮一峰博客：<a href=\"https://javascript.ruanyifeng.com/library/sorting.html\" target=\"_blank\" rel=\"noopener\">https://javascript.ruanyifeng.com/library/sorting.html</a><br>参考：<a href=\"https://humanwhocodes.com/blog/2012/11/27/computer-science-in-javascript-quicksort/\" target=\"_blank\" rel=\"noopener\">https://humanwhocodes.com/blog/2012/11/27/computer-science-in-javascript-quicksort/</a></p></div>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/yc2hang/cdn-assets/photos/sort.jpg\" alt=\"avatar\"></p>\n<h3 id=\"尼古拉斯·泽卡斯版\"><a href=\"#尼古拉斯·泽卡斯版\" class=\"headerlink\" title=\"尼古拉斯·泽卡斯版\"></a>尼古拉斯·泽卡斯版</h3><h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><p>快速排序（quick sort）是公认最快的排序算法之一，有着广泛的应用。</p>\n<p>它的基本思想很简单：先确定一个“支点”（pivot），将所有小于“支点”的值都放在该点的左侧，大于“支点”的值都放在该点的右侧，然后对左右两侧不断重复这个过程，直到所有排序完成。</p>\n<p>具体做法是：</p>\n<div class=\"note info\"><ol>\n<li>确定“支点”（pivot）。虽然数组中任意一个值都能作为“支点”，但通常是取数组的中间值。</li>\n<li>建立两端的指针。左侧的指针指向数组的第一个元素，右侧的指针指向数组的最后一个元素。</li>\n<li>左侧指针的当前值与“支点”进行比较，如果小于“支点”则指针向后移动一位，否则指针停在原地。</li>\n<li>右侧指针的当前值与“支点”进行比较，如果大于“支点”则指针向前移动一位，否则指针停在原地。</li>\n<li>左侧指针的位置与右侧指针的位置进行比较，如果前者大于等于后者，则本次排序结束；否则，左侧指针的值与右侧指针的值相交换。</li>\n<li>对左右两侧重复第2至5步。</li>\n</ol></div>\n<p>以对数组[3, 2, 4, 5, 1] 进行从小到大排序为例，步骤如下：</p>\n<div class=\"note info\"><ol>\n<li>选择中间值“4”作为“支点”。</li>\n<li>第一个元素3小于4，左侧指针向后移动一位；第二个元素2小于4，左侧指针向后移动一位；第三个元素4等于4，左侧指针停在这个位置（数组的第2位）。</li>\n<li>倒数第一个元素1小于4，右侧指针停在这个位置（数组的第4位）。</li>\n<li>左侧指针的位置（2）小于右侧指针的位置（4），两个位置的值互换，数组变成[3, 2, 1, 5, 4]。</li>\n<li>左侧指针向后移动一位，第四个元素5大于4，左侧指针停在这个位置（数组的第3位）。</li>\n<li>右侧指针向前移动一位，第四个元素5大于4，右侧指针移动向前移动一位，第三个元素1小于4，右侧指针停在这个位置（数组的第3位）。</li>\n<li>左侧指针的位置（3）大于右侧指针的位置（2），本次排序结束。</li>\n<li>对 [3, 2, 1]和[5, 4]两部分各自不断重复上述步骤，直到排序完成。</li>\n</ol></div>\n\n<h4 id=\"算法实现\"><a href=\"#算法实现\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h4><p>首先部署一个swap函数，用于互换两个位置的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swap</span>(<span class=\"params\">myArray, firstIndex, secondIndex</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> temp = myArray[firstIndex];</span><br><span class=\"line\">    myArray[firstIndex] = myArray[secondIndex];</span><br><span class=\"line\">    myArray[secondIndex] = temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后，部署一个partition函数，用于完成一轮排序。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">partition</span>(<span class=\"params\">myArray, left, right</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> pivot   = myArray[<span class=\"built_in\">Math</span>.floor((right + left) / <span class=\"number\">2</span>)],</span><br><span class=\"line\">        i       = left,</span><br><span class=\"line\">        j       = right;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt;= j) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (myArray[i] &lt; pivot) &#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (myArray[j] &gt; pivot) &#123;</span><br><span class=\"line\">            j--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt;= j) &#123;</span><br><span class=\"line\">            swap(myArray, i, j);</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">            j--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来，就是递归上面的过程，完成整个排序。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort</span>(<span class=\"params\">myArray, left, right</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (myArray.length &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> myArray;</span><br><span class=\"line\"></span><br><span class=\"line\">\tleft = (<span class=\"keyword\">typeof</span> left !== <span class=\"string\">\"number\"</span> ? <span class=\"number\">0</span> : left);</span><br><span class=\"line\"></span><br><span class=\"line\">\tright = (<span class=\"keyword\">typeof</span> right !== <span class=\"string\">\"number\"</span> ? myArray.length - <span class=\"number\">1</span> : right);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> index  = partition(myArray, left, right);</span><br><span class=\"line\"></span><br><span class=\"line\">\t <span class=\"keyword\">if</span> (left &lt; index - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            quickSort(myArray, left, index - <span class=\"number\">1</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t <span class=\"keyword\">if</span> (index &lt; right) &#123;</span><br><span class=\"line\">            quickSort(myArray, index, right);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t <span class=\"keyword\">return</span> myArray;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"阮一峰版\"><a href=\"#阮一峰版\" class=\"headerlink\" title=\"阮一峰版\"></a>阮一峰版</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort</span>(<span class=\"params\">arr</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arr.length&lt;<span class=\"number\">2</span>) <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pivotIndex = <span class=\"built_in\">Math</span>.floor(arr.length/<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pivot = arr.splice(pivotIndex, <span class=\"number\">1</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = []</span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[i]&lt;pivot)&#123;</span><br><span class=\"line\">            left.push(arr[i])</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            right.push(arr[i])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> quickSort(left).concat([pivot], quickSort(right))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"简单好记版（ES6）\"><a href=\"#简单好记版（ES6）\" class=\"headerlink\" title=\"简单好记版（ES6）\"></a>简单好记版（ES6）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort</span>(<span class=\"params\">arr</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!arr || arr.length&lt;<span class=\"number\">2</span>) <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pivot = arr.shift()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = arr.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item &lt; pivot)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = arr.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item&gt;=pivot)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> quickSort(left).concat([pivot], quickSort(right))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"闭包的考查","date":"2020-09-04T12:24:04.000Z","_content":"关于闭包的考查部分题目如下：\n<!--more-->\n首先抛出一个问题\n- 你理解的闭包是什么？优缺点有哪些？\n    1. 保护： 形成一个私有作用域，保护里面私有变量不受外界干扰\n    2. 保存： 形成一个不销毁的栈内存，把所需要的变量保存起来以便后续使用\n    -  缺点： 形成不销毁的栈内存，比较耗性能\n1. 输出代码结果\n```javascript\nconsole.log(a)\nvar a = 12\nfunction fn(){\n    console.log(a)\n    var a = 13 // 若此处去掉var，则答案选A\n}\nfn()\nconsole.log(a)\n/**\n * A、undefined, 12, 13\n * B、undefined, undefined, 12\n * C、undefined, undefined, 13\n * D、有程序报错\n/\n/**\n * 答案选B\n * 1，变量提升\n * 2，顺序执行\n * 3，执行fn，形成一个私有作用域=》形参赋值，变量提升，顺序执行\n/\n```\n2. 输出代码结果\n```javascript\nvar foo = 1\nfunction bar(){\n    if(!foo){ // 不管条件是否成立，都要进行变量提示\n        var foo = 10\n    }\n    console.log(foo)\n}\nbar()\n/**\n * 答案选B 变量提升后foo= undefined，条件为true\n * A、1\n * B、10\n * C、undefined\n * D、报错\n/\n```\n3. 输出代码结果\n```javascript\n// => 全局下的变量提升var n,var c, a=AAAFFF\nvar n = 0\nfunction a(){\n    // 私有作用域，形参赋值：无，变量提升：var n， b=BBBFFF\n    var n = 10 //  n=> 11 n=> 12\n    function b(){\n        // 私有作用域\n        n++ // n为上级作用域的\n        console.log(n)\n    }\n    b() // 输出11\n    return b // return BBBFFF\n}\nvar c = a() // c为BBBFFF，此时a函数中的私有作用域不销毁\nc() //再次执行BBBFFF n=>12\nconsole.log(n) // 输出全局n， 即 0\n/**\n * 选C\n * A、1 1 1\n * B、11 11 0\n * C、11 12 0\n * D、11 12 12\n/\n```\n4. 输出代码结果\n```javascript\n// 全局下的变量提升var a, var b, var c, 声明并定义test = AAAFFF\nvar a = 10, b = 11, c = 12\nfunction test(a){\n    // 私有作用域a=10，var b \n    a = 1 // 私有a由10变为1\n    var b = 2 // 私有b=2\n    c = 3  // 全局c由12变为3\n}\ntest(10)\nconsole.log(a) // 全局a = 10\nconsole.log(b) // 全局b = 11\nconsole.log(c) // 全局c = 3\n```\n5. 输出代码结果\n```javascript\n// 首先不管条件是否成立，都要进行变量提升\nif(!('a' in window)){ // 变量提升后window.a = undefined => 'a' in window 为true\n    var a = 1 // a = 1 未执行\n}\nconsole.log(a) // undefined\n```\n6. 输出代码结果\n```javascript\n// 全局变量提升 var a, 声明及定义b=BBBFFF\nvar a = 4\nfunction b(x, y, a){\n    // 执行b形成私有作用域x=1,y=2,a=3\n    console.log(a) // 私有a=3\n    arguments[2] = 10 // 非严格模式下，arguments和形参有映射关系 a 变为 10\n    console.log(a) // 私有a=10\n}\na = b(1, 2, 3) // b函数没有返回值，此时a为undefined\nconsole.log(a) // 全局a变为undefined\n```\n7. 输出代码结果\n```javascript\n// 全局变量提升 var a, var f, fn = AAAFFF\nvar a = 9\nfunction fn(){\n    a = 0 // 执行fn形成私有作用域，全局a变为0， return BBBFFF\n    return function(b){\n        return b + a++\n    }\n}\nvar f = fn() // 不销毁\nconsole.log(f(5)) // 5+a++ => 5+0++ => 5 // 此时全局a变为1 BBBFFF111销毁 AAAFFF不销毁\nconsole.log(fn()(5)) // fn重新开辟空间并执行，a重置为0=> fn()(5) => 5+0++ => 5 // 此时a为1 fn=AAAFFF临时不销毁，等fn()()即BBBFFF222执行完毕后再销毁\nconsole.log(f(5)) // 5+a++ => 5+1++ => 6 // 此时a为2 BBBFFF222销毁 AAAFFF不销毁\n```\n8. 输出代码结果\n```javascript\n// 全局变量提升var ary = AAAFFF111, var res, fn = AAAFFF222\nvar ary = [1, 2, 3, 4]\nfunction fn(ary){\n    // 将ary的地址赋值给形参， 私有ary和全局ary指向同一个内存空间。没有直接关系，但是存在间接关系\n    ary[0] = 0 // 私有ary = [0, 2, 3, 4] =>全局ary的值也同时被改变\n    ary = [0] // 私有ary重新开辟空间 ary = [0]，此时的ary与全局ary无任何关联\n    ary[0] = 100 // 私有ary重新赋值 ary = [100]\n    return ary // 返回私有ary = [100]\n}\nvar res = fn(ary)\nconsole.log(ary) // 全局ary = [0, 2, 3, 4]\nconsole.log(res) // ary = [100]\n```\n9. 输出代码结果\n```javascript\nfunction fn(i){\n    return function(n){\n        console.log(n+(--i))\n    }\n}\nvar f = fn(2) // 不销毁\nf(3)//4  不销毁  i变为了1\nfn(4)(5)//8 重新形参赋值，开辟空间\nfn(6)(7)//12 重新形参赋值，开辟空间\nf(8)//8  不销毁  i变为了0\n// 此题与第7题类似\n```\n10. 输出代码结果\n```javascript\n// 全局变量提升var num,var obj, var fn\nvar num = 10\nvar obj = { num: 20 } // 开辟空间\nobj.fn = (function (num){ // 添加属性fn=\n    this.num = num*3 // this: window =>windwow.num = 60\n    num++ // => num = 21\n    return function(n){ //开辟空间BBBFFF111\n        this.num += n\n        num++ // 让上级作用域中num++ => 22\n        console.log(num)\n    }\n})(obj.num)\nvar fn = obj.fn // BBBFFF111 不销毁\nfn(5) // window.num = window.num+5 => window.num = 60+5 = 65\nobj.fn(10) // this: obj => num+=n => num = 30 // num++ => 23\nconsole.log(num, obj.num) // 65 30 \n```","source":"_posts/闭包的考查.md","raw":"---\ntitle: 闭包的考查\ndate: 2020-09-04 20:24:04\ncategories:\n    - JavaScript\ntags:\n    - 面试题\n---\n关于闭包的考查部分题目如下：\n<!--more-->\n首先抛出一个问题\n- 你理解的闭包是什么？优缺点有哪些？\n    1. 保护： 形成一个私有作用域，保护里面私有变量不受外界干扰\n    2. 保存： 形成一个不销毁的栈内存，把所需要的变量保存起来以便后续使用\n    -  缺点： 形成不销毁的栈内存，比较耗性能\n1. 输出代码结果\n```javascript\nconsole.log(a)\nvar a = 12\nfunction fn(){\n    console.log(a)\n    var a = 13 // 若此处去掉var，则答案选A\n}\nfn()\nconsole.log(a)\n/**\n * A、undefined, 12, 13\n * B、undefined, undefined, 12\n * C、undefined, undefined, 13\n * D、有程序报错\n/\n/**\n * 答案选B\n * 1，变量提升\n * 2，顺序执行\n * 3，执行fn，形成一个私有作用域=》形参赋值，变量提升，顺序执行\n/\n```\n2. 输出代码结果\n```javascript\nvar foo = 1\nfunction bar(){\n    if(!foo){ // 不管条件是否成立，都要进行变量提示\n        var foo = 10\n    }\n    console.log(foo)\n}\nbar()\n/**\n * 答案选B 变量提升后foo= undefined，条件为true\n * A、1\n * B、10\n * C、undefined\n * D、报错\n/\n```\n3. 输出代码结果\n```javascript\n// => 全局下的变量提升var n,var c, a=AAAFFF\nvar n = 0\nfunction a(){\n    // 私有作用域，形参赋值：无，变量提升：var n， b=BBBFFF\n    var n = 10 //  n=> 11 n=> 12\n    function b(){\n        // 私有作用域\n        n++ // n为上级作用域的\n        console.log(n)\n    }\n    b() // 输出11\n    return b // return BBBFFF\n}\nvar c = a() // c为BBBFFF，此时a函数中的私有作用域不销毁\nc() //再次执行BBBFFF n=>12\nconsole.log(n) // 输出全局n， 即 0\n/**\n * 选C\n * A、1 1 1\n * B、11 11 0\n * C、11 12 0\n * D、11 12 12\n/\n```\n4. 输出代码结果\n```javascript\n// 全局下的变量提升var a, var b, var c, 声明并定义test = AAAFFF\nvar a = 10, b = 11, c = 12\nfunction test(a){\n    // 私有作用域a=10，var b \n    a = 1 // 私有a由10变为1\n    var b = 2 // 私有b=2\n    c = 3  // 全局c由12变为3\n}\ntest(10)\nconsole.log(a) // 全局a = 10\nconsole.log(b) // 全局b = 11\nconsole.log(c) // 全局c = 3\n```\n5. 输出代码结果\n```javascript\n// 首先不管条件是否成立，都要进行变量提升\nif(!('a' in window)){ // 变量提升后window.a = undefined => 'a' in window 为true\n    var a = 1 // a = 1 未执行\n}\nconsole.log(a) // undefined\n```\n6. 输出代码结果\n```javascript\n// 全局变量提升 var a, 声明及定义b=BBBFFF\nvar a = 4\nfunction b(x, y, a){\n    // 执行b形成私有作用域x=1,y=2,a=3\n    console.log(a) // 私有a=3\n    arguments[2] = 10 // 非严格模式下，arguments和形参有映射关系 a 变为 10\n    console.log(a) // 私有a=10\n}\na = b(1, 2, 3) // b函数没有返回值，此时a为undefined\nconsole.log(a) // 全局a变为undefined\n```\n7. 输出代码结果\n```javascript\n// 全局变量提升 var a, var f, fn = AAAFFF\nvar a = 9\nfunction fn(){\n    a = 0 // 执行fn形成私有作用域，全局a变为0， return BBBFFF\n    return function(b){\n        return b + a++\n    }\n}\nvar f = fn() // 不销毁\nconsole.log(f(5)) // 5+a++ => 5+0++ => 5 // 此时全局a变为1 BBBFFF111销毁 AAAFFF不销毁\nconsole.log(fn()(5)) // fn重新开辟空间并执行，a重置为0=> fn()(5) => 5+0++ => 5 // 此时a为1 fn=AAAFFF临时不销毁，等fn()()即BBBFFF222执行完毕后再销毁\nconsole.log(f(5)) // 5+a++ => 5+1++ => 6 // 此时a为2 BBBFFF222销毁 AAAFFF不销毁\n```\n8. 输出代码结果\n```javascript\n// 全局变量提升var ary = AAAFFF111, var res, fn = AAAFFF222\nvar ary = [1, 2, 3, 4]\nfunction fn(ary){\n    // 将ary的地址赋值给形参， 私有ary和全局ary指向同一个内存空间。没有直接关系，但是存在间接关系\n    ary[0] = 0 // 私有ary = [0, 2, 3, 4] =>全局ary的值也同时被改变\n    ary = [0] // 私有ary重新开辟空间 ary = [0]，此时的ary与全局ary无任何关联\n    ary[0] = 100 // 私有ary重新赋值 ary = [100]\n    return ary // 返回私有ary = [100]\n}\nvar res = fn(ary)\nconsole.log(ary) // 全局ary = [0, 2, 3, 4]\nconsole.log(res) // ary = [100]\n```\n9. 输出代码结果\n```javascript\nfunction fn(i){\n    return function(n){\n        console.log(n+(--i))\n    }\n}\nvar f = fn(2) // 不销毁\nf(3)//4  不销毁  i变为了1\nfn(4)(5)//8 重新形参赋值，开辟空间\nfn(6)(7)//12 重新形参赋值，开辟空间\nf(8)//8  不销毁  i变为了0\n// 此题与第7题类似\n```\n10. 输出代码结果\n```javascript\n// 全局变量提升var num,var obj, var fn\nvar num = 10\nvar obj = { num: 20 } // 开辟空间\nobj.fn = (function (num){ // 添加属性fn=\n    this.num = num*3 // this: window =>windwow.num = 60\n    num++ // => num = 21\n    return function(n){ //开辟空间BBBFFF111\n        this.num += n\n        num++ // 让上级作用域中num++ => 22\n        console.log(num)\n    }\n})(obj.num)\nvar fn = obj.fn // BBBFFF111 不销毁\nfn(5) // window.num = window.num+5 => window.num = 60+5 = 65\nobj.fn(10) // this: obj => num+=n => num = 30 // num++ => 23\nconsole.log(num, obj.num) // 65 30 \n```","slug":"闭包的考查","published":1,"updated":"2020-09-05T15:17:10.105Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmdwh6nxv00298ubpc4sf4wox","content":"<p>关于闭包的考查部分题目如下：</p>\n<a id=\"more\"></a>\n<p>首先抛出一个问题</p>\n<ul>\n<li>你理解的闭包是什么？优缺点有哪些？<ol>\n<li>保护： 形成一个私有作用域，保护里面私有变量不受外界干扰</li>\n<li>保存： 形成一个不销毁的栈内存，把所需要的变量保存起来以便后续使用</li>\n</ol>\n<ul>\n<li>缺点： 形成不销毁的栈内存，比较耗性能</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>输出代码结果<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">13</span> <span class=\"comment\">// 若此处去掉var，则答案选A</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * A、undefined, 12, 13</span></span><br><span class=\"line\"><span class=\"comment\"> * B、undefined, undefined, 12</span></span><br><span class=\"line\"><span class=\"comment\"> * C、undefined, undefined, 13</span></span><br><span class=\"line\"><span class=\"comment\"> * D、有程序报错</span></span><br><span class=\"line\"><span class=\"comment\">/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 答案选B</span></span><br><span class=\"line\"><span class=\"comment\"> * 1，变量提升</span></span><br><span class=\"line\"><span class=\"comment\"> * 2，顺序执行</span></span><br><span class=\"line\"><span class=\"comment\"> * 3，执行fn，形成一个私有作用域=》形参赋值，变量提升，顺序执行</span></span><br><span class=\"line\"><span class=\"comment\">/</span></span><br></pre></td></tr></table></figure></li>\n<li>输出代码结果<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!foo)&#123; <span class=\"comment\">// 不管条件是否成立，都要进行变量提示</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> foo = <span class=\"number\">10</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(foo)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bar()</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 答案选B 变量提升后foo= undefined，条件为true</span></span><br><span class=\"line\"><span class=\"comment\"> * A、1</span></span><br><span class=\"line\"><span class=\"comment\"> * B、10</span></span><br><span class=\"line\"><span class=\"comment\"> * C、undefined</span></span><br><span class=\"line\"><span class=\"comment\"> * D、报错</span></span><br><span class=\"line\"><span class=\"comment\">/</span></span><br></pre></td></tr></table></figure></li>\n<li>输出代码结果<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// =&gt; 全局下的变量提升var n,var c, a=AAAFFF</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 私有作用域，形参赋值：无，变量提升：var n， b=BBBFFF</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> n = <span class=\"number\">10</span> <span class=\"comment\">//  n=&gt; 11 n=&gt; 12</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 私有作用域</span></span><br><span class=\"line\">        n++ <span class=\"comment\">// n为上级作用域的</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(n)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    b() <span class=\"comment\">// 输出11</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> b <span class=\"comment\">// return BBBFFF</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = a() <span class=\"comment\">// c为BBBFFF，此时a函数中的私有作用域不销毁</span></span><br><span class=\"line\">c() <span class=\"comment\">//再次执行BBBFFF n=&gt;12</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(n) <span class=\"comment\">// 输出全局n， 即 0</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 选C</span></span><br><span class=\"line\"><span class=\"comment\"> * A、1 1 1</span></span><br><span class=\"line\"><span class=\"comment\"> * B、11 11 0</span></span><br><span class=\"line\"><span class=\"comment\"> * C、11 12 0</span></span><br><span class=\"line\"><span class=\"comment\"> * D、11 12 12</span></span><br><span class=\"line\"><span class=\"comment\">/</span></span><br></pre></td></tr></table></figure></li>\n<li>输出代码结果<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 全局下的变量提升var a, var b, var c, 声明并定义test = AAAFFF</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">10</span>, b = <span class=\"number\">11</span>, c = <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">a</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 私有作用域a=10，var b </span></span><br><span class=\"line\">    a = <span class=\"number\">1</span> <span class=\"comment\">// 私有a由10变为1</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"number\">2</span> <span class=\"comment\">// 私有b=2</span></span><br><span class=\"line\">    c = <span class=\"number\">3</span>  <span class=\"comment\">// 全局c由12变为3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// 全局a = 10</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b) <span class=\"comment\">// 全局b = 11</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c) <span class=\"comment\">// 全局c = 3</span></span><br></pre></td></tr></table></figure></li>\n<li>输出代码结果<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 首先不管条件是否成立，都要进行变量提升</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!(<span class=\"string\">'a'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">window</span>))&#123; <span class=\"comment\">// 变量提升后window.a = undefined =&gt; 'a' in window 为true</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">1</span> <span class=\"comment\">// a = 1 未执行</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure></li>\n<li>输出代码结果<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 全局变量提升 var a, 声明及定义b=BBBFFF</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\">x, y, a</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 执行b形成私有作用域x=1,y=2,a=3</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// 私有a=3</span></span><br><span class=\"line\">    <span class=\"built_in\">arguments</span>[<span class=\"number\">2</span>] = <span class=\"number\">10</span> <span class=\"comment\">// 非严格模式下，arguments和形参有映射关系 a 变为 10</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// 私有a=10</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a = b(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>) <span class=\"comment\">// b函数没有返回值，此时a为undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// 全局a变为undefined</span></span><br></pre></td></tr></table></figure></li>\n<li>输出代码结果<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 全局变量提升 var a, var f, fn = AAAFFF</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    a = <span class=\"number\">0</span> <span class=\"comment\">// 执行fn形成私有作用域，全局a变为0， return BBBFFF</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">b</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b + a++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = fn() <span class=\"comment\">// 不销毁</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f(<span class=\"number\">5</span>)) <span class=\"comment\">// 5+a++ =&gt; 5+0++ =&gt; 5 // 此时全局a变为1 BBBFFF111销毁 AAAFFF不销毁</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fn()(<span class=\"number\">5</span>)) <span class=\"comment\">// fn重新开辟空间并执行，a重置为0=&gt; fn()(5) =&gt; 5+0++ =&gt; 5 // 此时a为1 fn=AAAFFF临时不销毁，等fn()()即BBBFFF222执行完毕后再销毁</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f(<span class=\"number\">5</span>)) <span class=\"comment\">// 5+a++ =&gt; 5+1++ =&gt; 6 // 此时a为2 BBBFFF222销毁 AAAFFF不销毁</span></span><br></pre></td></tr></table></figure></li>\n<li>输出代码结果<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 全局变量提升var ary = AAAFFF111, var res, fn = AAAFFF222</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">ary</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将ary的地址赋值给形参， 私有ary和全局ary指向同一个内存空间。没有直接关系，但是存在间接关系</span></span><br><span class=\"line\">    ary[<span class=\"number\">0</span>] = <span class=\"number\">0</span> <span class=\"comment\">// 私有ary = [0, 2, 3, 4] =&gt;全局ary的值也同时被改变</span></span><br><span class=\"line\">    ary = [<span class=\"number\">0</span>] <span class=\"comment\">// 私有ary重新开辟空间 ary = [0]，此时的ary与全局ary无任何关联</span></span><br><span class=\"line\">    ary[<span class=\"number\">0</span>] = <span class=\"number\">100</span> <span class=\"comment\">// 私有ary重新赋值 ary = [100]</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ary <span class=\"comment\">// 返回私有ary = [100]</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> res = fn(ary)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary) <span class=\"comment\">// 全局ary = [0, 2, 3, 4]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(res) <span class=\"comment\">// ary = [100]</span></span><br></pre></td></tr></table></figure></li>\n<li>输出代码结果<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">i</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(n+(--i))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = fn(<span class=\"number\">2</span>) <span class=\"comment\">// 不销毁</span></span><br><span class=\"line\">f(<span class=\"number\">3</span>)<span class=\"comment\">//4  不销毁  i变为了1</span></span><br><span class=\"line\">fn(<span class=\"number\">4</span>)(<span class=\"number\">5</span>)<span class=\"comment\">//8 重新形参赋值，开辟空间</span></span><br><span class=\"line\">fn(<span class=\"number\">6</span>)(<span class=\"number\">7</span>)<span class=\"comment\">//12 重新形参赋值，开辟空间</span></span><br><span class=\"line\">f(<span class=\"number\">8</span>)<span class=\"comment\">//8  不销毁  i变为了0</span></span><br><span class=\"line\"><span class=\"comment\">// 此题与第7题类似</span></span><br></pre></td></tr></table></figure></li>\n<li>输出代码结果<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 全局变量提升var num,var obj, var fn</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">num</span>: <span class=\"number\">20</span> &#125; <span class=\"comment\">// 开辟空间</span></span><br><span class=\"line\">obj.fn = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">num</span>)</span>&#123; <span class=\"comment\">// 添加属性fn=</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.num = num*<span class=\"number\">3</span> <span class=\"comment\">// this: window =&gt;windwow.num = 60</span></span><br><span class=\"line\">    num++ <span class=\"comment\">// =&gt; num = 21</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123; <span class=\"comment\">//开辟空间BBBFFF111</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.num += n</span><br><span class=\"line\">        num++ <span class=\"comment\">// 让上级作用域中num++ =&gt; 22</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(num)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)(obj.num)</span><br><span class=\"line\"><span class=\"keyword\">var</span> fn = obj.fn <span class=\"comment\">// BBBFFF111 不销毁</span></span><br><span class=\"line\">fn(<span class=\"number\">5</span>) <span class=\"comment\">// window.num = window.num+5 =&gt; window.num = 60+5 = 65</span></span><br><span class=\"line\">obj.fn(<span class=\"number\">10</span>) <span class=\"comment\">// this: obj =&gt; num+=n =&gt; num = 30 // num++ =&gt; 23</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num, obj.num) <span class=\"comment\">// 65 30</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>关于闭包的考查部分题目如下：</p>","more":"<p>首先抛出一个问题</p>\n<ul>\n<li>你理解的闭包是什么？优缺点有哪些？<ol>\n<li>保护： 形成一个私有作用域，保护里面私有变量不受外界干扰</li>\n<li>保存： 形成一个不销毁的栈内存，把所需要的变量保存起来以便后续使用</li>\n</ol>\n<ul>\n<li>缺点： 形成不销毁的栈内存，比较耗性能</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>输出代码结果<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">13</span> <span class=\"comment\">// 若此处去掉var，则答案选A</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * A、undefined, 12, 13</span></span><br><span class=\"line\"><span class=\"comment\"> * B、undefined, undefined, 12</span></span><br><span class=\"line\"><span class=\"comment\"> * C、undefined, undefined, 13</span></span><br><span class=\"line\"><span class=\"comment\"> * D、有程序报错</span></span><br><span class=\"line\"><span class=\"comment\">/</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 答案选B</span></span><br><span class=\"line\"><span class=\"comment\"> * 1，变量提升</span></span><br><span class=\"line\"><span class=\"comment\"> * 2，顺序执行</span></span><br><span class=\"line\"><span class=\"comment\"> * 3，执行fn，形成一个私有作用域=》形参赋值，变量提升，顺序执行</span></span><br><span class=\"line\"><span class=\"comment\">/</span></span><br></pre></td></tr></table></figure></li>\n<li>输出代码结果<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!foo)&#123; <span class=\"comment\">// 不管条件是否成立，都要进行变量提示</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> foo = <span class=\"number\">10</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(foo)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bar()</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 答案选B 变量提升后foo= undefined，条件为true</span></span><br><span class=\"line\"><span class=\"comment\"> * A、1</span></span><br><span class=\"line\"><span class=\"comment\"> * B、10</span></span><br><span class=\"line\"><span class=\"comment\"> * C、undefined</span></span><br><span class=\"line\"><span class=\"comment\"> * D、报错</span></span><br><span class=\"line\"><span class=\"comment\">/</span></span><br></pre></td></tr></table></figure></li>\n<li>输出代码结果<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// =&gt; 全局下的变量提升var n,var c, a=AAAFFF</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 私有作用域，形参赋值：无，变量提升：var n， b=BBBFFF</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> n = <span class=\"number\">10</span> <span class=\"comment\">//  n=&gt; 11 n=&gt; 12</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 私有作用域</span></span><br><span class=\"line\">        n++ <span class=\"comment\">// n为上级作用域的</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(n)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    b() <span class=\"comment\">// 输出11</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> b <span class=\"comment\">// return BBBFFF</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = a() <span class=\"comment\">// c为BBBFFF，此时a函数中的私有作用域不销毁</span></span><br><span class=\"line\">c() <span class=\"comment\">//再次执行BBBFFF n=&gt;12</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(n) <span class=\"comment\">// 输出全局n， 即 0</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 选C</span></span><br><span class=\"line\"><span class=\"comment\"> * A、1 1 1</span></span><br><span class=\"line\"><span class=\"comment\"> * B、11 11 0</span></span><br><span class=\"line\"><span class=\"comment\"> * C、11 12 0</span></span><br><span class=\"line\"><span class=\"comment\"> * D、11 12 12</span></span><br><span class=\"line\"><span class=\"comment\">/</span></span><br></pre></td></tr></table></figure></li>\n<li>输出代码结果<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 全局下的变量提升var a, var b, var c, 声明并定义test = AAAFFF</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">10</span>, b = <span class=\"number\">11</span>, c = <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">a</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 私有作用域a=10，var b </span></span><br><span class=\"line\">    a = <span class=\"number\">1</span> <span class=\"comment\">// 私有a由10变为1</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"number\">2</span> <span class=\"comment\">// 私有b=2</span></span><br><span class=\"line\">    c = <span class=\"number\">3</span>  <span class=\"comment\">// 全局c由12变为3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// 全局a = 10</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b) <span class=\"comment\">// 全局b = 11</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c) <span class=\"comment\">// 全局c = 3</span></span><br></pre></td></tr></table></figure></li>\n<li>输出代码结果<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 首先不管条件是否成立，都要进行变量提升</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!(<span class=\"string\">'a'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">window</span>))&#123; <span class=\"comment\">// 变量提升后window.a = undefined =&gt; 'a' in window 为true</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">1</span> <span class=\"comment\">// a = 1 未执行</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure></li>\n<li>输出代码结果<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 全局变量提升 var a, 声明及定义b=BBBFFF</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\">x, y, a</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 执行b形成私有作用域x=1,y=2,a=3</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// 私有a=3</span></span><br><span class=\"line\">    <span class=\"built_in\">arguments</span>[<span class=\"number\">2</span>] = <span class=\"number\">10</span> <span class=\"comment\">// 非严格模式下，arguments和形参有映射关系 a 变为 10</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// 私有a=10</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a = b(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>) <span class=\"comment\">// b函数没有返回值，此时a为undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// 全局a变为undefined</span></span><br></pre></td></tr></table></figure></li>\n<li>输出代码结果<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 全局变量提升 var a, var f, fn = AAAFFF</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    a = <span class=\"number\">0</span> <span class=\"comment\">// 执行fn形成私有作用域，全局a变为0， return BBBFFF</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">b</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b + a++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = fn() <span class=\"comment\">// 不销毁</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f(<span class=\"number\">5</span>)) <span class=\"comment\">// 5+a++ =&gt; 5+0++ =&gt; 5 // 此时全局a变为1 BBBFFF111销毁 AAAFFF不销毁</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fn()(<span class=\"number\">5</span>)) <span class=\"comment\">// fn重新开辟空间并执行，a重置为0=&gt; fn()(5) =&gt; 5+0++ =&gt; 5 // 此时a为1 fn=AAAFFF临时不销毁，等fn()()即BBBFFF222执行完毕后再销毁</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f(<span class=\"number\">5</span>)) <span class=\"comment\">// 5+a++ =&gt; 5+1++ =&gt; 6 // 此时a为2 BBBFFF222销毁 AAAFFF不销毁</span></span><br></pre></td></tr></table></figure></li>\n<li>输出代码结果<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 全局变量提升var ary = AAAFFF111, var res, fn = AAAFFF222</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">ary</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将ary的地址赋值给形参， 私有ary和全局ary指向同一个内存空间。没有直接关系，但是存在间接关系</span></span><br><span class=\"line\">    ary[<span class=\"number\">0</span>] = <span class=\"number\">0</span> <span class=\"comment\">// 私有ary = [0, 2, 3, 4] =&gt;全局ary的值也同时被改变</span></span><br><span class=\"line\">    ary = [<span class=\"number\">0</span>] <span class=\"comment\">// 私有ary重新开辟空间 ary = [0]，此时的ary与全局ary无任何关联</span></span><br><span class=\"line\">    ary[<span class=\"number\">0</span>] = <span class=\"number\">100</span> <span class=\"comment\">// 私有ary重新赋值 ary = [100]</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ary <span class=\"comment\">// 返回私有ary = [100]</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> res = fn(ary)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary) <span class=\"comment\">// 全局ary = [0, 2, 3, 4]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(res) <span class=\"comment\">// ary = [100]</span></span><br></pre></td></tr></table></figure></li>\n<li>输出代码结果<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">i</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(n+(--i))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = fn(<span class=\"number\">2</span>) <span class=\"comment\">// 不销毁</span></span><br><span class=\"line\">f(<span class=\"number\">3</span>)<span class=\"comment\">//4  不销毁  i变为了1</span></span><br><span class=\"line\">fn(<span class=\"number\">4</span>)(<span class=\"number\">5</span>)<span class=\"comment\">//8 重新形参赋值，开辟空间</span></span><br><span class=\"line\">fn(<span class=\"number\">6</span>)(<span class=\"number\">7</span>)<span class=\"comment\">//12 重新形参赋值，开辟空间</span></span><br><span class=\"line\">f(<span class=\"number\">8</span>)<span class=\"comment\">//8  不销毁  i变为了0</span></span><br><span class=\"line\"><span class=\"comment\">// 此题与第7题类似</span></span><br></pre></td></tr></table></figure></li>\n<li>输出代码结果<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 全局变量提升var num,var obj, var fn</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">num</span>: <span class=\"number\">20</span> &#125; <span class=\"comment\">// 开辟空间</span></span><br><span class=\"line\">obj.fn = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">num</span>)</span>&#123; <span class=\"comment\">// 添加属性fn=</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.num = num*<span class=\"number\">3</span> <span class=\"comment\">// this: window =&gt;windwow.num = 60</span></span><br><span class=\"line\">    num++ <span class=\"comment\">// =&gt; num = 21</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123; <span class=\"comment\">//开辟空间BBBFFF111</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.num += n</span><br><span class=\"line\">        num++ <span class=\"comment\">// 让上级作用域中num++ =&gt; 22</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(num)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)(obj.num)</span><br><span class=\"line\"><span class=\"keyword\">var</span> fn = obj.fn <span class=\"comment\">// BBBFFF111 不销毁</span></span><br><span class=\"line\">fn(<span class=\"number\">5</span>) <span class=\"comment\">// window.num = window.num+5 =&gt; window.num = 60+5 = 65</span></span><br><span class=\"line\">obj.fn(<span class=\"number\">10</span>) <span class=\"comment\">// this: obj =&gt; num+=n =&gt; num = 30 // num++ =&gt; 23</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num, obj.num) <span class=\"comment\">// 65 30</span></span><br></pre></td></tr></table></figure></li>\n</ol>"},{"title":"面经(虾皮)","date":"2020-09-04T10:42:32.000Z","_content":"以下为虾皮一面部分面试题:\n<!--more-->\n1. 输出以下结果\n```javascript\nfunction Parent(){\n    this.a = 'Parent';\n}\nfunction Tom() {\n    this.a = 'Tom'\n}\nParent.__proto__.print = function(){ // Parent.__proto__实际上指向Object.prototype\n    this.a = 4\n    console.log(this.a)\n}\nParent.print() // 4\nTom.print() // 4\nvar child = new Parent()\nconsole.log(child.a) // Parent\nchild.print() // 报错 child.print is not a function\n```\n2. f能不能拿到a方法和b方法？\n```javascript\nvar F = function(){};\nObject.prototype.a = function(){};\nFunction.prototype.b = function(){};\nvar f = new F();\n// f最终指向为Object的prototype，所有只能拿到a方法\n```\n\n","source":"_posts/面经-虾皮.md","raw":"---\ntitle: 面经(虾皮)\ndate: 2020-09-04 18:42:32\ncategories:\n    - JavaScript\ntags:\n    - 面试题\n---\n以下为虾皮一面部分面试题:\n<!--more-->\n1. 输出以下结果\n```javascript\nfunction Parent(){\n    this.a = 'Parent';\n}\nfunction Tom() {\n    this.a = 'Tom'\n}\nParent.__proto__.print = function(){ // Parent.__proto__实际上指向Object.prototype\n    this.a = 4\n    console.log(this.a)\n}\nParent.print() // 4\nTom.print() // 4\nvar child = new Parent()\nconsole.log(child.a) // Parent\nchild.print() // 报错 child.print is not a function\n```\n2. f能不能拿到a方法和b方法？\n```javascript\nvar F = function(){};\nObject.prototype.a = function(){};\nFunction.prototype.b = function(){};\nvar f = new F();\n// f最终指向为Object的prototype，所有只能拿到a方法\n```\n\n","slug":"面经-虾皮","published":1,"updated":"2020-09-04T10:47:54.244Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmdwh6nxv002c8ubp5flk24qf","content":"<p>以下为虾皮一面部分面试题:</p>\n<a id=\"more\"></a>\n<ol>\n<li>输出以下结果<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.a = <span class=\"string\">'Parent'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Tom</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.a = <span class=\"string\">'Tom'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Parent.__proto__.print = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">// Parent.__proto__实际上指向Object.prototype</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.a = <span class=\"number\">4</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Parent.print() <span class=\"comment\">// 4</span></span><br><span class=\"line\">Tom.print() <span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"keyword\">new</span> Parent()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child.a) <span class=\"comment\">// Parent</span></span><br><span class=\"line\">child.print() <span class=\"comment\">// 报错 child.print is not a function</span></span><br></pre></td></tr></table></figure></li>\n<li>f能不能拿到a方法和b方法？<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> F = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.a = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.b = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"keyword\">new</span> F();</span><br><span class=\"line\"><span class=\"comment\">// f最终指向为Object的prototype，所有只能拿到a方法</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>以下为虾皮一面部分面试题:</p>","more":"<ol>\n<li>输出以下结果<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.a = <span class=\"string\">'Parent'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Tom</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.a = <span class=\"string\">'Tom'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Parent.__proto__.print = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">// Parent.__proto__实际上指向Object.prototype</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.a = <span class=\"number\">4</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Parent.print() <span class=\"comment\">// 4</span></span><br><span class=\"line\">Tom.print() <span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"keyword\">new</span> Parent()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child.a) <span class=\"comment\">// Parent</span></span><br><span class=\"line\">child.print() <span class=\"comment\">// 报错 child.print is not a function</span></span><br></pre></td></tr></table></figure></li>\n<li>f能不能拿到a方法和b方法？<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> F = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.a = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.b = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"keyword\">new</span> F();</span><br><span class=\"line\"><span class=\"comment\">// f最终指向为Object的prototype，所有只能拿到a方法</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>"},{"title":"面经(yz)","date":"2020-09-01T09:47:45.000Z","_content":"yz某公司部分面试题，学习记录如下\n<!--more-->\n1. svg是什么？\n    - SVG 意为可缩放矢量图形（Scalable Vector Graphics）。\n    - SVG 使用 XML 格式定义图像。\n2. 什么情况下用vuex？\n    - 多个组件间需要传递参数或状态时\n    - 较大型项目使用\n3. vue本身的更新机制了解吗？ \n    - Vue 实现响应式并不是数据发生变化之后 DOM 立即变化，而是按一定的策略进行 DOM 的更新。\n    - 简单来说，Vue 在修改数据后，视图不会立刻更新，而是等同一事件循环中的所有数据变化完成之后，再统一进行视图更新。\n    - 同步里执行的方法，每个方法里做的事情组成一个事件循环；接下来再次调用的是另一个事件循环。\n    - nextTick：在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，会获取更新后的 DOM。 \n```javascript\n//改变数据\nvm.message = 'changed'\n//想要立即使用更新后的DOM。这样不行，因为设置message后DOM还没有更新\nconsole.log(vm.$el.textContent) // 并不会得到'changed'\n//这样可以，nextTick里面的代码会在DOM更新后执行\nVue.nextTick(function(){\n    console.log(vm.$el.textContent) //可以得到'changed'\n})\n```\n4. computed和watch的了解？\n    - computed 本质是一个惰性求值的观察者，具有缓存性，只有当依赖变化后，第一次访问 computed 属性，才会计算新的值，而 watch 则是当数据发生变化便会调用执行函数\n    - 从使用场景上说，computed 适用一个数据被多个数据影响，而 watch 适用一个数据影响多个数据;\n5. observer和watcher的了解？\n    - Vue 响应系统，其核心有三点：observe、watcher、dep：\n        - observe：遍历 data 中的属性，使用 Object.defineProperty 的 get/set 方法对其进行数据劫持；\n        - dep：每个属性拥有自己的消息订阅器 dep，用于存放所有订阅了该属性的观察者对象；\n        - watcher：观察者（对象），通过 dep 实现对响应属性的监听，监听到结果后，主动触发自己的回调进行响应。\n```javascript\n// 手动注销watch\nconst unwatch = app.$watch('text', {\n    console.log(val);\n}, {\n    deep: false\n})\n```\n6. vue3.0有什么特性？\n    - [此链接内容可供参考](https://www.cnblogs.com/Rivend/p/12630779.html)\n7. vue中的Object.defineProperty()有什么缺陷？\n    - Object.defineProperty无法监控到数组下标的变化，导致通过数组下标添加元素，不能实时响应；\n    - Object.defineProperty只能劫持对象的属性，从而需要对每个对象，每个属性进行遍历，如果，属性值是对象，还需要深度遍。Proxy可以劫持整个对象，并返回一个新的对象。\n    - Proxy不仅可以代理对象，还可以代理数组。还可以代理动态增加的属性。\n8. var与let、const的区别\n    - var声明变量存在变量提升，let和const不存在变量提升， window可以访问到var声明的值\n    - let、const都是块级局部变量\n    - 同一作用域下let和const不能声明同名变量，而var可以\n9. 什么是块级作用域？\n    - JS中作用域有：全局作用域、函数作用域。没有块作用域的概念。ECMAScript 6(简称ES6)中新增了块级作用域。块作用域由 {} 包括，if语句和for语句里面的{}也属于块作用域。\n10. js中的class是怎么实现的？\n    - [此链接内容可供参考](https://blog.csdn.net/weixin_33681778/article/details/88038531)\n11. js基础类型和引用类型\n    - es5中基础类型包括：number，string，null，undefined，Boolean。es6新增了一种基础类型symbol,基础类型的存储是存放在栈中，原因是基础类型存储的空间很小，存放在栈（stack）中方便查找，且不易于改变\n    - 引用类型是指有多个值构成的对象，也就是对象类型比如：Object,Array,Function,Data等，js的引用数据类型是存储在堆中（heap），也就是说存储的变量处的值是一个指针（point），指向存储对象的内存地址。存在堆中的原因是：引用值的大小会改变，所以不能放在栈中，否则会降低变量查询的速度\n12. 哪些方法判断值的类型？\n    - [此链接内容可供参考](https://www.jianshu.com/p/967d6db70437)\n    1. typeof 运算符\n    2. instanceof\n    3. 通过Object下的toString.call()方法来判断\n    4. 根据对象的contructor判断\n13. instance of底层实现机制\n    - 只要右边变量的 prototype 在左边变量的原型链上即可。因此，instanceof 在查找的过程中会遍历左边变量的原型链，直到找到右边变量的 prototype，如果查找失败，则会返回 false\n14. 水平居中的几种方式\n    - [此链接内容可供参考](https://blog.csdn.net/weixin_42291381/article/details/81624935)\n15. BFC(block formatting context)\n    - [此链接内容可供参考](https://zhuanlan.zhihu.com/p/25321647)\n    - 使 BFC 内部浮动元素不会到处乱跑\n    - 和浮动元素产生边界\n16. 如何创建BFC\n    1. float的值不是none。\n    2. position的值不是static或者relative。\n    3. display的值是inline-block、table-cell、flex、table-caption或者inline-flex\n    4. overflow的值不是visible\n17. 触发 BFC\n    - 只要元素满足下面任一条件即可触发 BFC 特性：\n        - body 根元素\n        - 浮动元素：float 除 none 以外的值\n        - 绝对定位元素：position (absolute、fixed)\n        - display 为 inline-block、table-cells、flex\n        - overflow 除了 visible 以外的值 (hidden、auto、scroll)\n18. 流式布局\n    - [此链接内容可供参考](https://www.cnblogs.com/zylseo/p/12599443.html)\n    - [此链接内容可供参考](https://www.jianshu.com/p/4a6e5162e4ee)\n19. css的选择器和对应的优先级\n    - [此链接内容可供参考](https://blog.csdn.net/b954960630/article/details/79560590)\n    - !important > 行内样式>ID选择器 > 类选择器 > 标签 > 通配符 > 继承 > 浏览器默认属性\n20. 移动端自适应布局与字体大小自适应\n    - [此链接内容可供参考](https://blog.csdn.net/w390058785/article/details/80562776)\n    - vw, vh\n    - 用js去计算并设置html标签的font-size大小\n21. em和rem的区别\n    - rem 单位翻译为像素值是由 html 元素的字体大小决定的。 此字体大小会被浏览器中字体大小的设置影响，除非显式重写一个具体单位\n    - em 单位转为像素值，取决于他们使用的字体大小。 此字体大小受从父元素继承过来的字体大小，除非显式重写与一个具体单位\n22. 数组遍历方法\n    - [此链接内容可供参考](https://www.cnblogs.com/QuietWinter/p/9115855.html)\n23. post和get\n    - Get产生一个TCP数据包；Post产生两个TCP数据包。\n    - 对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；对于POST，浏览器先发送header，服务器响应100（continue），然后再发送data，服务器响应200（返回数据）；\n    - GET幂等，POST不幂等(幂等是指同一个请求方法执行多次和仅执行一次的效果完全相同。)\n24. 强制缓存和协商缓存\n    - [此链接内容可供参考](https://blog.csdn.net/zl399615007/article/details/84534884?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param)\n25. http头部字段有哪些？\n    - [此链接内容可供参考](https://www.cnblogs.com/soldierback/p/11714052.html)","source":"_posts/面经-yz.md","raw":"---\ntitle: 面经(yz)\ndate: 2020-09-01 17:47:45\ncategories:\ntags:\n    - 面试题\n---\nyz某公司部分面试题，学习记录如下\n<!--more-->\n1. svg是什么？\n    - SVG 意为可缩放矢量图形（Scalable Vector Graphics）。\n    - SVG 使用 XML 格式定义图像。\n2. 什么情况下用vuex？\n    - 多个组件间需要传递参数或状态时\n    - 较大型项目使用\n3. vue本身的更新机制了解吗？ \n    - Vue 实现响应式并不是数据发生变化之后 DOM 立即变化，而是按一定的策略进行 DOM 的更新。\n    - 简单来说，Vue 在修改数据后，视图不会立刻更新，而是等同一事件循环中的所有数据变化完成之后，再统一进行视图更新。\n    - 同步里执行的方法，每个方法里做的事情组成一个事件循环；接下来再次调用的是另一个事件循环。\n    - nextTick：在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，会获取更新后的 DOM。 \n```javascript\n//改变数据\nvm.message = 'changed'\n//想要立即使用更新后的DOM。这样不行，因为设置message后DOM还没有更新\nconsole.log(vm.$el.textContent) // 并不会得到'changed'\n//这样可以，nextTick里面的代码会在DOM更新后执行\nVue.nextTick(function(){\n    console.log(vm.$el.textContent) //可以得到'changed'\n})\n```\n4. computed和watch的了解？\n    - computed 本质是一个惰性求值的观察者，具有缓存性，只有当依赖变化后，第一次访问 computed 属性，才会计算新的值，而 watch 则是当数据发生变化便会调用执行函数\n    - 从使用场景上说，computed 适用一个数据被多个数据影响，而 watch 适用一个数据影响多个数据;\n5. observer和watcher的了解？\n    - Vue 响应系统，其核心有三点：observe、watcher、dep：\n        - observe：遍历 data 中的属性，使用 Object.defineProperty 的 get/set 方法对其进行数据劫持；\n        - dep：每个属性拥有自己的消息订阅器 dep，用于存放所有订阅了该属性的观察者对象；\n        - watcher：观察者（对象），通过 dep 实现对响应属性的监听，监听到结果后，主动触发自己的回调进行响应。\n```javascript\n// 手动注销watch\nconst unwatch = app.$watch('text', {\n    console.log(val);\n}, {\n    deep: false\n})\n```\n6. vue3.0有什么特性？\n    - [此链接内容可供参考](https://www.cnblogs.com/Rivend/p/12630779.html)\n7. vue中的Object.defineProperty()有什么缺陷？\n    - Object.defineProperty无法监控到数组下标的变化，导致通过数组下标添加元素，不能实时响应；\n    - Object.defineProperty只能劫持对象的属性，从而需要对每个对象，每个属性进行遍历，如果，属性值是对象，还需要深度遍。Proxy可以劫持整个对象，并返回一个新的对象。\n    - Proxy不仅可以代理对象，还可以代理数组。还可以代理动态增加的属性。\n8. var与let、const的区别\n    - var声明变量存在变量提升，let和const不存在变量提升， window可以访问到var声明的值\n    - let、const都是块级局部变量\n    - 同一作用域下let和const不能声明同名变量，而var可以\n9. 什么是块级作用域？\n    - JS中作用域有：全局作用域、函数作用域。没有块作用域的概念。ECMAScript 6(简称ES6)中新增了块级作用域。块作用域由 {} 包括，if语句和for语句里面的{}也属于块作用域。\n10. js中的class是怎么实现的？\n    - [此链接内容可供参考](https://blog.csdn.net/weixin_33681778/article/details/88038531)\n11. js基础类型和引用类型\n    - es5中基础类型包括：number，string，null，undefined，Boolean。es6新增了一种基础类型symbol,基础类型的存储是存放在栈中，原因是基础类型存储的空间很小，存放在栈（stack）中方便查找，且不易于改变\n    - 引用类型是指有多个值构成的对象，也就是对象类型比如：Object,Array,Function,Data等，js的引用数据类型是存储在堆中（heap），也就是说存储的变量处的值是一个指针（point），指向存储对象的内存地址。存在堆中的原因是：引用值的大小会改变，所以不能放在栈中，否则会降低变量查询的速度\n12. 哪些方法判断值的类型？\n    - [此链接内容可供参考](https://www.jianshu.com/p/967d6db70437)\n    1. typeof 运算符\n    2. instanceof\n    3. 通过Object下的toString.call()方法来判断\n    4. 根据对象的contructor判断\n13. instance of底层实现机制\n    - 只要右边变量的 prototype 在左边变量的原型链上即可。因此，instanceof 在查找的过程中会遍历左边变量的原型链，直到找到右边变量的 prototype，如果查找失败，则会返回 false\n14. 水平居中的几种方式\n    - [此链接内容可供参考](https://blog.csdn.net/weixin_42291381/article/details/81624935)\n15. BFC(block formatting context)\n    - [此链接内容可供参考](https://zhuanlan.zhihu.com/p/25321647)\n    - 使 BFC 内部浮动元素不会到处乱跑\n    - 和浮动元素产生边界\n16. 如何创建BFC\n    1. float的值不是none。\n    2. position的值不是static或者relative。\n    3. display的值是inline-block、table-cell、flex、table-caption或者inline-flex\n    4. overflow的值不是visible\n17. 触发 BFC\n    - 只要元素满足下面任一条件即可触发 BFC 特性：\n        - body 根元素\n        - 浮动元素：float 除 none 以外的值\n        - 绝对定位元素：position (absolute、fixed)\n        - display 为 inline-block、table-cells、flex\n        - overflow 除了 visible 以外的值 (hidden、auto、scroll)\n18. 流式布局\n    - [此链接内容可供参考](https://www.cnblogs.com/zylseo/p/12599443.html)\n    - [此链接内容可供参考](https://www.jianshu.com/p/4a6e5162e4ee)\n19. css的选择器和对应的优先级\n    - [此链接内容可供参考](https://blog.csdn.net/b954960630/article/details/79560590)\n    - !important > 行内样式>ID选择器 > 类选择器 > 标签 > 通配符 > 继承 > 浏览器默认属性\n20. 移动端自适应布局与字体大小自适应\n    - [此链接内容可供参考](https://blog.csdn.net/w390058785/article/details/80562776)\n    - vw, vh\n    - 用js去计算并设置html标签的font-size大小\n21. em和rem的区别\n    - rem 单位翻译为像素值是由 html 元素的字体大小决定的。 此字体大小会被浏览器中字体大小的设置影响，除非显式重写一个具体单位\n    - em 单位转为像素值，取决于他们使用的字体大小。 此字体大小受从父元素继承过来的字体大小，除非显式重写与一个具体单位\n22. 数组遍历方法\n    - [此链接内容可供参考](https://www.cnblogs.com/QuietWinter/p/9115855.html)\n23. post和get\n    - Get产生一个TCP数据包；Post产生两个TCP数据包。\n    - 对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；对于POST，浏览器先发送header，服务器响应100（continue），然后再发送data，服务器响应200（返回数据）；\n    - GET幂等，POST不幂等(幂等是指同一个请求方法执行多次和仅执行一次的效果完全相同。)\n24. 强制缓存和协商缓存\n    - [此链接内容可供参考](https://blog.csdn.net/zl399615007/article/details/84534884?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param)\n25. http头部字段有哪些？\n    - [此链接内容可供参考](https://www.cnblogs.com/soldierback/p/11714052.html)","slug":"面经-yz","published":1,"updated":"2020-09-06T10:06:48.436Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmdwh6nxv002g8ubphx2070t2","content":"<p>yz某公司部分面试题，学习记录如下</p>\n<a id=\"more\"></a>\n<ol>\n<li>svg是什么？<ul>\n<li>SVG 意为可缩放矢量图形（Scalable Vector Graphics）。</li>\n<li>SVG 使用 XML 格式定义图像。</li>\n</ul>\n</li>\n<li>什么情况下用vuex？<ul>\n<li>多个组件间需要传递参数或状态时</li>\n<li>较大型项目使用</li>\n</ul>\n</li>\n<li>vue本身的更新机制了解吗？ <ul>\n<li>Vue 实现响应式并不是数据发生变化之后 DOM 立即变化，而是按一定的策略进行 DOM 的更新。</li>\n<li>简单来说，Vue 在修改数据后，视图不会立刻更新，而是等同一事件循环中的所有数据变化完成之后，再统一进行视图更新。</li>\n<li>同步里执行的方法，每个方法里做的事情组成一个事件循环；接下来再次调用的是另一个事件循环。</li>\n<li>nextTick：在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，会获取更新后的 DOM。 <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//改变数据</span></span><br><span class=\"line\">vm.message = <span class=\"string\">'changed'</span></span><br><span class=\"line\"><span class=\"comment\">//想要立即使用更新后的DOM。这样不行，因为设置message后DOM还没有更新</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(vm.$el.textContent) <span class=\"comment\">// 并不会得到'changed'</span></span><br><span class=\"line\"><span class=\"comment\">//这样可以，nextTick里面的代码会在DOM更新后执行</span></span><br><span class=\"line\">Vue.nextTick(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(vm.$el.textContent) <span class=\"comment\">//可以得到'changed'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>computed和watch的了解？<ul>\n<li>computed 本质是一个惰性求值的观察者，具有缓存性，只有当依赖变化后，第一次访问 computed 属性，才会计算新的值，而 watch 则是当数据发生变化便会调用执行函数</li>\n<li>从使用场景上说，computed 适用一个数据被多个数据影响，而 watch 适用一个数据影响多个数据;</li>\n</ul>\n</li>\n<li>observer和watcher的了解？<ul>\n<li>Vue 响应系统，其核心有三点：observe、watcher、dep：<ul>\n<li>observe：遍历 data 中的属性，使用 Object.defineProperty 的 get/set 方法对其进行数据劫持；</li>\n<li>dep：每个属性拥有自己的消息订阅器 dep，用于存放所有订阅了该属性的观察者对象；</li>\n<li>watcher：观察者（对象），通过 dep 实现对响应属性的监听，监听到结果后，主动触发自己的回调进行响应。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 手动注销watch</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> unwatch = app.$watch(<span class=\"string\">'text'</span>, &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(val);</span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">    deep: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>vue3.0有什么特性？<ul>\n<li><a href=\"https://www.cnblogs.com/Rivend/p/12630779.html\" target=\"_blank\" rel=\"noopener\">此链接内容可供参考</a></li>\n</ul>\n</li>\n<li>vue中的Object.defineProperty()有什么缺陷？<ul>\n<li>Object.defineProperty无法监控到数组下标的变化，导致通过数组下标添加元素，不能实时响应；</li>\n<li>Object.defineProperty只能劫持对象的属性，从而需要对每个对象，每个属性进行遍历，如果，属性值是对象，还需要深度遍。Proxy可以劫持整个对象，并返回一个新的对象。</li>\n<li>Proxy不仅可以代理对象，还可以代理数组。还可以代理动态增加的属性。</li>\n</ul>\n</li>\n<li>var与let、const的区别<ul>\n<li>var声明变量存在变量提升，let和const不存在变量提升， window可以访问到var声明的值</li>\n<li>let、const都是块级局部变量</li>\n<li>同一作用域下let和const不能声明同名变量，而var可以</li>\n</ul>\n</li>\n<li>什么是块级作用域？<ul>\n<li>JS中作用域有：全局作用域、函数作用域。没有块作用域的概念。ECMAScript 6(简称ES6)中新增了块级作用域。块作用域由 {} 包括，if语句和for语句里面的{}也属于块作用域。</li>\n</ul>\n</li>\n<li>js中的class是怎么实现的？<ul>\n<li><a href=\"https://blog.csdn.net/weixin_33681778/article/details/88038531\" target=\"_blank\" rel=\"noopener\">此链接内容可供参考</a></li>\n</ul>\n</li>\n<li>js基础类型和引用类型<ul>\n<li>es5中基础类型包括：number，string，null，undefined，Boolean。es6新增了一种基础类型symbol,基础类型的存储是存放在栈中，原因是基础类型存储的空间很小，存放在栈（stack）中方便查找，且不易于改变</li>\n<li>引用类型是指有多个值构成的对象，也就是对象类型比如：Object,Array,Function,Data等，js的引用数据类型是存储在堆中（heap），也就是说存储的变量处的值是一个指针（point），指向存储对象的内存地址。存在堆中的原因是：引用值的大小会改变，所以不能放在栈中，否则会降低变量查询的速度</li>\n</ul>\n</li>\n<li>哪些方法判断值的类型？<ul>\n<li><a href=\"https://www.jianshu.com/p/967d6db70437\" target=\"_blank\" rel=\"noopener\">此链接内容可供参考</a></li>\n</ul>\n<ol>\n<li>typeof 运算符</li>\n<li>instanceof</li>\n<li>通过Object下的toString.call()方法来判断</li>\n<li>根据对象的contructor判断</li>\n</ol>\n</li>\n<li>instance of底层实现机制<ul>\n<li>只要右边变量的 prototype 在左边变量的原型链上即可。因此，instanceof 在查找的过程中会遍历左边变量的原型链，直到找到右边变量的 prototype，如果查找失败，则会返回 false</li>\n</ul>\n</li>\n<li>水平居中的几种方式<ul>\n<li><a href=\"https://blog.csdn.net/weixin_42291381/article/details/81624935\" target=\"_blank\" rel=\"noopener\">此链接内容可供参考</a></li>\n</ul>\n</li>\n<li>BFC(block formatting context)<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/25321647\" target=\"_blank\" rel=\"noopener\">此链接内容可供参考</a></li>\n<li>使 BFC 内部浮动元素不会到处乱跑</li>\n<li>和浮动元素产生边界</li>\n</ul>\n</li>\n<li>如何创建BFC<ol>\n<li>float的值不是none。</li>\n<li>position的值不是static或者relative。</li>\n<li>display的值是inline-block、table-cell、flex、table-caption或者inline-flex</li>\n<li>overflow的值不是visible</li>\n</ol>\n</li>\n<li>触发 BFC<ul>\n<li>只要元素满足下面任一条件即可触发 BFC 特性：<ul>\n<li>body 根元素</li>\n<li>浮动元素：float 除 none 以外的值</li>\n<li>绝对定位元素：position (absolute、fixed)</li>\n<li>display 为 inline-block、table-cells、flex</li>\n<li>overflow 除了 visible 以外的值 (hidden、auto、scroll)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>流式布局<ul>\n<li><a href=\"https://www.cnblogs.com/zylseo/p/12599443.html\" target=\"_blank\" rel=\"noopener\">此链接内容可供参考</a></li>\n<li><a href=\"https://www.jianshu.com/p/4a6e5162e4ee\" target=\"_blank\" rel=\"noopener\">此链接内容可供参考</a></li>\n</ul>\n</li>\n<li>css的选择器和对应的优先级<ul>\n<li><a href=\"https://blog.csdn.net/b954960630/article/details/79560590\" target=\"_blank\" rel=\"noopener\">此链接内容可供参考</a></li>\n<li>!important &gt; 行内样式&gt;ID选择器 &gt; 类选择器 &gt; 标签 &gt; 通配符 &gt; 继承 &gt; 浏览器默认属性</li>\n</ul>\n</li>\n<li>移动端自适应布局与字体大小自适应<ul>\n<li><a href=\"https://blog.csdn.net/w390058785/article/details/80562776\" target=\"_blank\" rel=\"noopener\">此链接内容可供参考</a></li>\n<li>vw, vh</li>\n<li>用js去计算并设置html标签的font-size大小</li>\n</ul>\n</li>\n<li>em和rem的区别<ul>\n<li>rem 单位翻译为像素值是由 html 元素的字体大小决定的。 此字体大小会被浏览器中字体大小的设置影响，除非显式重写一个具体单位</li>\n<li>em 单位转为像素值，取决于他们使用的字体大小。 此字体大小受从父元素继承过来的字体大小，除非显式重写与一个具体单位</li>\n</ul>\n</li>\n<li>数组遍历方法<ul>\n<li><a href=\"https://www.cnblogs.com/QuietWinter/p/9115855.html\" target=\"_blank\" rel=\"noopener\">此链接内容可供参考</a></li>\n</ul>\n</li>\n<li>post和get<ul>\n<li>Get产生一个TCP数据包；Post产生两个TCP数据包。</li>\n<li>对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；对于POST，浏览器先发送header，服务器响应100（continue），然后再发送data，服务器响应200（返回数据）；</li>\n<li>GET幂等，POST不幂等(幂等是指同一个请求方法执行多次和仅执行一次的效果完全相同。)</li>\n</ul>\n</li>\n<li>强制缓存和协商缓存<ul>\n<li><a href=\"https://blog.csdn.net/zl399615007/article/details/84534884?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param\" target=\"_blank\" rel=\"noopener\">此链接内容可供参考</a></li>\n</ul>\n</li>\n<li>http头部字段有哪些？<ul>\n<li><a href=\"https://www.cnblogs.com/soldierback/p/11714052.html\" target=\"_blank\" rel=\"noopener\">此链接内容可供参考</a></li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>yz某公司部分面试题，学习记录如下</p>","more":"<ol>\n<li>svg是什么？<ul>\n<li>SVG 意为可缩放矢量图形（Scalable Vector Graphics）。</li>\n<li>SVG 使用 XML 格式定义图像。</li>\n</ul>\n</li>\n<li>什么情况下用vuex？<ul>\n<li>多个组件间需要传递参数或状态时</li>\n<li>较大型项目使用</li>\n</ul>\n</li>\n<li>vue本身的更新机制了解吗？ <ul>\n<li>Vue 实现响应式并不是数据发生变化之后 DOM 立即变化，而是按一定的策略进行 DOM 的更新。</li>\n<li>简单来说，Vue 在修改数据后，视图不会立刻更新，而是等同一事件循环中的所有数据变化完成之后，再统一进行视图更新。</li>\n<li>同步里执行的方法，每个方法里做的事情组成一个事件循环；接下来再次调用的是另一个事件循环。</li>\n<li>nextTick：在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，会获取更新后的 DOM。 <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//改变数据</span></span><br><span class=\"line\">vm.message = <span class=\"string\">'changed'</span></span><br><span class=\"line\"><span class=\"comment\">//想要立即使用更新后的DOM。这样不行，因为设置message后DOM还没有更新</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(vm.$el.textContent) <span class=\"comment\">// 并不会得到'changed'</span></span><br><span class=\"line\"><span class=\"comment\">//这样可以，nextTick里面的代码会在DOM更新后执行</span></span><br><span class=\"line\">Vue.nextTick(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(vm.$el.textContent) <span class=\"comment\">//可以得到'changed'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>computed和watch的了解？<ul>\n<li>computed 本质是一个惰性求值的观察者，具有缓存性，只有当依赖变化后，第一次访问 computed 属性，才会计算新的值，而 watch 则是当数据发生变化便会调用执行函数</li>\n<li>从使用场景上说，computed 适用一个数据被多个数据影响，而 watch 适用一个数据影响多个数据;</li>\n</ul>\n</li>\n<li>observer和watcher的了解？<ul>\n<li>Vue 响应系统，其核心有三点：observe、watcher、dep：<ul>\n<li>observe：遍历 data 中的属性，使用 Object.defineProperty 的 get/set 方法对其进行数据劫持；</li>\n<li>dep：每个属性拥有自己的消息订阅器 dep，用于存放所有订阅了该属性的观察者对象；</li>\n<li>watcher：观察者（对象），通过 dep 实现对响应属性的监听，监听到结果后，主动触发自己的回调进行响应。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 手动注销watch</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> unwatch = app.$watch(<span class=\"string\">'text'</span>, &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(val);</span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">    deep: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>vue3.0有什么特性？<ul>\n<li><a href=\"https://www.cnblogs.com/Rivend/p/12630779.html\" target=\"_blank\" rel=\"noopener\">此链接内容可供参考</a></li>\n</ul>\n</li>\n<li>vue中的Object.defineProperty()有什么缺陷？<ul>\n<li>Object.defineProperty无法监控到数组下标的变化，导致通过数组下标添加元素，不能实时响应；</li>\n<li>Object.defineProperty只能劫持对象的属性，从而需要对每个对象，每个属性进行遍历，如果，属性值是对象，还需要深度遍。Proxy可以劫持整个对象，并返回一个新的对象。</li>\n<li>Proxy不仅可以代理对象，还可以代理数组。还可以代理动态增加的属性。</li>\n</ul>\n</li>\n<li>var与let、const的区别<ul>\n<li>var声明变量存在变量提升，let和const不存在变量提升， window可以访问到var声明的值</li>\n<li>let、const都是块级局部变量</li>\n<li>同一作用域下let和const不能声明同名变量，而var可以</li>\n</ul>\n</li>\n<li>什么是块级作用域？<ul>\n<li>JS中作用域有：全局作用域、函数作用域。没有块作用域的概念。ECMAScript 6(简称ES6)中新增了块级作用域。块作用域由 {} 包括，if语句和for语句里面的{}也属于块作用域。</li>\n</ul>\n</li>\n<li>js中的class是怎么实现的？<ul>\n<li><a href=\"https://blog.csdn.net/weixin_33681778/article/details/88038531\" target=\"_blank\" rel=\"noopener\">此链接内容可供参考</a></li>\n</ul>\n</li>\n<li>js基础类型和引用类型<ul>\n<li>es5中基础类型包括：number，string，null，undefined，Boolean。es6新增了一种基础类型symbol,基础类型的存储是存放在栈中，原因是基础类型存储的空间很小，存放在栈（stack）中方便查找，且不易于改变</li>\n<li>引用类型是指有多个值构成的对象，也就是对象类型比如：Object,Array,Function,Data等，js的引用数据类型是存储在堆中（heap），也就是说存储的变量处的值是一个指针（point），指向存储对象的内存地址。存在堆中的原因是：引用值的大小会改变，所以不能放在栈中，否则会降低变量查询的速度</li>\n</ul>\n</li>\n<li>哪些方法判断值的类型？<ul>\n<li><a href=\"https://www.jianshu.com/p/967d6db70437\" target=\"_blank\" rel=\"noopener\">此链接内容可供参考</a></li>\n</ul>\n<ol>\n<li>typeof 运算符</li>\n<li>instanceof</li>\n<li>通过Object下的toString.call()方法来判断</li>\n<li>根据对象的contructor判断</li>\n</ol>\n</li>\n<li>instance of底层实现机制<ul>\n<li>只要右边变量的 prototype 在左边变量的原型链上即可。因此，instanceof 在查找的过程中会遍历左边变量的原型链，直到找到右边变量的 prototype，如果查找失败，则会返回 false</li>\n</ul>\n</li>\n<li>水平居中的几种方式<ul>\n<li><a href=\"https://blog.csdn.net/weixin_42291381/article/details/81624935\" target=\"_blank\" rel=\"noopener\">此链接内容可供参考</a></li>\n</ul>\n</li>\n<li>BFC(block formatting context)<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/25321647\" target=\"_blank\" rel=\"noopener\">此链接内容可供参考</a></li>\n<li>使 BFC 内部浮动元素不会到处乱跑</li>\n<li>和浮动元素产生边界</li>\n</ul>\n</li>\n<li>如何创建BFC<ol>\n<li>float的值不是none。</li>\n<li>position的值不是static或者relative。</li>\n<li>display的值是inline-block、table-cell、flex、table-caption或者inline-flex</li>\n<li>overflow的值不是visible</li>\n</ol>\n</li>\n<li>触发 BFC<ul>\n<li>只要元素满足下面任一条件即可触发 BFC 特性：<ul>\n<li>body 根元素</li>\n<li>浮动元素：float 除 none 以外的值</li>\n<li>绝对定位元素：position (absolute、fixed)</li>\n<li>display 为 inline-block、table-cells、flex</li>\n<li>overflow 除了 visible 以外的值 (hidden、auto、scroll)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>流式布局<ul>\n<li><a href=\"https://www.cnblogs.com/zylseo/p/12599443.html\" target=\"_blank\" rel=\"noopener\">此链接内容可供参考</a></li>\n<li><a href=\"https://www.jianshu.com/p/4a6e5162e4ee\" target=\"_blank\" rel=\"noopener\">此链接内容可供参考</a></li>\n</ul>\n</li>\n<li>css的选择器和对应的优先级<ul>\n<li><a href=\"https://blog.csdn.net/b954960630/article/details/79560590\" target=\"_blank\" rel=\"noopener\">此链接内容可供参考</a></li>\n<li>!important &gt; 行内样式&gt;ID选择器 &gt; 类选择器 &gt; 标签 &gt; 通配符 &gt; 继承 &gt; 浏览器默认属性</li>\n</ul>\n</li>\n<li>移动端自适应布局与字体大小自适应<ul>\n<li><a href=\"https://blog.csdn.net/w390058785/article/details/80562776\" target=\"_blank\" rel=\"noopener\">此链接内容可供参考</a></li>\n<li>vw, vh</li>\n<li>用js去计算并设置html标签的font-size大小</li>\n</ul>\n</li>\n<li>em和rem的区别<ul>\n<li>rem 单位翻译为像素值是由 html 元素的字体大小决定的。 此字体大小会被浏览器中字体大小的设置影响，除非显式重写一个具体单位</li>\n<li>em 单位转为像素值，取决于他们使用的字体大小。 此字体大小受从父元素继承过来的字体大小，除非显式重写与一个具体单位</li>\n</ul>\n</li>\n<li>数组遍历方法<ul>\n<li><a href=\"https://www.cnblogs.com/QuietWinter/p/9115855.html\" target=\"_blank\" rel=\"noopener\">此链接内容可供参考</a></li>\n</ul>\n</li>\n<li>post和get<ul>\n<li>Get产生一个TCP数据包；Post产生两个TCP数据包。</li>\n<li>对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；对于POST，浏览器先发送header，服务器响应100（continue），然后再发送data，服务器响应200（返回数据）；</li>\n<li>GET幂等，POST不幂等(幂等是指同一个请求方法执行多次和仅执行一次的效果完全相同。)</li>\n</ul>\n</li>\n<li>强制缓存和协商缓存<ul>\n<li><a href=\"https://blog.csdn.net/zl399615007/article/details/84534884?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param\" target=\"_blank\" rel=\"noopener\">此链接内容可供参考</a></li>\n</ul>\n</li>\n<li>http头部字段有哪些？<ul>\n<li><a href=\"https://www.cnblogs.com/soldierback/p/11714052.html\" target=\"_blank\" rel=\"noopener\">此链接内容可供参考</a></li>\n</ul>\n</li>\n</ol>"},{"title":"原型和原型链","date":"2020-09-04T14:42:39.000Z","_content":"关于原型和原型链的考查部分题目如下：\n<!--more-->\n- 输出代码结果\n```javascript\nfunction Fn(){\n    this.x = 100\n    this.y = 200\n    this.getX = function(){\n        console.log(this.x)\n    }\n}\nFn.prototype = { // 批量扩展原型会改变Fn的constructor指向\n    y: 400,\n    getX = function(){\n        console.log(this.x)\n    },\n    getY = function(){\n        console.log(this.y)\n    },\n    sum = function(){\n        console.log(this.x + this.y)\n    }\n}\nvar f1 = new Fn\nvar f2 = new Fn\nconsole.log(f1.getX === f2.getX) // 均为私有 false\nconsole.log(f1.getY === f2.getY) // 公有getY true \nconsole.log(f1.__proto__.getY === Fn.prototype.getY) // true\nconsole.log(f1.__proto__.getX === f2.getX) // false\nconsole.log(f1.getX === Fn.prototype.getX) // false\nconsole.log(f1.constructor) // Object\nconsole.log(Fn.prototype.__proto__.constructor) // Object\nf1.getX() // this: f1, f1.x => 100 \nf1.__proto__.getX() // this: f1.__proto(Fn.prototype) => Fn.prototype.x => undefined\nFn.prototype.getY() // this: Fn.prototype => Fn.prototype.y = 400\nf1.sum() // this: f1 => f1.x+f1.y = 100 + 200 = 300\nFn.prototype.sum() // this: Fn.prototype => undefined + 400 = Nan\n```\n根据题意，可画原型图如下所示：\n![avatar](https://cdn.jsdelivr.net/gh/yc2hang/cdn-assets/photos/prototype.png)\n","source":"_posts/原型和原型链.md","raw":"---\ntitle: 原型和原型链\ndate: 2020-09-04 22:42:39\ncategories:\n    - JavaScript\ntags:\n    - 面试题\n---\n关于原型和原型链的考查部分题目如下：\n<!--more-->\n- 输出代码结果\n```javascript\nfunction Fn(){\n    this.x = 100\n    this.y = 200\n    this.getX = function(){\n        console.log(this.x)\n    }\n}\nFn.prototype = { // 批量扩展原型会改变Fn的constructor指向\n    y: 400,\n    getX = function(){\n        console.log(this.x)\n    },\n    getY = function(){\n        console.log(this.y)\n    },\n    sum = function(){\n        console.log(this.x + this.y)\n    }\n}\nvar f1 = new Fn\nvar f2 = new Fn\nconsole.log(f1.getX === f2.getX) // 均为私有 false\nconsole.log(f1.getY === f2.getY) // 公有getY true \nconsole.log(f1.__proto__.getY === Fn.prototype.getY) // true\nconsole.log(f1.__proto__.getX === f2.getX) // false\nconsole.log(f1.getX === Fn.prototype.getX) // false\nconsole.log(f1.constructor) // Object\nconsole.log(Fn.prototype.__proto__.constructor) // Object\nf1.getX() // this: f1, f1.x => 100 \nf1.__proto__.getX() // this: f1.__proto(Fn.prototype) => Fn.prototype.x => undefined\nFn.prototype.getY() // this: Fn.prototype => Fn.prototype.y = 400\nf1.sum() // this: f1 => f1.x+f1.y = 100 + 200 = 300\nFn.prototype.sum() // this: Fn.prototype => undefined + 400 = Nan\n```\n根据题意，可画原型图如下所示：\n![avatar](https://cdn.jsdelivr.net/gh/yc2hang/cdn-assets/photos/prototype.png)\n","slug":"原型和原型链","published":1,"updated":"2020-09-05T15:18:28.993Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmdwh6nxw002j8ubpac5cdf2o","content":"<p>关于原型和原型链的考查部分题目如下：</p>\n<a id=\"more\"></a>\n<ul>\n<li>输出代码结果<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Fn</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = <span class=\"number\">100</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.y = <span class=\"number\">200</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getX = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Fn.prototype = &#123; <span class=\"comment\">// 批量扩展原型会改变Fn的constructor指向</span></span><br><span class=\"line\">    y: <span class=\"number\">400</span>,</span><br><span class=\"line\">    getX = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getY = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.y)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    sum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x + <span class=\"keyword\">this</span>.y)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f1 = <span class=\"keyword\">new</span> Fn</span><br><span class=\"line\"><span class=\"keyword\">var</span> f2 = <span class=\"keyword\">new</span> Fn</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f1.getX === f2.getX) <span class=\"comment\">// 均为私有 false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f1.getY === f2.getY) <span class=\"comment\">// 公有getY true </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f1.__proto__.getY === Fn.prototype.getY) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f1.__proto__.getX === f2.getX) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f1.getX === Fn.prototype.getX) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f1.constructor) <span class=\"comment\">// Object</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Fn.prototype.__proto__.constructor) <span class=\"comment\">// Object</span></span><br><span class=\"line\">f1.getX() <span class=\"comment\">// this: f1, f1.x =&gt; 100 </span></span><br><span class=\"line\">f1.__proto__.getX() <span class=\"comment\">// this: f1.__proto(Fn.prototype) =&gt; Fn.prototype.x =&gt; undefined</span></span><br><span class=\"line\">Fn.prototype.getY() <span class=\"comment\">// this: Fn.prototype =&gt; Fn.prototype.y = 400</span></span><br><span class=\"line\">f1.sum() <span class=\"comment\">// this: f1 =&gt; f1.x+f1.y = 100 + 200 = 300</span></span><br><span class=\"line\">Fn.prototype.sum() <span class=\"comment\">// this: Fn.prototype =&gt; undefined + 400 = Nan</span></span><br></pre></td></tr></table></figure>\n根据题意，可画原型图如下所示：<br><img src=\"https://cdn.jsdelivr.net/gh/yc2hang/cdn-assets/photos/prototype.png\" alt=\"avatar\"></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>关于原型和原型链的考查部分题目如下：</p>","more":"<ul>\n<li>输出代码结果<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Fn</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = <span class=\"number\">100</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.y = <span class=\"number\">200</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getX = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Fn.prototype = &#123; <span class=\"comment\">// 批量扩展原型会改变Fn的constructor指向</span></span><br><span class=\"line\">    y: <span class=\"number\">400</span>,</span><br><span class=\"line\">    getX = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getY = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.y)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    sum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x + <span class=\"keyword\">this</span>.y)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f1 = <span class=\"keyword\">new</span> Fn</span><br><span class=\"line\"><span class=\"keyword\">var</span> f2 = <span class=\"keyword\">new</span> Fn</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f1.getX === f2.getX) <span class=\"comment\">// 均为私有 false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f1.getY === f2.getY) <span class=\"comment\">// 公有getY true </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f1.__proto__.getY === Fn.prototype.getY) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f1.__proto__.getX === f2.getX) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f1.getX === Fn.prototype.getX) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f1.constructor) <span class=\"comment\">// Object</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Fn.prototype.__proto__.constructor) <span class=\"comment\">// Object</span></span><br><span class=\"line\">f1.getX() <span class=\"comment\">// this: f1, f1.x =&gt; 100 </span></span><br><span class=\"line\">f1.__proto__.getX() <span class=\"comment\">// this: f1.__proto(Fn.prototype) =&gt; Fn.prototype.x =&gt; undefined</span></span><br><span class=\"line\">Fn.prototype.getY() <span class=\"comment\">// this: Fn.prototype =&gt; Fn.prototype.y = 400</span></span><br><span class=\"line\">f1.sum() <span class=\"comment\">// this: f1 =&gt; f1.x+f1.y = 100 + 200 = 300</span></span><br><span class=\"line\">Fn.prototype.sum() <span class=\"comment\">// this: Fn.prototype =&gt; undefined + 400 = Nan</span></span><br></pre></td></tr></table></figure>\n根据题意，可画原型图如下所示：<br><img src=\"https://cdn.jsdelivr.net/gh/yc2hang/cdn-assets/photos/prototype.png\" alt=\"avatar\"></li>\n</ul>"},{"title":"防抖和节流","date":"2020-09-07T15:44:55.000Z","_content":"前端开发中，我们的一些事件的响应比较慢或者需要请求接口完成的，我们不希望这些事件频繁执行，比如说需要对input输入的数据保存，监听keyup事件，如果每次键盘输入就执行保存请求，那样可能会产生很多频繁的请求，针对这种连续触发的高频率事件，函数防抖和函数节流给出了两种解决方法\n<!--more-->\n### 防抖(debounce)\n{% note %}\n去抖动，方法是在函数触发时，设定一个周期延迟执行函数，若在周期内函数再次执行、则刷新延迟时间，直到最后执行函数，这里函数收集到的结果是最后一次操作的结果\n{% endnote %}\n\n##### 简单的实现\n```javascript\nvar timer; // 定时器\nfunction change (e) {\n    if (timer) {\n        clearTimeout(timer);\n    }\n    timer = setTimeout(function () {\n        console.log(e.target.value);\n        timer = void 0;\n    }, 1000)\n}\ndocument.querySelector(\"#test\").addEventListener('keyup', change);\n```\n这里监听input的keyup事件，change方法执行的时候会首先判断定时器是否存在、如果存在则clear掉，如果不则新建一个定时器延迟1s执行\n\n##### 封装\n上面这样实现没毛病，但是却有一个问题，没有复用性,现在我来把他封装成一个公共的方法\n```javascript\nfunction keyup (e) {\n    console.log(e.target.value);\n}\n\nfunction debounce (method, delay) {\n    var timer = void 0;\n    return function () {\n        var self = this;\n        var args = arguments;\n        timer && clearTimeout(timer);\n        timer = setTimeout(function () {\n            method.apply(self, args)\n            timer = void 0;\n        }, delay)\n    }\n}\ndocument.querySelector(\"#test\").addEventListener('keyup', debounce(keyup, 1000));\n```\n\n### 节流(throttling)\n{% note %}\n节流的概念是设定一个周期，周期内只执行一次，若有新的事件触发则不执行，周期结束后又有新的事件触发开始新的周期\n{% endnote %}\n##### 实现\n比如说我们监听onscroll判断获取当前的scrollTop、可以用到节流\n```javascript\nvar start, timer, wait = 200\nfunction scroll() {\n    var self = this;\n    var args = arguments;\n    if (!start) {\n        //第一次触发，设置start时间\n        start = Date.now()\n    }\n    // 当前时间减去开始时间大于等于设定的周期则执行并且初始化start、timer\n    if (Date.now() - start >= wait) {\n        console.log('触发了')\n        start = timer = void 0;\n    } else {\n        timer && clearTimeout(timer)\n        timer = setTimeout(function () {\n            scroll.apply(self, arguments)\n        },wait)\n    }\n}\ndocument.addEventListener('scroll', scroll)\n```\n##### 封装\n```javascript\nfunction throttling (method, wait) {\n    var start, timer\n    return function run () {\n        var self = this;\n        var args = arguments;\n        if (!start) {\n            start = Date.now();\n        }\n        if (Date.now() - start >= wait) {\n            method.apply(self, args)\n            start = timer = void 0\n        } else {\n            timer && clearTimeout(timer)\n            timer = setTimeout(function () {\n                run.apply(self, args)\n            }, wait)\n        }\n    }\n}\nfunction scroll() {\n    console.log('触发了')\n}\ndocument.addEventListener('scroll', throttling(scroll, 200))\n```\n\n{% note %}\n- 防抖和节流，通俗来说就是，函数防抖的时候,每次调用事件都是在正常执行暂停后一段时间(等你歇菜了我再上) 函数节流的时候,则是每隔一定的时间间隔就触发一次(管你频率那么快,我就保持自己的节奏) \n- 防抖：在设定时间间隔内，再次触发事件时，定时器会清除，函数重新执行\n- 节流：在设定时间间隔内，再次触发事件时，判断定时器是否为null，若为null，则执行函数。否则不执行\n{% endnote %}","source":"_posts/防抖和节流.md","raw":"---\ntitle: 防抖和节流\ndate: 2020-09-07 23:44:55\ncategories:\n    - JavaScript\ntags:\n    - 面试题\n---\n前端开发中，我们的一些事件的响应比较慢或者需要请求接口完成的，我们不希望这些事件频繁执行，比如说需要对input输入的数据保存，监听keyup事件，如果每次键盘输入就执行保存请求，那样可能会产生很多频繁的请求，针对这种连续触发的高频率事件，函数防抖和函数节流给出了两种解决方法\n<!--more-->\n### 防抖(debounce)\n{% note %}\n去抖动，方法是在函数触发时，设定一个周期延迟执行函数，若在周期内函数再次执行、则刷新延迟时间，直到最后执行函数，这里函数收集到的结果是最后一次操作的结果\n{% endnote %}\n\n##### 简单的实现\n```javascript\nvar timer; // 定时器\nfunction change (e) {\n    if (timer) {\n        clearTimeout(timer);\n    }\n    timer = setTimeout(function () {\n        console.log(e.target.value);\n        timer = void 0;\n    }, 1000)\n}\ndocument.querySelector(\"#test\").addEventListener('keyup', change);\n```\n这里监听input的keyup事件，change方法执行的时候会首先判断定时器是否存在、如果存在则clear掉，如果不则新建一个定时器延迟1s执行\n\n##### 封装\n上面这样实现没毛病，但是却有一个问题，没有复用性,现在我来把他封装成一个公共的方法\n```javascript\nfunction keyup (e) {\n    console.log(e.target.value);\n}\n\nfunction debounce (method, delay) {\n    var timer = void 0;\n    return function () {\n        var self = this;\n        var args = arguments;\n        timer && clearTimeout(timer);\n        timer = setTimeout(function () {\n            method.apply(self, args)\n            timer = void 0;\n        }, delay)\n    }\n}\ndocument.querySelector(\"#test\").addEventListener('keyup', debounce(keyup, 1000));\n```\n\n### 节流(throttling)\n{% note %}\n节流的概念是设定一个周期，周期内只执行一次，若有新的事件触发则不执行，周期结束后又有新的事件触发开始新的周期\n{% endnote %}\n##### 实现\n比如说我们监听onscroll判断获取当前的scrollTop、可以用到节流\n```javascript\nvar start, timer, wait = 200\nfunction scroll() {\n    var self = this;\n    var args = arguments;\n    if (!start) {\n        //第一次触发，设置start时间\n        start = Date.now()\n    }\n    // 当前时间减去开始时间大于等于设定的周期则执行并且初始化start、timer\n    if (Date.now() - start >= wait) {\n        console.log('触发了')\n        start = timer = void 0;\n    } else {\n        timer && clearTimeout(timer)\n        timer = setTimeout(function () {\n            scroll.apply(self, arguments)\n        },wait)\n    }\n}\ndocument.addEventListener('scroll', scroll)\n```\n##### 封装\n```javascript\nfunction throttling (method, wait) {\n    var start, timer\n    return function run () {\n        var self = this;\n        var args = arguments;\n        if (!start) {\n            start = Date.now();\n        }\n        if (Date.now() - start >= wait) {\n            method.apply(self, args)\n            start = timer = void 0\n        } else {\n            timer && clearTimeout(timer)\n            timer = setTimeout(function () {\n                run.apply(self, args)\n            }, wait)\n        }\n    }\n}\nfunction scroll() {\n    console.log('触发了')\n}\ndocument.addEventListener('scroll', throttling(scroll, 200))\n```\n\n{% note %}\n- 防抖和节流，通俗来说就是，函数防抖的时候,每次调用事件都是在正常执行暂停后一段时间(等你歇菜了我再上) 函数节流的时候,则是每隔一定的时间间隔就触发一次(管你频率那么快,我就保持自己的节奏) \n- 防抖：在设定时间间隔内，再次触发事件时，定时器会清除，函数重新执行\n- 节流：在设定时间间隔内，再次触发事件时，判断定时器是否为null，若为null，则执行函数。否则不执行\n{% endnote %}","slug":"防抖和节流","published":1,"updated":"2020-09-07T16:13:14.264Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmdwh6nxx002n8ubpfw1zh7b7","content":"<p>前端开发中，我们的一些事件的响应比较慢或者需要请求接口完成的，我们不希望这些事件频繁执行，比如说需要对input输入的数据保存，监听keyup事件，如果每次键盘输入就执行保存请求，那样可能会产生很多频繁的请求，针对这种连续触发的高频率事件，函数防抖和函数节流给出了两种解决方法</p>\n<a id=\"more\"></a>\n<h3 id=\"防抖-debounce\"><a href=\"#防抖-debounce\" class=\"headerlink\" title=\"防抖(debounce)\"></a>防抖(debounce)</h3><div class=\"note \"><p>去抖动，方法是在函数触发时，设定一个周期延迟执行函数，若在周期内函数再次执行、则刷新延迟时间，直到最后执行函数，这里函数收集到的结果是最后一次操作的结果</p></div>\n\n<h5 id=\"简单的实现\"><a href=\"#简单的实现\" class=\"headerlink\" title=\"简单的实现\"></a>简单的实现</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> timer; <span class=\"comment\">// 定时器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">change</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timer) &#123;</span><br><span class=\"line\">        clearTimeout(timer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(e.target.value);</span><br><span class=\"line\">        timer = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"#test\"</span>).addEventListener(<span class=\"string\">'keyup'</span>, change);</span><br></pre></td></tr></table></figure>\n<p>这里监听input的keyup事件，change方法执行的时候会首先判断定时器是否存在、如果存在则clear掉，如果不则新建一个定时器延迟1s执行</p>\n<h5 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h5><p>上面这样实现没毛病，但是却有一个问题，没有复用性,现在我来把他封装成一个公共的方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">keyup</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e.target.value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span> (<span class=\"params\">method, delay</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timer = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">        timer &amp;&amp; clearTimeout(timer);</span><br><span class=\"line\">        timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            method.apply(self, args)</span><br><span class=\"line\">            timer = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;, delay)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"#test\"</span>).addEventListener(<span class=\"string\">'keyup'</span>, debounce(keyup, <span class=\"number\">1000</span>));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"节流-throttling\"><a href=\"#节流-throttling\" class=\"headerlink\" title=\"节流(throttling)\"></a>节流(throttling)</h3><div class=\"note \"><p>节流的概念是设定一个周期，周期内只执行一次，若有新的事件触发则不执行，周期结束后又有新的事件触发开始新的周期</p></div>\n<h5 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h5><p>比如说我们监听onscroll判断获取当前的scrollTop、可以用到节流</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> start, timer, wait = <span class=\"number\">200</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">scroll</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!start) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//第一次触发，设置start时间</span></span><br><span class=\"line\">        start = <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 当前时间减去开始时间大于等于设定的周期则执行并且初始化start、timer</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Date</span>.now() - start &gt;= wait) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'触发了'</span>)</span><br><span class=\"line\">        start = timer = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        timer &amp;&amp; clearTimeout(timer)</span><br><span class=\"line\">        timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            scroll.apply(self, <span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">        &#125;,wait)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'scroll'</span>, scroll)</span><br></pre></td></tr></table></figure>\n<h5 id=\"封装-1\"><a href=\"#封装-1\" class=\"headerlink\" title=\"封装\"></a>封装</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttling</span> (<span class=\"params\">method, wait</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> start, timer</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!start) &#123;</span><br><span class=\"line\">            start = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">Date</span>.now() - start &gt;= wait) &#123;</span><br><span class=\"line\">            method.apply(self, args)</span><br><span class=\"line\">            start = timer = <span class=\"keyword\">void</span> <span class=\"number\">0</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            timer &amp;&amp; clearTimeout(timer)</span><br><span class=\"line\">            timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                run.apply(self, args)</span><br><span class=\"line\">            &#125;, wait)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">scroll</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'触发了'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'scroll'</span>, throttling(scroll, <span class=\"number\">200</span>))</span><br></pre></td></tr></table></figure>\n\n<div class=\"note \"><ul>\n<li>防抖和节流，通俗来说就是，函数防抖的时候,每次调用事件都是在正常执行暂停后一段时间(等你歇菜了我再上) 函数节流的时候,则是每隔一定的时间间隔就触发一次(管你频率那么快,我就保持自己的节奏) </li>\n<li>防抖：在设定时间间隔内，再次触发事件时，定时器会清除，函数重新执行</li>\n<li>节流：在设定时间间隔内，再次触发事件时，判断定时器是否为null，若为null，则执行函数。否则不执行</li>\n</ul></div>","site":{"data":{}},"excerpt":"<p>前端开发中，我们的一些事件的响应比较慢或者需要请求接口完成的，我们不希望这些事件频繁执行，比如说需要对input输入的数据保存，监听keyup事件，如果每次键盘输入就执行保存请求，那样可能会产生很多频繁的请求，针对这种连续触发的高频率事件，函数防抖和函数节流给出了两种解决方法</p>","more":"<h3 id=\"防抖-debounce\"><a href=\"#防抖-debounce\" class=\"headerlink\" title=\"防抖(debounce)\"></a>防抖(debounce)</h3><div class=\"note \"><p>去抖动，方法是在函数触发时，设定一个周期延迟执行函数，若在周期内函数再次执行、则刷新延迟时间，直到最后执行函数，这里函数收集到的结果是最后一次操作的结果</p></div>\n\n<h5 id=\"简单的实现\"><a href=\"#简单的实现\" class=\"headerlink\" title=\"简单的实现\"></a>简单的实现</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> timer; <span class=\"comment\">// 定时器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">change</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timer) &#123;</span><br><span class=\"line\">        clearTimeout(timer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(e.target.value);</span><br><span class=\"line\">        timer = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"#test\"</span>).addEventListener(<span class=\"string\">'keyup'</span>, change);</span><br></pre></td></tr></table></figure>\n<p>这里监听input的keyup事件，change方法执行的时候会首先判断定时器是否存在、如果存在则clear掉，如果不则新建一个定时器延迟1s执行</p>\n<h5 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h5><p>上面这样实现没毛病，但是却有一个问题，没有复用性,现在我来把他封装成一个公共的方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">keyup</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e.target.value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span> (<span class=\"params\">method, delay</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timer = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">        timer &amp;&amp; clearTimeout(timer);</span><br><span class=\"line\">        timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            method.apply(self, args)</span><br><span class=\"line\">            timer = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;, delay)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"#test\"</span>).addEventListener(<span class=\"string\">'keyup'</span>, debounce(keyup, <span class=\"number\">1000</span>));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"节流-throttling\"><a href=\"#节流-throttling\" class=\"headerlink\" title=\"节流(throttling)\"></a>节流(throttling)</h3><div class=\"note \"><p>节流的概念是设定一个周期，周期内只执行一次，若有新的事件触发则不执行，周期结束后又有新的事件触发开始新的周期</p></div>\n<h5 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h5><p>比如说我们监听onscroll判断获取当前的scrollTop、可以用到节流</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> start, timer, wait = <span class=\"number\">200</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">scroll</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!start) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//第一次触发，设置start时间</span></span><br><span class=\"line\">        start = <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 当前时间减去开始时间大于等于设定的周期则执行并且初始化start、timer</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Date</span>.now() - start &gt;= wait) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'触发了'</span>)</span><br><span class=\"line\">        start = timer = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        timer &amp;&amp; clearTimeout(timer)</span><br><span class=\"line\">        timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            scroll.apply(self, <span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">        &#125;,wait)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'scroll'</span>, scroll)</span><br></pre></td></tr></table></figure>\n<h5 id=\"封装-1\"><a href=\"#封装-1\" class=\"headerlink\" title=\"封装\"></a>封装</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttling</span> (<span class=\"params\">method, wait</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> start, timer</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!start) &#123;</span><br><span class=\"line\">            start = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">Date</span>.now() - start &gt;= wait) &#123;</span><br><span class=\"line\">            method.apply(self, args)</span><br><span class=\"line\">            start = timer = <span class=\"keyword\">void</span> <span class=\"number\">0</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            timer &amp;&amp; clearTimeout(timer)</span><br><span class=\"line\">            timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                run.apply(self, args)</span><br><span class=\"line\">            &#125;, wait)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">scroll</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'触发了'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'scroll'</span>, throttling(scroll, <span class=\"number\">200</span>))</span><br></pre></td></tr></table></figure>\n\n<div class=\"note \"><ul>\n<li>防抖和节流，通俗来说就是，函数防抖的时候,每次调用事件都是在正常执行暂停后一段时间(等你歇菜了我再上) 函数节流的时候,则是每隔一定的时间间隔就触发一次(管你频率那么快,我就保持自己的节奏) </li>\n<li>防抖：在设定时间间隔内，再次触发事件时，定时器会清除，函数重新执行</li>\n<li>节流：在设定时间间隔内，再次触发事件时，判断定时器是否为null，若为null，则执行函数。否则不执行</li>\n</ul></div>"}],"PostAsset":[],"PostCategory":[{"post_id":"cmdwh6nwa00038ubp2t3i3ymj","category_id":"cmdwh6nws00078ubp2ip774w4","_id":"cmdwh6nx0000h8ubpcr5l4va0"},{"post_id":"cmdwh6nwn00068ubp8d6u9z7u","category_id":"cmdwh6nwx000d8ubp8x37h5ng","_id":"cmdwh6nx9000q8ubp0yekhdjd"},{"post_id":"cmdwh6nwt00088ubp0bb2gdos","category_id":"cmdwh6nwx000d8ubp8x37h5ng","_id":"cmdwh6nxf000x8ubpcy6ccd3l"},{"post_id":"cmdwh6nwu00098ubp0v24fl37","category_id":"cmdwh6nwx000d8ubp8x37h5ng","_id":"cmdwh6nxh00148ubpd4ry8zuy"},{"post_id":"cmdwh6nxc000u8ubph3m76rha","category_id":"cmdwh6nwx000d8ubp8x37h5ng","_id":"cmdwh6nxh00168ubp3nf3djue"},{"post_id":"cmdwh6nxf000y8ubp7hlj2di3","category_id":"cmdwh6nwx000d8ubp8x37h5ng","_id":"cmdwh6nxi00188ubp5s4v6p6e"},{"post_id":"cmdwh6nww000c8ubp39lgbume","category_id":"cmdwh6nwx000d8ubp8x37h5ng","_id":"cmdwh6nxl001d8ubpaa4dgt0m"},{"post_id":"cmdwh6nxg00108ubp4i0i9jjd","category_id":"cmdwh6nwx000d8ubp8x37h5ng","_id":"cmdwh6nxl001g8ubp48qndgz3"},{"post_id":"cmdwh6nxh00158ubpdulk1m92","category_id":"cmdwh6nws00078ubp2ip774w4","_id":"cmdwh6nxm001l8ubp7dledtgs"},{"post_id":"cmdwh6nwx000e8ubp4ks5gugb","category_id":"cmdwh6nxh00138ubp817th5gb","_id":"cmdwh6nxm001o8ubp352n0hee"},{"post_id":"cmdwh6nxi00178ubp48f1c1tt","category_id":"cmdwh6nwx000d8ubp8x37h5ng","_id":"cmdwh6nxp001t8ubp8ao53eys"},{"post_id":"cmdwh6nxk001c8ubp1l22acrr","category_id":"cmdwh6nwx000d8ubp8x37h5ng","_id":"cmdwh6nxq001w8ubp8v2o550b"},{"post_id":"cmdwh6nwz000g8ubpasw9168u","category_id":"cmdwh6nxh00138ubp817th5gb","_id":"cmdwh6nxt00208ubp2aw514dw"},{"post_id":"cmdwh6nxl001f8ubpghev3jzf","category_id":"cmdwh6nwx000d8ubp8x37h5ng","_id":"cmdwh6nxu00238ubp0fn7hmuf"},{"post_id":"cmdwh6nxm001k8ubpc40d5vlg","category_id":"cmdwh6nxh00138ubp817th5gb","_id":"cmdwh6nxu00278ubp9p1417rd"},{"post_id":"cmdwh6nx3000k8ubp373jerf9","category_id":"cmdwh6nxh00138ubp817th5gb","_id":"cmdwh6nxv002a8ubp2rbv68ho"},{"post_id":"cmdwh6nxm001n8ubphgqybda0","category_id":"cmdwh6nwx000d8ubp8x37h5ng","_id":"cmdwh6nxv002d8ubpfdfubiw8"},{"post_id":"cmdwh6nxo001s8ubp5h7s7v3e","category_id":"cmdwh6nwx000d8ubp8x37h5ng","_id":"cmdwh6nxv002h8ubp5xa3hmjm"},{"post_id":"cmdwh6nx8000n8ubpdpkv2tuc","category_id":"cmdwh6nxh00138ubp817th5gb","_id":"cmdwh6nxw002k8ubp22ee458d"},{"post_id":"cmdwh6nxr001y8ubp5gal3xlf","category_id":"cmdwh6nxh00138ubp817th5gb","_id":"cmdwh6nxz002o8ubpdv3p9ush"},{"post_id":"cmdwh6nx9000r8ubpejcweak3","category_id":"cmdwh6nxh00138ubp817th5gb","_id":"cmdwh6nxz002q8ubpek9g2o56"},{"post_id":"cmdwh6nxt00228ubp9c30arn6","category_id":"cmdwh6nxh00138ubp817th5gb","_id":"cmdwh6ny0002t8ubp6wq0fg8v"},{"post_id":"cmdwh6nxu00258ubp728scdxs","category_id":"cmdwh6nwx000d8ubp8x37h5ng","_id":"cmdwh6ny0002v8ubp3jsqbiyf"},{"post_id":"cmdwh6nxv00298ubpc4sf4wox","category_id":"cmdwh6nxh00138ubp817th5gb","_id":"cmdwh6ny0002y8ubpa7dt96ql"},{"post_id":"cmdwh6nxv002c8ubp5flk24qf","category_id":"cmdwh6nxh00138ubp817th5gb","_id":"cmdwh6ny000308ubpexxv5d6z"},{"post_id":"cmdwh6nxw002j8ubpac5cdf2o","category_id":"cmdwh6nxh00138ubp817th5gb","_id":"cmdwh6ny100338ubpgmh2euv2"},{"post_id":"cmdwh6nxx002n8ubpfw1zh7b7","category_id":"cmdwh6nxh00138ubp817th5gb","_id":"cmdwh6ny100358ubp376t1x9v"}],"PostTag":[{"post_id":"cmdwh6nw000018ubpd02zd6w9","tag_id":"cmdwh6nwj00058ubpf1ig7x99","_id":"cmdwh6nww000b8ubp92nsdr0v"},{"post_id":"cmdwh6nwa00038ubp2t3i3ymj","tag_id":"cmdwh6nwv000a8ubp1rvuf4oa","_id":"cmdwh6nx0000i8ubp4t0gc3oj"},{"post_id":"cmdwh6nwx000e8ubp4ks5gugb","tag_id":"cmdwh6nwv000a8ubp1rvuf4oa","_id":"cmdwh6nx7000l8ubpf7qx66i9"},{"post_id":"cmdwh6nwz000g8ubpasw9168u","tag_id":"cmdwh6nwv000a8ubp1rvuf4oa","_id":"cmdwh6nx9000o8ubpbzxx59iy"},{"post_id":"cmdwh6nx3000k8ubp373jerf9","tag_id":"cmdwh6nwv000a8ubp1rvuf4oa","_id":"cmdwh6nxb000s8ubp7f7qemyt"},{"post_id":"cmdwh6nx8000n8ubpdpkv2tuc","tag_id":"cmdwh6nwv000a8ubp1rvuf4oa","_id":"cmdwh6nxf000v8ubp2x9z8lqy"},{"post_id":"cmdwh6nx9000r8ubpejcweak3","tag_id":"cmdwh6nwv000a8ubp1rvuf4oa","_id":"cmdwh6nxg000z8ubp3pwo7icc"},{"post_id":"cmdwh6nxc000u8ubph3m76rha","tag_id":"cmdwh6nwy000f8ubpdwfh2qm4","_id":"cmdwh6nxh00128ubp7bzc7qvi"},{"post_id":"cmdwh6nxh00158ubpdulk1m92","tag_id":"cmdwh6nwv000a8ubp1rvuf4oa","_id":"cmdwh6nxj001b8ubp18i06y93"},{"post_id":"cmdwh6nwn00068ubp8d6u9z7u","tag_id":"cmdwh6nwy000f8ubpdwfh2qm4","_id":"cmdwh6nxl001e8ubp8lqq17jh"},{"post_id":"cmdwh6nwn00068ubp8d6u9z7u","tag_id":"cmdwh6nx8000m8ubp6q2m8s6x","_id":"cmdwh6nxl001j8ubp4fpf4kay"},{"post_id":"cmdwh6nwn00068ubp8d6u9z7u","tag_id":"cmdwh6nxc000t8ubp1hyd35tk","_id":"cmdwh6nxm001m8ubpb7q95f8b"},{"post_id":"cmdwh6nwn00068ubp8d6u9z7u","tag_id":"cmdwh6nxh00118ubpdet58ugr","_id":"cmdwh6nxn001q8ubp4x2t4bjy"},{"post_id":"cmdwh6nxm001k8ubpc40d5vlg","tag_id":"cmdwh6nwv000a8ubp1rvuf4oa","_id":"cmdwh6nxq001u8ubphk7deiux"},{"post_id":"cmdwh6nxq001v8ubp90cf32oc","tag_id":"cmdwh6nwv000a8ubp1rvuf4oa","_id":"cmdwh6nxt00218ubpg1fs3kw1"},{"post_id":"cmdwh6nxr001y8ubp5gal3xlf","tag_id":"cmdwh6nwv000a8ubp1rvuf4oa","_id":"cmdwh6nxu00248ubp7vpy6oo1"},{"post_id":"cmdwh6nxt00228ubp9c30arn6","tag_id":"cmdwh6nwv000a8ubp1rvuf4oa","_id":"cmdwh6nxu00288ubp2ige6e29"},{"post_id":"cmdwh6nwt00088ubp0bb2gdos","tag_id":"cmdwh6nxi00198ubp80wofeu6","_id":"cmdwh6nxv002b8ubpeunyh5pg"},{"post_id":"cmdwh6nwt00088ubp0bb2gdos","tag_id":"cmdwh6nxl001i8ubphmlh9zod","_id":"cmdwh6nxv002f8ubp8gq7g9t1"},{"post_id":"cmdwh6nwt00088ubp0bb2gdos","tag_id":"cmdwh6nxn001r8ubp7agbdnuc","_id":"cmdwh6nxw002i8ubp1v3cf56g"},{"post_id":"cmdwh6nwt00088ubp0bb2gdos","tag_id":"cmdwh6nxh00118ubpdet58ugr","_id":"cmdwh6nxw002m8ubp6iwi6fzx"},{"post_id":"cmdwh6nxv00298ubpc4sf4wox","tag_id":"cmdwh6nwv000a8ubp1rvuf4oa","_id":"cmdwh6nxz002p8ubp1mesc51m"},{"post_id":"cmdwh6nxv002c8ubp5flk24qf","tag_id":"cmdwh6nwv000a8ubp1rvuf4oa","_id":"cmdwh6ny0002s8ubpf1ip4az8"},{"post_id":"cmdwh6nxv002g8ubphx2070t2","tag_id":"cmdwh6nwv000a8ubp1rvuf4oa","_id":"cmdwh6ny0002u8ubp5x63h8x8"},{"post_id":"cmdwh6nxw002j8ubpac5cdf2o","tag_id":"cmdwh6nwv000a8ubp1rvuf4oa","_id":"cmdwh6ny0002x8ubp3znmca6y"},{"post_id":"cmdwh6nxx002n8ubpfw1zh7b7","tag_id":"cmdwh6nwv000a8ubp1rvuf4oa","_id":"cmdwh6ny0002z8ubpdv3m06p8"},{"post_id":"cmdwh6nwu00098ubp0v24fl37","tag_id":"cmdwh6nxu00268ubp9bfq7l2r","_id":"cmdwh6ny100328ubp8de049sl"},{"post_id":"cmdwh6nwu00098ubp0v24fl37","tag_id":"cmdwh6nxv002e8ubp26s6fk1n","_id":"cmdwh6ny100348ubp025zdii6"},{"post_id":"cmdwh6nwu00098ubp0v24fl37","tag_id":"cmdwh6nxc000t8ubp1hyd35tk","_id":"cmdwh6ny100378ubp4wodcgj3"},{"post_id":"cmdwh6nwu00098ubp0v24fl37","tag_id":"cmdwh6nxh00118ubpdet58ugr","_id":"cmdwh6ny100388ubp3q8a5j1r"},{"post_id":"cmdwh6nww000c8ubp39lgbume","tag_id":"cmdwh6nxv002e8ubp26s6fk1n","_id":"cmdwh6ny1003b8ubp5c9yfbpd"},{"post_id":"cmdwh6nww000c8ubp39lgbume","tag_id":"cmdwh6nxu00268ubp9bfq7l2r","_id":"cmdwh6ny1003c8ubp1t0y71lv"},{"post_id":"cmdwh6nww000c8ubp39lgbume","tag_id":"cmdwh6nxc000t8ubp1hyd35tk","_id":"cmdwh6ny2003e8ubph3qihz5p"},{"post_id":"cmdwh6nww000c8ubp39lgbume","tag_id":"cmdwh6nxh00118ubpdet58ugr","_id":"cmdwh6ny2003f8ubpd85bfcaq"},{"post_id":"cmdwh6nxf000y8ubp7hlj2di3","tag_id":"cmdwh6nxc000t8ubp1hyd35tk","_id":"cmdwh6ny4003h8ubp84gygbbh"},{"post_id":"cmdwh6nxf000y8ubp7hlj2di3","tag_id":"cmdwh6ny1003a8ubp4lkrccyy","_id":"cmdwh6ny4003i8ubp21wrdvx9"},{"post_id":"cmdwh6nxf000y8ubp7hlj2di3","tag_id":"cmdwh6ny2003d8ubp6971eak2","_id":"cmdwh6ny4003k8ubp4vej6gt3"},{"post_id":"cmdwh6nxg00108ubp4i0i9jjd","tag_id":"cmdwh6nxc000t8ubp1hyd35tk","_id":"cmdwh6ny4003l8ubp770l8eer"},{"post_id":"cmdwh6nxg00108ubp4i0i9jjd","tag_id":"cmdwh6ny2003d8ubp6971eak2","_id":"cmdwh6ny5003n8ubp698h7j4v"},{"post_id":"cmdwh6nxi00178ubp48f1c1tt","tag_id":"cmdwh6nwy000f8ubpdwfh2qm4","_id":"cmdwh6ny5003o8ubpfp4q9iyc"},{"post_id":"cmdwh6nxi00178ubp48f1c1tt","tag_id":"cmdwh6nxc000t8ubp1hyd35tk","_id":"cmdwh6ny5003q8ubpd9kyc43i"},{"post_id":"cmdwh6nxi00178ubp48f1c1tt","tag_id":"cmdwh6ny2003d8ubp6971eak2","_id":"cmdwh6ny5003r8ubpd2c6c823"},{"post_id":"cmdwh6nxk001c8ubp1l22acrr","tag_id":"cmdwh6nxv002e8ubp26s6fk1n","_id":"cmdwh6ny5003t8ubpbn7ibove"},{"post_id":"cmdwh6nxk001c8ubp1l22acrr","tag_id":"cmdwh6nxu00268ubp9bfq7l2r","_id":"cmdwh6ny5003u8ubp1sdic0c8"},{"post_id":"cmdwh6nxk001c8ubp1l22acrr","tag_id":"cmdwh6nxc000t8ubp1hyd35tk","_id":"cmdwh6ny5003w8ubp3lqpd318"},{"post_id":"cmdwh6nxk001c8ubp1l22acrr","tag_id":"cmdwh6nxh00118ubpdet58ugr","_id":"cmdwh6ny5003x8ubpby2ydi9v"},{"post_id":"cmdwh6nxl001f8ubpghev3jzf","tag_id":"cmdwh6nxv002e8ubp26s6fk1n","_id":"cmdwh6ny6003z8ubp0r7ocxg2"},{"post_id":"cmdwh6nxl001f8ubpghev3jzf","tag_id":"cmdwh6nxu00268ubp9bfq7l2r","_id":"cmdwh6ny600408ubp89hn7bgy"},{"post_id":"cmdwh6nxl001f8ubpghev3jzf","tag_id":"cmdwh6nxc000t8ubp1hyd35tk","_id":"cmdwh6ny600428ubp2mmz6mt4"},{"post_id":"cmdwh6nxl001f8ubpghev3jzf","tag_id":"cmdwh6nxh00118ubpdet58ugr","_id":"cmdwh6ny600438ubpcu5pcfus"},{"post_id":"cmdwh6nxm001n8ubphgqybda0","tag_id":"cmdwh6nxv002e8ubp26s6fk1n","_id":"cmdwh6ny600458ubp21ivcb0l"},{"post_id":"cmdwh6nxm001n8ubphgqybda0","tag_id":"cmdwh6nxu00268ubp9bfq7l2r","_id":"cmdwh6ny600468ubp1h394237"},{"post_id":"cmdwh6nxm001n8ubphgqybda0","tag_id":"cmdwh6nxc000t8ubp1hyd35tk","_id":"cmdwh6ny600488ubpa7yfgw7k"},{"post_id":"cmdwh6nxm001n8ubphgqybda0","tag_id":"cmdwh6nxh00118ubpdet58ugr","_id":"cmdwh6ny700498ubp3qd90ra8"},{"post_id":"cmdwh6nxo001s8ubp5h7s7v3e","tag_id":"cmdwh6nxu00268ubp9bfq7l2r","_id":"cmdwh6ny9004b8ubpet3f71ay"},{"post_id":"cmdwh6nxo001s8ubp5h7s7v3e","tag_id":"cmdwh6nxc000t8ubp1hyd35tk","_id":"cmdwh6ny9004c8ubp670y10m0"},{"post_id":"cmdwh6nxo001s8ubp5h7s7v3e","tag_id":"cmdwh6nxv002e8ubp26s6fk1n","_id":"cmdwh6nya004d8ubpe3vefric"},{"post_id":"cmdwh6nxu00258ubp728scdxs","tag_id":"cmdwh6ny7004a8ubp0smy8hn3","_id":"cmdwh6nya004e8ubpblc76x7t"},{"post_id":"cmdwh6nxu00258ubp728scdxs","tag_id":"cmdwh6nxc000t8ubp1hyd35tk","_id":"cmdwh6nya004f8ubpa5ufd3cu"}],"Tag":[{"name":"Hexo","_id":"cmdwh6nwj00058ubpf1ig7x99"},{"name":"面试题","_id":"cmdwh6nwv000a8ubp1rvuf4oa"},{"name":"二叉树","_id":"cmdwh6nwy000f8ubpdwfh2qm4"},{"name":"队列","_id":"cmdwh6nx8000m8ubp6q2m8s6x"},{"name":"递归","_id":"cmdwh6nxc000t8ubp1hyd35tk"},{"name":"leetcode","_id":"cmdwh6nxh00118ubpdet58ugr"},{"name":"Map","_id":"cmdwh6nxi00198ubp80wofeu6"},{"name":"小顶堆","_id":"cmdwh6nxl001i8ubphmlh9zod"},{"name":"桶排序","_id":"cmdwh6nxn001r8ubp7agbdnuc"},{"name":"回溯","_id":"cmdwh6nxu00268ubp9bfq7l2r"},{"name":"dfs","_id":"cmdwh6nxv002e8ubp26s6fk1n"},{"name":"bfs","_id":"cmdwh6ny1003a8ubp4lkrccyy"},{"name":"剑指offer","_id":"cmdwh6ny2003d8ubp6971eak2"},{"name":"排序","_id":"cmdwh6ny7004a8ubp0smy8hn3"}]}}